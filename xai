                            "value-format": e.optionModel.valueFormat
                        },
                        on: {
                            change: e.emitDefaultValueChange
                        },
                        model: {
                            value: e.optionModel.defaultValue,
                            callback: function(t) {
                                e.$set(e.optionModel, "defaultValue", t);
                            },
                            expression: "optionModel.defaultValue"
                        }
                    })], 1);
                },
                o = [],
                r = n("79fa"),
                s = n("b2bf"),
                a = {
                    name: "date-defaultValue-editor",
                    mixins: [r.b, s.a],
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        optionModel: Object
                    }
                },
                l = a,
                c = n("2877"),
                u = Object(c.a)(l, i, o, false, null, "040cc7a6", null);
            t.default = u.exports;
        },
        "6ca1": function(e, t, n) {
            var i = n("9fbb"),
                o = n("c901");
            e.exports = function(e) {
                return i(o(e));
            };
        },
        "6caf": function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.filterable")
                        }
                    }, [n("el-switch", {
                        model: {
                            value: e.optionModel.filterable,
                            callback: function(t) {
                                e.$set(e.optionModel, "filterable", t);
                            },
                            expression: "optionModel.filterable"
                        }
                    })], 1);
                },
                o = [],
                r = n("79fa"),
                s = {
                    name: "filterable-editor",
                    mixins: [r.b],
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        optionModel: Object
                    }
                },
                a = s,
                l = n("2877"),
                c = Object(l.a)(a, i, o, false, null, "5c0c4b3f", null);
            t.default = c.exports;
        },
        "6ce9": function(e, t, n) {},
        "6d04": function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("form-item-wrapper", {
                        attrs: {
                            designer: e.designer,
                            field: e.field,
                            rules: e.rules,
                            "design-state": e.designState,
                            "parent-widget": e.parentWidget,
                            "parent-list": e.parentList,
                            "index-of-parent-list": e.indexOfParentList,
                            "sub-form-row-index": e.subFormRowIndex,
                            "sub-form-col-index": e.subFormColIndex,
                            "sub-form-row-id": e.subFormRowId
                        }
                    }, [n("el-checkbox-group", {
                        ref: "fieldEditor",
                        attrs: {
                            disabled: e.field.options.disabled,
                            size: e.field.options.size
                        },
                        on: {
                            change: e.handleChangeEvent
                        },
                        model: {
                            value: e.fieldModel,
                            callback: function(t) {
                                e.fieldModel = t;
                            },
                            expression: "fieldModel"
                        }
                    }, [e.field.options.buttonStyle ? e._l(e.field.options.optionItems, function(t, i) {
                        return n("el-checkbox-button", {
                            key: i,
                            style: {
                                display: e.field.options.displayStyle
                            },
                            attrs: {
                                label: t.value,
                                disabled: t.disabled,
                                border: e.field.options.border
                            }
                        }, [e._v(e._s(t.label))]);
                    }) : e._l(e.field.options.optionItems, function(t, i) {
                        return n("el-checkbox", {
                            key: i,
                            style: {
                                display: e.field.options.displayStyle
                            },
                            attrs: {
                                label: t.value,
                                disabled: t.disabled,
                                border: e.field.options.border
                            }
                        }, [e._v(e._s(t.label))]);
                    })], 2)], 1);
                },
                o = [],
                r = (n("a9e3"), n("9eeb")),
                s = n("c6e3"),
                a = n("79fa"),
                l = n("2d11"),
                c = {
                    name: "checkbox-widget",
                    componentName: "FieldWidget",
                    mixins: [s.a, l.a, a.b],
                    props: {
                        field: Object,
                        parentWidget: Object,
                        parentList: Array,
                        indexOfParentList: Number,
                        designer: Object,
                        designState: {
                            type: Boolean,
                            default: false
                        },
                        subFormRowIndex: {
                            type: Number,
                            default: -1
                        },
                        subFormColIndex: {
                            type: Number,
                            default: -1
                        },
                        subFormRowId: {
                            type: String,
                            default: ""
                        }
                    },
                    components: {
                        FormItemWrapper: r.default
                    },
                    inject: ["refList", "formConfig", "globalOptionData", "globalModel"],
                    data: function() {
                        return {
                            oldFieldValue: null,
                            fieldModel: null,
                            rules: []
                        };
                    },
                    computed: {},
                    beforeCreate: function() {},
                    created: function() {
                        this.initOptionItems(), this.initFieldModel(), this.registerToRefList(), this.initEventHandler(), this.buildFieldRules(), this.handleOnCreated();
                    },
                    mounted: function() {
                        this.handleOnMounted();
                    },
                    beforeDestroy: function() {
                        this.unregisterFromRefList();
                    },
                    methods: {}
                },
                u = c,
                d = (n("cde5"), n("2877")),
                h = Object(d.a)(u, i, o, false, null, "608e81d3", null);
            t.default = h.exports;
        },
        "6d29": function(e, t, n) {
            "use strict";
            n("ceaf");
        },
        "6d4f": function(e, t, n) {
            (function(e) {
                (function() {
                    var e = "ace",
                        t = function() {
                            return this;
                        }();
                    if (t || "undefined" == typeof window || (t = window), e || "undefined" === typeof requirejs) {
                        var n = function(e, t, i) {
                            "string" === typeof e ? (2 == arguments.length && (i = t), n.modules[e] || (n.payloads[e] = i, n.modules[e] = null)) : n.original ? n.original.apply(this, arguments) : (console.error("dropping module because define wasn't a string."), console.trace());
                        };
                        n.modules = {}, n.payloads = {};
                        var i = function(e, t, n) {
                                if ("string" === typeof t) {
                                    var i = s(e, t);
                                    if (undefined != i) return n && n(), i;
                                } else if ("[object Array]" === Object.prototype.toString.call(t)) {
                                    for (var r = [], a = 0, l = t.length; a < l; ++a) {
                                        var c = s(e, t[a]);
                                        if (undefined == c && o.original) return;
                                        r.push(c);
                                    }
                                    return n && n.apply(null, r) || true;
                                }
                            },
                            o = function(e, t) {
                                var n = i("", e, t);
                                return undefined == n && o.original ? o.original.apply(this, arguments) : n;
                            },
                            r = function(e, t) {
                                if (-1 !== t.indexOf("!")) {
                                    var n = t.split("!");
                                    return r(e, n[0]) + "!" + r(e, n[1]);
                                }
                                if ("." == t.charAt(0)) {
                                    var i = e.split("/").slice(0, -1).join("/");
                                    t = i + "/" + t;
                                    while (-1 !== t.indexOf(".") && o != t) {
                                        var o = t;
                                        t = t.replace(/\/\.\//, "/").replace(/[^\/]+\/\.\.\//, "");
                                    }
                                }
                                return t;
                            },
                            s = function(e, t) {
                                t = r(e, t);
                                var o = n.modules[t];
                                if (!o) {
                                    if (o = n.payloads[t], "function" === typeof o) {
                                        var s = {},
                                            a = {
                                                id: t,
                                                uri: "",
                                                exports: s,
                                                packaged: true
                                            },
                                            c = o(l, s, a);
                                        s = c || a.exports, n.modules[t] = s, delete n.payloads[t];
                                    }
                                    o = n.modules[t] = s || o;
                                }
                                return o;
                            };
                        a(e);
                    }

                    function a(e) {
                        var i = t;
                        e && (t[e] || (t[e] = {}), i = t[e]), i.define && i.define.packaged || (n.original = i.define, i.define = n, i.define.packaged = true), i.require && i.require.packaged || (o.original = i.require, i.require = o, i.require.packaged = true);
                    }
                }(), ace.define("ace/lib/fixoldbrowsers", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    "undefined" == typeof Element || Element.prototype.remove || Object.defineProperty(Element.prototype, "remove", {
                        enumerable: false,
                        writable: true,
                        configurable: true,
                        value: function() {
                            this.parentNode && this.parentNode.removeChild(this);
                        }
                    });
                }), ace.define("ace/lib/useragent", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    t.OS = {
                        LINUX: "LINUX",
                        MAC: "MAC",
                        WINDOWS: "WINDOWS"
                    }, t.getOS = function() {
                        return t.isMac ? t.OS.MAC : t.isLinux ? t.OS.LINUX : t.OS.WINDOWS;
                    };
                    var i = "object" == typeof navigator ? navigator : {},
                        o = (/mac|win|linux/i.exec(i.platform) || ["other"])[0].toLowerCase(),
                        r = i.userAgent || "",
                        s = i.appName || "";
                    t.isWin = "win" == o, t.isMac = "mac" == o, t.isLinux = "linux" == o, t.isIE = "Microsoft Internet Explorer" == s || s.indexOf("MSAppHost") >= 0 ? parseFloat((r.match(/(?:MSIE |Trident\/[0-9]+[\.0-9]+;.*rv:)([0-9]+[\.0-9]+)/) || [])[1]) : parseFloat((r.match(/(?:Trident\/[0-9]+[\.0-9]+;.*rv:)([0-9]+[\.0-9]+)/) || [])[1]), t.isOldIE = t.isIE && t.isIE < 9, t.isGecko = t.isMozilla = r.match(/ Gecko\/\d+/), t.isOpera = "object" == typeof opera && "[object Opera]" == Object.prototype.toString.call(window.opera), t.isWebKit = parseFloat(r.split("WebKit/")[1]) || undefined, t.isChrome = parseFloat(r.split(" Chrome/")[1]) || undefined, t.isEdge = parseFloat(r.split(" Edge/")[1]) || undefined, t.isAIR = r.indexOf("AdobeAIR") >= 0, t.isAndroid = r.indexOf("Android") >= 0, t.isChromeOS = r.indexOf(" CrOS ") >= 0, t.isIOS = /iPad|iPhone|iPod/.test(r) && !window.MSStream, t.isIOS && (t.isMac = true), t.isMobile = t.isIOS || t.isAndroid;
                }), ace.define("ace/lib/dom", ["require", "exports", "module", "ace/lib/useragent"], function(e, t, n) {
                    "use strict";
                    var i, o = e("./useragent"),
                        r = "http://www.w3.org/1999/xhtml";
                    t.buildDom = function e(t, n, i) {
                        if ("string" == typeof t && t) {
                            var o = document.createTextNode(t);
                            return n && n.appendChild(o), o;
                        }
                        if (!Array.isArray(t)) return t && t.appendChild && n && n.appendChild(t), t;
                        if ("string" != typeof t[0] || !t[0]) {
                            for (var r = [], s = 0; s < t.length; s++) {
                                var a = e(t[s], n, i);
                                a && r.push(a);
                            }
                            return r;
                        }
                        var l = document.createElement(t[0]),
                            c = t[1],
                            u = 1;
                        c && "object" == typeof c && !Array.isArray(c) && (u = 2);
                        for (s = u; s < t.length; s++) e(t[s], l, i);
                        return 2 == u && Object.keys(c).forEach(function(e) {
                            var t = c[e];
                            "class" === e ? l.className = Array.isArray(t) ? t.join(" ") : t : "function" == typeof t || "value" == e || "$" == e[0] ? l[e] = t : "ref" === e ? i && (i[t] = l) : "style" === e ? "string" == typeof t && (l.style.cssText = t) : null != t && l.setAttribute(e, t);
                        }), n && n.appendChild(l), l;
                    }, t.getDocumentHead = function(e) {
                        return e || (e = document), e.head || e.getElementsByTagName("head")[0] || e.documentElement;
                    }, t.createElement = function(e, t) {
                        return document.createElementNS ? document.createElementNS(t || r, e) : document.createElement(e);
                    }, t.removeChildren = function(e) {
                        e.innerHTML = "";
                    }, t.createTextNode = function(e, t) {
                        var n = t ? t.ownerDocument : document;
                        return n.createTextNode(e);
                    }, t.createFragment = function(e) {
                        var t = e ? e.ownerDocument : document;
                        return t.createDocumentFragment();
                    }, t.hasCssClass = function(e, t) {
                        var n = (e.className + "").split(/\s+/g);
                        return -1 !== n.indexOf(t);
                    }, t.addCssClass = function(e, n) {
                        t.hasCssClass(e, n) || (e.className += " " + n);
                    }, t.removeCssClass = function(e, t) {
                        var n = e.className.split(/\s+/g);
                        while (1) {
                            var i = n.indexOf(t);
                            if (-1 == i) break;
                            n.splice(i, 1);
                        }
                        e.className = n.join(" ");
                    }, t.toggleCssClass = function(e, t) {
                        var n = e.className.split(/\s+/g),
                            i = true;
                        while (1) {
                            var o = n.indexOf(t);
                            if (-1 == o) break;
                            i = false, n.splice(o, 1);
                        }
                        return i && n.push(t), e.className = n.join(" "), i;
                    }, t.setCssClass = function(e, n, i) {
                        i ? t.addCssClass(e, n) : t.removeCssClass(e, n);
                    }, t.hasCssString = function(e, t) {
                        var n, i = 0;
                        if (t = t || document, n = t.querySelectorAll("style"))
                            while (i < n.length)
                                if (n[i++].id === e) return true;
                    };
                    var s = [];

                    function a() {
                        var e = s;
                        s = null, e && e.forEach(function(e) {
                            l(e[0], e[1]);
                        });
                    }

                    function l(e, n, o) {
                        if ("undefined" != typeof document) {
                            if (s)
                                if (o) a();
                                else if (false === o) return s.push([e, n]);
                            if (!i) {
                                var r = o;
                                o && o.getRootNode ? (r = o.getRootNode(), r && r != o || (r = document)) : r = document;
                                var l = r.ownerDocument || r;
                                if (n && t.hasCssString(n, r)) return null;
                                n && (e += "\n/*# sourceURL=ace/css/" + n + " */");
                                var c = t.createElement("style");
                                c.appendChild(l.createTextNode(e)), n && (c.id = n), r == l && (r = t.getDocumentHead(l)), r.insertBefore(c, r.firstChild);
                            }
                        }
                    }
                    if (t.useStrictCSP = function(e) {
                            i = e, 0 == e ? a() : s || (s = []);
                        }, t.importCssString = l, t.importCssStylsheet = function(e, n) {
                            t.buildDom(["link", {
                                rel: "stylesheet",
                                href: e
                            }], t.getDocumentHead(n));
                        }, t.scrollbarWidth = function(e) {
                            var n = t.createElement("ace_inner");
                            n.style.width = "100%", n.style.minWidth = "0px", n.style.height = "200px", n.style.display = "block";
                            var i = t.createElement("ace_outer"),
                                o = i.style;
                            o.position = "absolute", o.left = "-10000px", o.overflow = "hidden", o.width = "200px", o.minWidth = "0px", o.height = "150px", o.display = "block", i.appendChild(n);
                            var r = e.documentElement;
                            r.appendChild(i);
                            var s = n.offsetWidth;
                            o.overflow = "scroll";
                            var a = n.offsetWidth;
                            return s == a && (a = i.clientWidth), r.removeChild(i), s - a;
                        }, t.computedStyle = function(e, t) {
                            return window.getComputedStyle(e, "") || {};
                        }, t.setStyle = function(e, t, n) {
                            e[t] !== n && (e[t] = n);
                        }, t.HAS_CSS_ANIMATION = false, t.HAS_CSS_TRANSFORMS = false, t.HI_DPI = !o.isWin || "undefined" !== typeof window && window.devicePixelRatio >= 1.5, o.isChromeOS && (t.HI_DPI = false), "undefined" !== typeof document) {
                        var c = document.createElement("div");
                        t.HI_DPI && undefined !== c.style.transform && (t.HAS_CSS_TRANSFORMS = true), o.isEdge || "undefined" === typeof c.style.animationName || (t.HAS_CSS_ANIMATION = true), c = null;
                    }
                    t.HAS_CSS_TRANSFORMS ? t.translate = function(e, t, n) {
                        e.style.transform = "translate(" + Math.round(t) + "px, " + Math.round(n) + "px)";
                    } : t.translate = function(e, t, n) {
                        e.style.top = Math.round(n) + "px", e.style.left = Math.round(t) + "px";
                    };
                }), ace.define("ace/lib/oop", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    t.inherits = function(e, t) {
                        e.super_ = t, e.prototype = Object.create(t.prototype, {
                            constructor: {
                                value: e,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                    }, t.mixin = function(e, t) {
                        for (var n in t) e[n] = t[n];
                        return e;
                    }, t.implement = function(e, n) {
                        t.mixin(e, n);
                    };
                }), ace.define("ace/lib/keys", ["require", "exports", "module", "ace/lib/oop"], function(e, t, n) {
                    "use strict";
                    var i = e("./oop"),
                        o = function() {
                            var e, t, n = {
                                MODIFIER_KEYS: {
                                    16: "Shift",
                                    17: "Ctrl",
                                    18: "Alt",
                                    224: "Meta",
                                    91: "MetaLeft",
                                    92: "MetaRight",
                                    93: "ContextMenu"
                                },
                                KEY_MODS: {
                                    ctrl: 1,
                                    alt: 2,
                                    option: 2,
                                    shift: 4,
                                    super: 8,
                                    meta: 8,
                                    command: 8,
                                    cmd: 8,
                                    control: 1
                                },
                                FUNCTION_KEYS: {
                                    8: "Backspace",
                                    9: "Tab",
                                    13: "Return",
                                    19: "Pause",
                                    27: "Esc",
                                    32: "Space",
                                    33: "PageUp",
                                    34: "PageDown",
                                    35: "End",
                                    36: "Home",
                                    37: "Left",
                                    38: "Up",
                                    39: "Right",
                                    40: "Down",
                                    44: "Print",
                                    45: "Insert",
                                    46: "Delete",
                                    96: "Numpad0",
                                    97: "Numpad1",
                                    98: "Numpad2",
                                    99: "Numpad3",
                                    100: "Numpad4",
                                    101: "Numpad5",
                                    102: "Numpad6",
                                    103: "Numpad7",
                                    104: "Numpad8",
                                    105: "Numpad9",
                                    "-13": "NumpadEnter",
                                    112: "F1",
                                    113: "F2",
                                    114: "F3",
                                    115: "F4",
                                    116: "F5",
                                    117: "F6",
                                    118: "F7",
                                    119: "F8",
                                    120: "F9",
                                    121: "F10",
                                    122: "F11",
                                    123: "F12",
                                    144: "Numlock",
                                    145: "Scrolllock"
                                },
                                PRINTABLE_KEYS: {
                                    32: " ",
                                    48: "0",
                                    49: "1",
                                    50: "2",
                                    51: "3",
                                    52: "4",
                                    53: "5",
                                    54: "6",
                                    55: "7",
                                    56: "8",
                                    57: "9",
                                    59: ";",
                                    61: "=",
                                    65: "a",
                                    66: "b",
                                    67: "c",
                                    68: "d",
                                    69: "e",
                                    70: "f",
                                    71: "g",
                                    72: "h",
                                    73: "i",
                                    74: "j",
                                    75: "k",
                                    76: "l",
                                    77: "m",
                                    78: "n",
                                    79: "o",
                                    80: "p",
                                    81: "q",
                                    82: "r",
                                    83: "s",
                                    84: "t",
                                    85: "u",
                                    86: "v",
                                    87: "w",
                                    88: "x",
                                    89: "y",
                                    90: "z",
                                    107: "+",
                                    109: "-",
                                    110: ".",
                                    186: ";",
                                    187: "=",
                                    188: ",",
                                    189: "-",
                                    190: ".",
                                    191: "/",
                                    192: "`",
                                    219: "[",
                                    220: "\\",
                                    221: "]",
                                    222: "'",
                                    111: "/",
                                    106: "*"
                                }
                            };
                            for (t in n.FUNCTION_KEYS) e = n.FUNCTION_KEYS[t].toLowerCase(), n[e] = parseInt(t, 10);
                            for (t in n.PRINTABLE_KEYS) e = n.PRINTABLE_KEYS[t].toLowerCase(), n[e] = parseInt(t, 10);
                            return i.mixin(n, n.MODIFIER_KEYS), i.mixin(n, n.PRINTABLE_KEYS), i.mixin(n, n.FUNCTION_KEYS), n.enter = n.return, n.escape = n.esc, n.del = n.delete, n[173] = "-",
                                function() {
                                    for (var e = ["cmd", "ctrl", "alt", "shift"], t = Math.pow(2, e.length); t--;) n.KEY_MODS[t] = e.filter(function(e) {
                                        return t & n.KEY_MODS[e];
                                    }).join("-") + "-";
                                }(), n.KEY_MODS[0] = "", n.KEY_MODS[-1] = "input-", n;
                        }();
                    i.mixin(t, o), t.keyCodeToString = function(e) {
                        var t = o[e];
                        return "string" != typeof t && (t = String.fromCharCode(e)), t.toLowerCase();
                    };
                }), ace.define("ace/lib/event", ["require", "exports", "module", "ace/lib/keys", "ace/lib/useragent"], function(e, t, n) {
                    "use strict";
                    var i, o = e("./keys"),
                        r = e("./useragent"),
                        s = null,
                        a = 0;

                    function l() {
                        i = false;
                        try {
                            document.createComment("").addEventListener("test", function() {}, {
                                get passive() {
                                    i = {
                                        passive: false
                                    };
                                }
                            });
                        } catch (e) {}
                    }

                    function u(e, t, n) {
                        this.elem = e, this.type = t, this.callback = n;
                    }
                    u.prototype.destroy = function() {
                        h(this.elem, this.type, this.callback), this.elem = this.type = this.callback = undefined;
                    };
                    var d = t.addListener = function(e, t, n, i) {
                            e.addEventListener(t, n, (undefined == i && l(), i)), i && i.$toDestroy.push(new u(e, t, n));
                        },
                        h = t.removeListener = function(e, t, n) {
                            e.removeEventListener(t, n, (undefined == i && l(), i));
                        };
                    t.stopEvent = function(e) {
                        return t.stopPropagation(e), t.preventDefault(e), false;
                    }, t.stopPropagation = function(e) {
                        e.stopPropagation && e.stopPropagation();
                    }, t.preventDefault = function(e) {
                        e.preventDefault && e.preventDefault();
                    }, t.getButton = function(e) {
                        return "dblclick" == e.type ? 0 : "contextmenu" == e.type || r.isMac && e.ctrlKey && !e.altKey && !e.shiftKey ? 2 : e.button;
                    }, t.capture = function(e, t, n) {
                        var i = e && e.ownerDocument || document;

                        function o(e) {
                            t && t(e), n && n(e), h(i, "mousemove", t), h(i, "mouseup", o), h(i, "dragstart", o);
                        }
                        return d(i, "mousemove", t), d(i, "mouseup", o), d(i, "dragstart", o), o;
                    }, t.addMouseWheelListener = function(e, t, n) {
                        "onmousewheel" in e ? d(e, "mousewheel", function(e) {
                            var n = 8;
                            undefined !== e.wheelDeltaX ? (e.wheelX = -e.wheelDeltaX / n, e.wheelY = -e.wheelDeltaY / n) : (e.wheelX = 0, e.wheelY = -e.wheelDelta / n), t(e);
                        }, n) : "onwheel" in e ? d(e, "wheel", function(e) {
                            var n = 0.35;
                            switch (e.deltaMode) {
                                case e.DOM_DELTA_PIXEL:
                                    e.wheelX = e.deltaX * n || 0, e.wheelY = e.deltaY * n || 0;
                                    break;
                                case e.DOM_DELTA_LINE:
                                case e.DOM_DELTA_PAGE:
                                    e.wheelX = 5 * (e.deltaX || 0), e.wheelY = 5 * (e.deltaY || 0);
                                    break;
                            }
                            t(e);
                        }, n) : d(e, "DOMMouseScroll", function(e) {
                            e.axis && e.axis == e.HORIZONTAL_AXIS ? (e.wheelX = 5 * (e.detail || 0), e.wheelY = 0) : (e.wheelX = 0, e.wheelY = 5 * (e.detail || 0)), t(e);
                        }, n);
                    }, t.addMultiMouseDownListener = function(e, n, i, o, s) {
                        var a, l, c, u = 0,
                            h = {
                                2: "dblclick",
                                3: "tripleclick",
                                4: "quadclick"
                            };

                        function f(e) {
                            if (0 !== t.getButton(e) ? u = 0 : e.detail > 1 ? (u++, u > 4 && (u = 1)) : u = 1, r.isIE) {
                                var s = Math.abs(e.clientX - a) > 5 || Math.abs(e.clientY - l) > 5;
                                c && !s || (u = 1), c && clearTimeout(c), c = setTimeout(function() {
                                    c = null;
                                }, n[u - 1] || 600), 1 == u && (a = e.clientX, l = e.clientY);
                            }
                            if (e._clicks = u, i[o]("mousedown", e), u > 4) u = 0;
                            else if (u > 1) return i[o](h[u], e);
                        }
                        Array.isArray(e) || (e = [e]), e.forEach(function(e) {
                            d(e, "mousedown", f, s);
                        });
                    };

                    function p(e, t, n) {
                        var i = 0 | (t.ctrlKey ? 1 : 0) | (t.altKey ? 2 : 0) | (t.shiftKey ? 4 : 0) | (t.metaKey ? 8 : 0);
                        if (!r.isMac && s) {
                            if (t.getModifierState && (t.getModifierState("OS") || t.getModifierState("Win")) && (i |= 8), s.altGr) {
                                if (3 == (3 & i)) return;
                                s.altGr = 0;
                            }
                            if (18 === n || 17 === n) {
                                var l = "location" in t ? t.location : t.keyLocation;
                                if (17 === n && 1 === l) 1 == s[n] && (a = t.timeStamp);
                                else if (18 === n && 3 === i && 2 === l) {
                                    var c = t.timeStamp - a;
                                    c < 50 && (s.altGr = true);
                                }
                            }
                        }
                        if (n in o.MODIFIER_KEYS && (n = -1), !i && 13 === n) {
                            l = "location" in t ? t.location : t.keyLocation;
                            if (3 === l && (e(t, i, -n), t.defaultPrevented)) return;
                        }
                        if (r.isChromeOS && 8 & i) {
                            if (e(t, i, n), t.defaultPrevented) return;
                            i &= -9;
                        }
                        return !!(i || n in o.FUNCTION_KEYS || n in o.PRINTABLE_KEYS) && e(t, i, n);
                    }

                    function m() {
                        s = Object.create(null);
                    }
                    if (t.getModifierString = function(e) {
                            return o.KEY_MODS[0 | (e.ctrlKey ? 1 : 0) | (e.altKey ? 2 : 0) | (e.shiftKey ? 4 : 0) | (e.metaKey ? 8 : 0)];
                        }, t.addCommandKeyListener = function(e, n, i) {
                            if (r.isOldGecko || r.isOpera && !("KeyboardEvent" in window)) {
                                var o = null;
                                d(e, "keydown", function(e) {
                                    o = e.keyCode;
                                }, i), d(e, "keypress", function(e) {
                                    return p(n, e, o);
                                }, i);
                            } else {
                                var a = null;
                                d(e, "keydown", function(e) {
                                    s[e.keyCode] = (s[e.keyCode] || 0) + 1;
                                    var t = p(n, e, e.keyCode);
                                    return a = e.defaultPrevented, t;
                                }, i), d(e, "keypress", function(e) {
                                    a && (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) && (t.stopEvent(e), a = null);
                                }, i), d(e, "keyup", function(e) {
                                    s[e.keyCode] = null;
                                }, i), s || (m(), d(window, "focus", m));
                            }
                        }, "object" == typeof window && window.postMessage && !r.isOldIE) {
                        var g = 1;
                        t.nextTick = function(e, n) {
                            n = n || window;
                            var i = "zero-timeout-message-" + g++,
                                o = function(r) {
                                    r.data == i && (t.stopPropagation(r), h(n, "message", o), e());
                                };
                            d(n, "message", o), n.postMessage(i, "*");
                        };
                    }
                    t.$idleBlocked = false, t.onIdle = function(e, n) {
                        return setTimeout(function n() {
                            t.$idleBlocked ? setTimeout(n, 100) : e();
                        }, n);
                    }, t.$idleBlockId = null, t.blockIdle = function(e) {
                        t.$idleBlockId && clearTimeout(t.$idleBlockId), t.$idleBlocked = true, t.$idleBlockId = setTimeout(function() {
                            t.$idleBlocked = false;
                        }, e || 100);
                    }, t.nextFrame = "object" == typeof window && (window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame), t.nextFrame ? t.nextFrame = t.nextFrame.bind(window) : t.nextFrame = function(e) {
                        setTimeout(e, 17);
                    };
                }), ace.define("ace/range", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    var o = function(e, t, n, i) {
                        this.start = {
                            row: e,
                            column: t
                        }, this.end = {
                            row: n,
                            column: i
                        };
                    };
                    (function() {
                        this.isEqual = function(e) {
                            return this.start.row === e.start.row && this.end.row === e.end.row && this.start.column === e.start.column && this.end.column === e.end.column;
                        }, this.toString = function() {
                            return "Range: [" + this.start.row + "/" + this.start.column + "] -> [" + this.end.row + "/" + this.end.column + "]";
                        }, this.contains = function(e, t) {
                            return 0 == this.compare(e, t);
                        }, this.compareRange = function(e) {
                            var t, n = e.end,
                                i = e.start;
                            return t = this.compare(n.row, n.column), 1 == t ? (t = this.compare(i.row, i.column), 1 == t ? 2 : 0 == t ? 1 : 0) : -1 == t ? -2 : (t = this.compare(i.row, i.column), -1 == t ? -1 : 1 == t ? 42 : 0);
                        }, this.comparePoint = function(e) {
                            return this.compare(e.row, e.column);
                        }, this.containsRange = function(e) {
                            return 0 == this.comparePoint(e.start) && 0 == this.comparePoint(e.end);
                        }, this.intersects = function(e) {
                            var t = this.compareRange(e);
                            return -1 == t || 0 == t || 1 == t;
                        }, this.isEnd = function(e, t) {
                            return this.end.row == e && this.end.column == t;
                        }, this.isStart = function(e, t) {
                            return this.start.row == e && this.start.column == t;
                        }, this.setStart = function(e, t) {
                            "object" == typeof e ? (this.start.column = e.column, this.start.row = e.row) : (this.start.row = e, this.start.column = t);
                        }, this.setEnd = function(e, t) {
                            "object" == typeof e ? (this.end.column = e.column, this.end.row = e.row) : (this.end.row = e, this.end.column = t);
                        }, this.inside = function(e, t) {
                            return 0 == this.compare(e, t) && (!this.isEnd(e, t) && !this.isStart(e, t));
                        }, this.insideStart = function(e, t) {
                            return 0 == this.compare(e, t) && !this.isEnd(e, t);
                        }, this.insideEnd = function(e, t) {
                            return 0 == this.compare(e, t) && !this.isStart(e, t);
                        }, this.compare = function(e, t) {
                            return this.isMultiLine() || e !== this.start.row ? e < this.start.row ? -1 : e > this.end.row ? 1 : this.start.row === e ? t >= this.start.column ? 0 : -1 : this.end.row === e ? t <= this.end.column ? 0 : 1 : 0 : t < this.start.column ? -1 : t > this.end.column ? 1 : 0;
                        }, this.compareStart = function(e, t) {
                            return this.start.row == e && this.start.column == t ? -1 : this.compare(e, t);
                        }, this.compareEnd = function(e, t) {
                            return this.end.row == e && this.end.column == t ? 1 : this.compare(e, t);
                        }, this.compareInside = function(e, t) {
                            return this.end.row == e && this.end.column == t ? 1 : this.start.row == e && this.start.column == t ? -1 : this.compare(e, t);
                        }, this.clipRows = function(e, t) {
                            if (this.end.row > t) var n = {
                                row: t + 1,
                                column: 0
                            };
                            else if (this.end.row < e) n = {
                                row: e,
                                column: 0
                            };
                            if (this.start.row > t) var i = {
                                row: t + 1,
                                column: 0
                            };
                            else if (this.start.row < e) i = {
                                row: e,
                                column: 0
                            };
                            return o.fromPoints(i || this.start, n || this.end);
                        }, this.extend = function(e, t) {
                            var n = this.compare(e, t);
                            if (0 == n) return this;
                            if (-1 == n) var i = {
                                row: e,
                                column: t
                            };
                            else var r = {
                                row: e,
                                column: t
                            };
                            return o.fromPoints(i || this.start, r || this.end);
                        }, this.isEmpty = function() {
                            return this.start.row === this.end.row && this.start.column === this.end.column;
                        }, this.isMultiLine = function() {
                            return this.start.row !== this.end.row;
                        }, this.clone = function() {
                            return o.fromPoints(this.start, this.end);
                        }, this.collapseRows = function() {
                            return 0 == this.end.column ? new o(this.start.row, 0, Math.max(this.start.row, this.end.row - 1), 0) : new o(this.start.row, 0, this.end.row, 0);
                        }, this.toScreenRange = function(e) {
                            var t = e.documentToScreenPosition(this.start),
                                n = e.documentToScreenPosition(this.end);
                            return new o(t.row, t.column, n.row, n.column);
                        }, this.moveBy = function(e, t) {
                            this.start.row += e, this.start.column += t, this.end.row += e, this.end.column += t;
                        };
                    }.call(o.prototype), o.fromPoints = function(e, t) {
                        return new o(e.row, e.column, t.row, t.column);
                    }, o.comparePoints = i, o.comparePoints = function(e, t) {
                        return e.row - t.row || e.column - t.column;
                    }, t.Range = o);
                }), ace.define("ace/lib/lang", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    t.last = function(e) {
                        return e[e.length - 1];
                    }, t.stringReverse = function(e) {
                        return e.split("").reverse().join("");
                    }, t.stringRepeat = function(e, t) {
                        var n = "";
                        while (t > 0) 1 & t && (n += e), (t >>= 1) && (e += e);
                        return n;
                    };
                    var i = /^\s\s*/,
                        o = /\s\s*$/;
                    t.stringTrimLeft = function(e) {
                        return e.replace(i, "");
                    }, t.stringTrimRight = function(e) {
                        return e.replace(o, "");
                    }, t.copyObject = function(e) {
                        var t = {};
                        for (var n in e) t[n] = e[n];
                        return t;
                    }, t.copyArray = function(e) {
                        for (var t = [], n = 0, i = e.length; n < i; n++) e[n] && "object" == typeof e[n] ? t[n] = this.copyObject(e[n]) : t[n] = e[n];
                        return t;
                    }, t.deepCopy = function e(t) {
                        if ("object" !== typeof t || !t) return t;
                        var n;
                        if (Array.isArray(t)) {
                            n = [];
                            for (var i = 0; i < t.length; i++) n[i] = e(t[i]);
                            return n;
                        }
                        if ("[object Object]" !== Object.prototype.toString.call(t)) return t;
                        for (var i in n = {}, t) n[i] = e(t[i]);
                        return n;
                    }, t.arrayToMap = function(e) {
                        for (var t = {}, n = 0; n < e.length; n++) t[e[n]] = 1;
                        return t;
                    }, t.createMap = function(e) {
                        var t = Object.create(null);
                        for (var n in e) t[n] = e[n];
                        return t;
                    }, t.arrayRemove = function(e, t) {
                        for (var n = 0; n <= e.length; n++) t === e[n] && e.splice(n, 1);
                    }, t.escapeRegExp = function(e) {
                        return e.replace(/([.*+?^${}()|[\]\/\\])/g, "\\$1");
                    }, t.escapeHTML = function(e) {
                        return ("" + e).replace(/&/g, "&#38;").replace(/"/g, "&#34;").replace(/'/g, "&#39;").replace(/</g, "&#60;");
                    }, t.getMatchOffsets = function(e, t) {
                        var n = [];
                        return e.replace(t, function(e) {
                            n.push({
                                offset: arguments[arguments.length - 2],
                                length: e.length
                            });
                        }), n;
                    }, t.deferredCall = function(e) {
                        var t = null,
                            n = function() {
                                t = null, e();
                            };
                        return i.schedule = i, i.call = function() {
                            return this.cancel(), e(), i;
                        }, i.cancel = function() {
                            return clearTimeout(t), t = null, i;
                        }, i.isPending = function() {
                            return t;
                        }, i;
                    }, t.delayedCall = function(e, t) {
                        var n = null,
                            i = function() {
                                n = null, e();
                            },
                            o = function(e) {
                                null == n && (n = setTimeout(i, e || t));
                            };
                        return o.delay = function(e) {
                            n && clearTimeout(n), n = setTimeout(i, e || t);
                        }, o.schedule = o, o.call = function() {
                            this.cancel(), e();
                        }, o.cancel = function() {
                            n && clearTimeout(n), n = null;
                        }, o.isPending = function() {
                            return n;
                        }, o;
                    };
                }), ace.define("ace/clipboard", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    var i;
                    n.exports = {
                        lineMode: false,
                        pasteCancelled: function() {
                            return !!(i && i > Date.now() - 50) || (i = false);
                        },
                        cancel: function() {
                            i = Date.now();
                        }
                    };
                }), ace.define("ace/keyboard/textinput", ["require", "exports", "module", "ace/lib/event", "ace/lib/useragent", "ace/lib/dom", "ace/lib/lang", "ace/clipboard", "ace/lib/keys"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/event"),
                        o = e("../lib/useragent"),
                        r = e("../lib/dom"),
                        s = e("../lib/lang"),
                        a = e("../clipboard"),
                        l = o.isChrome < 18,
                        c = o.isIE,
                        u = o.isChrome > 63,
                        d = 400,
                        h = e("../lib/keys"),
                        f = h.KEY_MODS,
                        p = o.isIOS,
                        m = p ? /\s/ : /\n/,
                        g = o.isMobile,
                        v = function(e, t) {
                            var n = r.createElement("textarea");
                            n.className = "ace_text-input", n.setAttribute("wrap", "off"), n.setAttribute("autocorrect", "off"), n.setAttribute("autocapitalize", "off"), n.setAttribute("spellcheck", false), n.style.opacity = "0", e.insertBefore(n, e.firstChild);
                            var v = false,
                                b = false,
                                y = false,
                                w = false,
                                x = "";
                            g || (n.style.fontSize = "1px");
                            var _ = false,
                                C = false,
                                k = "",
                                S = 0,
                                O = 0,
                                E = 0;
                            try {
                                var $ = document.activeElement === n;
                            } catch (J) {}
                            i.addListener(n, "blur", function(e) {
                                C || (t.onBlur(e), $ = false);
                            }, t), i.addListener(n, "focus", function(e) {
                                if (!C) {
                                    if ($ = true, o.isEdge) try {
                                        if (!document.hasFocus()) return;
                                    } catch (e) {}
                                    t.onFocus(e), o.isEdge ? setTimeout(M) : M();
                                }
                            }, t), this.$focusScroll = false, this.focus = function() {
                                if (x || u || "browser" == this.$focusScroll) return n.focus({
                                    preventScroll: true
                                });
                                var e = n.style.top;
                                n.style.position = "fixed", n.style.top = "0px";
                                try {
                                    var t = 0 != n.getBoundingClientRect().top;
                                } catch (J) {
                                    return;
                                }
                                var i = [];
                                if (t) {
                                    var o = n.parentElement;
                                    while (o && 1 == o.nodeType) i.push(o), o.setAttribute("ace_nocontext", true), o = !o.parentElement && o.getRootNode ? o.getRootNode().host : o.parentElement;
                                }
                                n.focus({
                                    preventScroll: true
                                }), t && i.forEach(function(e) {
                                    e.removeAttribute("ace_nocontext");
                                }), setTimeout(function() {
                                    n.style.position = "", "0px" == n.style.top && (n.style.top = e);
                                }, 0);
                            }, this.blur = function() {
                                n.blur();
                            }, this.isFocused = function() {
                                return $;
                            }, t.on("beforeEndOperation", function() {
                                var e = t.curOp,
                                    i = e && e.command && e.command.name;
                                if ("insertstring" != i) {
                                    var o = i && (e.docChanged || e.selectionChanged);
                                    y && o && (k = n.value = "", H()), M();
                                }
                            });
                            var M = p ? function(e) {
                                if ($ && (!v || e) && !w) {
                                    e || (e = "");
                                    var i = "\n ab" + e + "cde fg\n";
                                    i != n.value && (n.value = k = i);
                                    var o = 4,
                                        r = 4 + (e.length || (t.selection.isEmpty() ? 0 : 1));
                                    S == o && O == r || n.setSelectionRange(o, r), S = o, O = r;
                                }
                            } : function() {
                                if (!y && !w && ($ || D)) {
                                    y = true;
                                    var e = 0,
                                        i = 0,
                                        o = "";
                                    if (t.session) {
                                        var r = t.selection,
                                            s = r.getRange(),
                                            a = r.cursor.row;
                                        if (e = s.start.column, i = s.end.column, o = t.session.getLine(a), s.start.row != a) {
                                            var l = t.session.getLine(a - 1);
                                            e = s.start.row < a - 1 ? 0 : e, i += l.length + 1, o = l + "\n" + o;
                                        } else if (s.end.row != a) {
                                            var c = t.session.getLine(a + 1);
                                            i = s.end.row > a + 1 ? c.length : i, i += o.length + 1, o = o + "\n" + c;
                                        } else g && a > 0 && (o = "\n" + o, i += 1, e += 1);
                                        o.length > d && (e < d && i < d ? o = o.slice(0, d) : (o = "\n", e == i ? e = i = 0 : (e = 0, i = 1)));
                                    }
                                    var u = o + "\n\n";
                                    if (u != k && (n.value = k = u, S = O = u.length), D && (S = n.selectionStart, O = n.selectionEnd), O != i || S != e || n.selectionEnd != O) try {
                                        n.setSelectionRange(e, i), S = e, O = i;
                                    } catch (J) {}
                                    y = false;
                                }
                            };
                            this.resetSelection = M, $ && t.onFocus();
                            var L = function(e) {
                                    y || (v ? v = false : 0 === n.selectionStart && n.selectionEnd >= k.length && n.value === k && k && n.selectionEnd !== O ? (t.selectAll(), M()) : g && n.selectionStart != S && M());
                                },
                                A = null;
                            this.setInputHandler = function(e) {
                                A = e;
                            }, this.getInputHandler = function() {
                                return A;
                            };
                            var D = false,
                                F = function(e, i) {
                                    if (D && (D = false), b) return M(), e && t.onPaste(e), b = false, "";
                                    var r = n.selectionStart,
                                        s = n.selectionEnd,
                                        a = S,
                                        l = k.length - O,
                                        c = e,
                                        u = e.length - r,
                                        d = e.length - s,
                                        h = 0;
                                    while (a > 0 && k[h] == e[h]) h++, a--;
                                    c = c.slice(h), h = 1;
                                    while (l > 0 && k.length - h > S - 1 && k[k.length - h] == e[e.length - h]) h++, l--;
                                    u -= h - 1, d -= h - 1;
                                    var f = c.length - h + 1;
                                    if (f < 0 && (a = -f, f = 0), c = c.slice(0, f), !i && !c && !u && !a && !l && !d) return "";
                                    w = true;
                                    var p = false;
                                    return o.isAndroid && ". " == c && (c = "  ", p = true), c && !a && !l && !u && !d || _ ? t.onTextInput(c) : t.onTextInput(c, {
                                        extendLeft: a,
                                        extendRight: l,
                                        restoreStart: u,
                                        restoreEnd: d
                                    }), w = false, k = e, S = r, O = s, E = d, p ? "\n" : c;
                                },
                                R = function(e) {
                                    if (y) return W();
                                    if (e && e.inputType) {
                                        if ("historyUndo" == e.inputType) return t.execCommand("undo");
                                        if ("historyRedo" == e.inputType) return t.execCommand("redo");
                                    }
                                    var i = n.value,
                                        o = F(i, true);
                                    (i.length > d + 100 || m.test(o) || g && S < 1 && S == O) && M();
                                },
                                j = function(e, t, n) {
                                    var i = e.clipboardData || window.clipboardData;
                                    if (i && !l) {
                                        var o = c || n ? "Text" : "text/plain";
                                        try {
                                            return t ? false !== i.setData(o, t) : i.getData(o);
                                        } catch (e) {
                                            if (!n) return j(e, t, true);
                                        }
                                    }
                                },
                                P = function(e, o) {
                                    var r = t.getCopyText();
                                    if (!r) return i.preventDefault(e);
                                    j(e, r) ? (p && (M(r), v = r, setTimeout(function() {
                                        v = false;
                                    }, 10)), o ? t.onCut() : t.onCopy(), i.preventDefault(e)) : (v = true, n.value = r, n.select(), setTimeout(function() {
                                        v = false, M(), o ? t.onCut() : t.onCopy();
                                    }));
                                },
                                I = function(e) {
                                    P(e, true);
                                },
                                N = function(e) {
                                    P(e, false);
                                },
                                q = function(e) {
                                    var r = j(e);
                                    a.pasteCancelled() || ("string" == typeof r ? (r && t.onPaste(r, e), o.isIE && setTimeout(M), i.preventDefault(e)) : (n.value = "", b = true));
                                };
                            i.addCommandKeyListener(n, t.onCommandKey.bind(t), t), i.addListener(n, "select", L, t), i.addListener(n, "input", R, t), i.addListener(n, "cut", I, t), i.addListener(n, "copy", N, t), i.addListener(n, "paste", q, t), "oncut" in n && "oncopy" in n && "onpaste" in n || i.addListener(e, "keydown", function(e) {
                                if ((!o.isMac || e.metaKey) && e.ctrlKey) switch (e.keyCode) {
                                    case 67:
                                        N(e);
                                        break;
                                    case 86:
                                        q(e);
                                        break;
                                    case 88:
                                        I(e);
                                        break;
                                }
                            }, t);
                            var B = function(e) {
                                    if (!y && t.onCompositionStart && !t.$readOnly && (y = {}, !_)) {
                                        e.data && (y.useTextareaForIME = false), setTimeout(W, 0), t._signal("compositionStart"), t.on("mousedown", V);
                                        var i = t.getSelectionRange();
                                        i.end.row = i.start.row, i.end.column = i.start.column, y.markerRange = i, y.selectionStart = S, t.onCompositionStart(y), y.useTextareaForIME ? (k = n.value = "", S = 0, O = 0) : (n.msGetInputContext && (y.context = n.msGetInputContext()), n.getInputContext && (y.context = n.getInputContext()));
                                    }
                                },
                                W = function() {
                                    if (y && t.onCompositionUpdate && !t.$readOnly) {
                                        if (_) return V();
                                        if (y.useTextareaForIME) t.onCompositionUpdate(n.value);
                                        else {
                                            var e = n.value;
                                            F(e), y.markerRange && (y.context && (y.markerRange.start.column = y.selectionStart = y.context.compositionStartOffset), y.markerRange.end.column = y.markerRange.start.column + O - y.selectionStart + E);
                                        }
                                    }
                                },
                                H = function(e) {
                                    t.onCompositionEnd && !t.$readOnly && (y = false, t.onCompositionEnd(), t.off("mousedown", V), e && R());
                                };

                            function V() {
                                C = true, n.blur(), n.focus(), C = false;
                            }
                            var z, U = s.delayedCall(W, 50).schedule.bind(null, null);

                            function K(e) {
                                27 == e.keyCode && n.value.length < n.selectionStart && (y || (k = n.value), S = O = -1, M()), U();
                            }

                            function G() {
                                clearTimeout(z), z = setTimeout(function() {
                                    x && (n.style.cssText = x, x = ""), t.renderer.$isMousePressed = false, t.renderer.$keepTextAreaAtCursor && t.renderer.$moveTextAreaToCursor();
                                }, 0);
                            }
                            i.addListener(n, "compositionstart", B, t), i.addListener(n, "compositionupdate", W, t), i.addListener(n, "keyup", K, t), i.addListener(n, "keydown", U, t), i.addListener(n, "compositionend", H, t), this.getElement = function() {
                                return n;
                            }, this.setCommandMode = function(e) {
                                _ = e, n.readOnly = false;
                            }, this.setReadOnly = function(e) {
                                _ || (n.readOnly = e);
                            }, this.setCopyWithEmptySelection = function(e) {}, this.onContextMenu = function(e) {
                                D = true, M(), t._emit("nativecontextmenu", {
                                    target: t,
                                    domEvent: e
                                }), this.moveToMouse(e, true);
                            }, this.moveToMouse = function(e, s) {
                                x || (x = n.style.cssText), n.style.cssText = (s ? "z-index:100000;" : "") + (o.isIE ? "opacity:0.1;" : "") + "text-indent: -" + (S + O) * t.renderer.characterWidth * 0.5 + "px;";
                                var a = t.container.getBoundingClientRect(),
                                    l = r.computedStyle(t.container),
                                    c = a.top + (parseInt(l.borderTopWidth) || 0),
                                    u = a.left + (parseInt(a.borderLeftWidth) || 0),
                                    d = a.bottom - c - n.clientHeight - 2,
                                    h = function(e) {
                                        r.translate(n, e.clientX - u - 2, Math.min(e.clientY - c - 2, d));
                                    };
                                h(e), "mousedown" == e.type && (t.renderer.$isMousePressed = true, clearTimeout(z), o.isWin && i.capture(t.container, h, G));
                            }, this.onContextMenuClose = G;
                            var Y = function(e) {
                                t.textInput.onContextMenu(e), G();
                            };

                            function X(e, t, n) {
                                var i = null,
                                    o = false;
                                n.addEventListener("keydown", function(e) {
                                    i && clearTimeout(i), o = true;
                                }, true), n.addEventListener("keyup", function(e) {
                                    i = setTimeout(function() {
                                        o = false;
                                    }, 100);
                                }, true);
                                var r = function(e) {
                                    if (document.activeElement === n && !(o || y || t.$mouseHandler.isMousePressed) && !v) {
                                        var i = n.selectionStart,
                                            r = n.selectionEnd,
                                            s = null,
                                            a = 0;
                                        if (0 == i ? s = h.up : 1 == i ? s = h.home : r > O && "\n" == k[r] ? s = h.end : i < S && " " == k[i - 1] ? (s = h.left, a = f.option) : i < S || i == S && O != S && i == r ? s = h.left : r > O && k.slice(0, r).split("\n").length > 2 ? s = h.down : r > O && " " == k[r - 1] ? (s = h.right, a = f.option) : (r > O || r == O && O != S && i == r) && (s = h.right), i !== r && (a |= f.shift), s) {
                                            var l = t.onCommandKey({}, a, s);
                                            if (!l && t.commands) {
                                                s = h.keyCodeToString(s);
                                                var c = t.commands.findKeyCommand(a, s);
                                                c && t.execCommand(c);
                                            }
                                            S = i, O = r, M("");
                                        }
                                    }
                                };
                                document.addEventListener("selectionchange", r), t.on("destroy", function() {
                                    document.removeEventListener("selectionchange", r);
                                });
                            }
                            i.addListener(n, "mouseup", Y, t), i.addListener(n, "mousedown", function(e) {
                                e.preventDefault(), G();
                            }, t), i.addListener(t.renderer.scroller, "contextmenu", Y, t), i.addListener(n, "contextmenu", Y, t), p && X(e, t, n);
                        };
                    t.TextInput = v, t.$setUserAgentForTests = function(e, t) {
                        g = e, p = t;
                    };
                }), ace.define("ace/mouse/default_handlers", ["require", "exports", "module", "ace/lib/useragent"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/useragent"),
                        o = 0,
                        r = 550;

                    function s(e) {
                        e.$clickSelection = null;
                        var t = e.editor;
                        t.setDefaultHandler("mousedown", this.onMouseDown.bind(e)), t.setDefaultHandler("dblclick", this.onDoubleClick.bind(e)), t.setDefaultHandler("tripleclick", this.onTripleClick.bind(e)), t.setDefaultHandler("quadclick", this.onQuadClick.bind(e)), t.setDefaultHandler("mousewheel", this.onMouseWheel.bind(e));
                        var n = ["select", "startSelect", "selectEnd", "selectAllEnd", "selectByWordsEnd", "selectByLinesEnd", "dragWait", "dragWaitEnd", "focusWait"];
                        n.forEach(function(t) {
                            e[t] = this[t];
                        }, this), e.selectByLines = this.extendSelectionBy.bind(e, "getLineRange"), e.selectByWords = this.extendSelectionBy.bind(e, "getWordRange");
                    }

                    function l(e, t) {
                        if (e.start.row == e.end.row) var n = 2 * t.column - e.start.column - e.end.column;
                        else if (e.start.row != e.end.row - 1 || e.start.column || e.end.column) n = 2 * t.row - e.start.row - e.end.row;
                        else var n = t.column - 4;
                        return n < 0 ? {
                            cursor: e.start,
                            anchor: e.end
                        } : {
                            cursor: e.end,
                            anchor: e.start
                        };
                    }
                    (function() {
                        this.onMouseDown = function(e) {
                            var t = e.inSelection(),
                                n = e.getDocumentPosition();
                            this.mousedownEvent = e;
                            var o = this.editor,
                                r = e.getButton();
                            if (0 !== r) {
                                var s = o.getSelectionRange(),
                                    a = s.isEmpty();
                                return (a || 1 == r) && o.selection.moveToPosition(n), void(2 == r && (o.textInput.onContextMenu(e.domEvent), i.isMozilla || e.preventDefault()));
                            }
                            return this.mousedownEvent.time = Date.now(), !t || o.isFocused() || (o.focus(), !this.$focusTimeout || this.$clickSelection || o.inMultiSelectMode) ? (this.captureMouse(e), this.startSelect(n, e.domEvent._clicks > 1), e.preventDefault()) : (this.setState("focusWait"), void this.captureMouse(e));
                        }, this.startSelect = function(e, t) {
                            e = e || this.editor.renderer.screenToTextCoordinates(this.x, this.y);
                            var n = this.editor;
                            this.mousedownEvent && (this.mousedownEvent.getShiftKey() ? n.selection.selectToPosition(e) : t || n.selection.moveToPosition(e), t || this.select(), n.renderer.scroller.setCapture && n.renderer.scroller.setCapture(), n.setStyle("ace_selecting"), this.setState("select"));
                        }, this.select = function() {
                            var e, t = this.editor,
                                n = t.renderer.screenToTextCoordinates(this.x, this.y);
                            if (this.$clickSelection) {
                                var i = this.$clickSelection.comparePoint(n);
                                if (-1 == i) e = this.$clickSelection.end;
                                else if (1 == i) e = this.$clickSelection.start;
                                else {
                                    var o = l(this.$clickSelection, n);
                                    n = o.cursor, e = o.anchor;
                                }
                                t.selection.setSelectionAnchor(e.row, e.column);
                            }
                            t.selection.selectToPosition(n), t.renderer.scrollCursorIntoView();
                        }, this.extendSelectionBy = function(e) {
                            var t, n = this.editor,
                                i = n.renderer.screenToTextCoordinates(this.x, this.y),
                                o = n.selection[e](i.row, i.column);
                            if (this.$clickSelection) {
                                var r = this.$clickSelection.comparePoint(o.start),
                                    s = this.$clickSelection.comparePoint(o.end);
                                if (-1 == r && s <= 0) t = this.$clickSelection.end, o.end.row == i.row && o.end.column == i.column || (i = o.start);
                                else if (1 == s && r >= 0) t = this.$clickSelection.start, o.start.row == i.row && o.start.column == i.column || (i = o.end);
                                else if (-1 == r && 1 == s) i = o.end, t = o.start;
                                else {
                                    var a = l(this.$clickSelection, i);
                                    i = a.cursor, t = a.anchor;
                                }
                                n.selection.setSelectionAnchor(t.row, t.column);
                            }
                            n.selection.selectToPosition(i), n.renderer.scrollCursorIntoView();
                        }, this.selectEnd = this.selectAllEnd = this.selectByWordsEnd = this.selectByLinesEnd = function() {
                            this.$clickSelection = null, this.editor.unsetStyle("ace_selecting"), this.editor.renderer.scroller.releaseCapture && this.editor.renderer.scroller.releaseCapture();
                        }, this.focusWait = function() {
                            var e = Math.sqrt(Math.pow(this.x - this.mousedownEvent.x, 2) + Math.pow(this.y - this.mousedownEvent.y, 2)),
                                t = Date.now();
                            (e > o || t - this.mousedownEvent.time > this.$focusTimeout) && this.startSelect(this.mousedownEvent.getDocumentPosition());
                        }, this.onDoubleClick = function(e) {
                            var t = e.getDocumentPosition(),
                                n = this.editor,
                                i = n.session,
                                o = i.getBracketRange(t);
                            o ? (o.isEmpty() && (o.start.column--, o.end.column++), this.setState("select")) : (o = n.selection.getWordRange(t.row, t.column), this.setState("selectByWords")), this.$clickSelection = o, this.select();
                        }, this.onTripleClick = function(e) {
                            var t = e.getDocumentPosition(),
                                n = this.editor;
                            this.setState("selectByLines");
                            var i = n.getSelectionRange();
                            i.isMultiLine() && i.contains(t.row, t.column) ? (this.$clickSelection = n.selection.getLineRange(i.start.row), this.$clickSelection.end = n.selection.getLineRange(i.end.row).end) : this.$clickSelection = n.selection.getLineRange(t.row), this.select();
                        }, this.onQuadClick = function(e) {
                            var t = this.editor;
                            t.selectAll(), this.$clickSelection = t.getSelectionRange(), this.setState("selectAll");
                        }, this.onMouseWheel = function(e) {
                            if (!e.getAccelKey()) {
                                e.getShiftKey() && e.wheelY && !e.wheelX && (e.wheelX = e.wheelY, e.wheelY = 0);
                                var t = this.editor;
                                this.$lastScroll || (this.$lastScroll = {
                                    t: 0,
                                    vx: 0,
                                    vy: 0,
                                    allowed: 0
                                });
                                var n = this.$lastScroll,
                                    i = e.domEvent.timeStamp,
                                    o = i - n.t,
                                    s = o ? e.wheelX / o : n.vx,
                                    a = o ? e.wheelY / o : n.vy;
                                o < r && (s = (s + n.vx) / 2, a = (a + n.vy) / 2);
                                var l = Math.abs(s / a),
                                    c = false;
                                if (l >= 1 && t.renderer.isScrollableBy(e.wheelX * e.speed, 0) && (c = true), l <= 1 && t.renderer.isScrollableBy(0, e.wheelY * e.speed) && (c = true), c) n.allowed = i;
                                else if (i - n.allowed < r) {
                                    var u = Math.abs(s) <= 1.5 * Math.abs(n.vx) && Math.abs(a) <= 1.5 * Math.abs(n.vy);
                                    u ? (c = true, n.allowed = i) : n.allowed = 0;
                                }
                                return n.t = i, n.vx = s, n.vy = a, c ? (t.renderer.scrollBy(e.wheelX * e.speed, e.wheelY * e.speed), e.stop()) : undefined;
                            }
                        };
                    }.call(s.prototype), t.DefaultHandlers = s);
                }), ace.define("ace/tooltip", ["require", "exports", "module", "ace/lib/oop", "ace/lib/dom"], function(e, t, n) {
                    "use strict";
                    e("./lib/oop");
                    var i = e("./lib/dom");

                    function o(e) {
                        this.isOpen = false, this.$element = null, this.$parentNode = e;
                    }
                    (function() {
                        this.$init = function() {
                            return this.$element = i.createElement("div"), this.$element.className = "ace_tooltip", this.$element.style.display = "none", this.$parentNode.appendChild(this.$element), this.$element;
                        }, this.getElement = function() {
                            return this.$element || this.$init();
                        }, this.setText = function(e) {
                            this.getElement().textContent = e;
                        }, this.setHtml = function(e) {
                            this.getElement().innerHTML = e;
                        }, this.setPosition = function(e, t) {
                            this.getElement().style.left = e + "px", this.getElement().style.top = t + "px";
                        }, this.setClassName = function(e) {
                            i.addCssClass(this.getElement(), e);
                        }, this.show = function(e, t, n) {
                            null != e && this.setText(e), null != t && null != n && this.setPosition(t, n), this.isOpen || (this.getElement().style.display = "block", this.isOpen = true);
                        }, this.hide = function() {
                            this.isOpen && (this.getElement().style.display = "none", this.isOpen = false);
                        }, this.getHeight = function() {
                            return this.getElement().offsetHeight;
                        }, this.getWidth = function() {
                            return this.getElement().offsetWidth;
                        }, this.destroy = function() {
                            this.isOpen = false, this.$element && this.$element.parentNode && this.$element.parentNode.removeChild(this.$element);
                        };
                    }.call(o.prototype), t.Tooltip = o);
                }), ace.define("ace/mouse/default_gutter_handler", ["require", "exports", "module", "ace/lib/dom", "ace/lib/oop", "ace/lib/event", "ace/tooltip"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/dom"),
                        o = e("../lib/oop"),
                        r = e("../lib/event"),
                        s = e("../tooltip").Tooltip;

                    function a(e) {
                        var t, n, o, s = e.editor,
                            a = s.renderer.$gutterLayer,
                            c = new l(s.container);

                        function u() {
                            var t = n.getDocumentPosition().row,
                                i = a.$annotations[t];
                            if (!i) return d();
                            var r = s.session.getLength();
                            if (t == r) {
                                var l = s.renderer.pixelToScreenCoordinates(0, n.y).row,
                                    u = n.$pos;
                                if (l > s.session.documentToScreenRow(u.row, u.column)) return d();
                            }
                            if (o != i)
                                if (o = i.text.join("<br/>"), c.setHtml(o), c.show(), s._signal("showGutterTooltip", c), s.on("mousewheel", d), e.$tooltipFollowsMouse) h(n);
                                else {
                                    var f = n.domEvent.target,
                                        p = f.getBoundingClientRect(),
                                        m = c.getElement().style;
                                    m.left = p.right + "px", m.top = p.bottom + "px";
                                }
                        }

                        function d() {
                            t && (t = clearTimeout(t)), o && (c.hide(), o = null, s._signal("hideGutterTooltip", c), s.off("mousewheel", d));
                        }

                        function h(e) {
                            c.setPosition(e.x, e.y);
                        }
                        e.editor.setDefaultHandler("guttermousedown", function(t) {
                            if (s.isFocused() && 0 == t.getButton()) {
                                var n = a.getRegion(t);
                                if ("foldWidgets" != n) {
                                    var i = t.getDocumentPosition().row,
                                        o = s.session.selection;
                                    if (t.getShiftKey()) o.selectTo(i, 0);
                                    else {
                                        if (2 == t.domEvent.detail) return s.selectAll(), t.preventDefault();
                                        e.$clickSelection = s.selection.getLineRange(i);
                                    }
                                    return e.setState("selectByLines"), e.captureMouse(t), t.preventDefault();
                                }
                            }
                        }), e.editor.setDefaultHandler("guttermousemove", function(r) {
                            var s = r.domEvent.target || r.domEvent.srcElement;
                            if (i.hasCssClass(s, "ace_fold-widget")) return d();
                            o && e.$tooltipFollowsMouse && h(r), n = r, t || (t = setTimeout(function() {
                                t = null, n && !e.isMousePressed ? u() : d();
                            }, 50));
                        }), r.addListener(s.renderer.$gutter, "mouseout", function(e) {
                            n = null, o && !t && (t = setTimeout(function() {
                                t = null, d();
                            }, 50));
                        }, s), s.on("changeSession", d);
                    }

                    function l(e) {
                        s.call(this, e);
                    }
                    o.inherits(l, s),
                        function() {
                            this.setPosition = function(e, t) {
                                var n = window.innerWidth || document.documentElement.clientWidth,
                                    i = window.innerHeight || document.documentElement.clientHeight,
                                    o = this.getWidth(),
                                    r = this.getHeight();
                                e += 15, t += 15, e + o > n && (e -= e + o - n), t + r > i && (t -= 20 + r), s.prototype.setPosition.call(this, e, t);
                            };
                        }.call(l.prototype), t.GutterHandler = a;
                }), ace.define("ace/mouse/mouse_event", ["require", "exports", "module", "ace/lib/event", "ace/lib/useragent"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/event"),
                        o = e("../lib/useragent"),
                        r = t.MouseEvent = function(e, t) {
                            this.domEvent = e, this.editor = t, this.x = this.clientX = e.clientX, this.y = this.clientY = e.clientY, this.$pos = null, this.$inSelection = null, this.propagationStopped = false, this.defaultPrevented = false;
                        };
                    (function() {
                        this.stopPropagation = function() {
                            i.stopPropagation(this.domEvent), this.propagationStopped = true;
                        }, this.preventDefault = function() {
                            i.preventDefault(this.domEvent), this.defaultPrevented = true;
                        }, this.stop = function() {
                            this.stopPropagation(), this.preventDefault();
                        }, this.getDocumentPosition = function() {
                            return this.$pos || (this.$pos = this.editor.renderer.screenToTextCoordinates(this.clientX, this.clientY)), this.$pos;
                        }, this.inSelection = function() {
                            if (null !== this.$inSelection) return this.$inSelection;
                            var e = this.editor,
                                t = e.getSelectionRange();
                            if (t.isEmpty()) this.$inSelection = false;
                            else {
                                var n = this.getDocumentPosition();
                                this.$inSelection = t.contains(n.row, n.column);
                            }
                            return this.$inSelection;
                        }, this.getButton = function() {
                            return i.getButton(this.domEvent);
                        }, this.getShiftKey = function() {
                            return this.domEvent.shiftKey;
                        }, this.getAccelKey = o.isMac ? function() {
                            return this.domEvent.metaKey;
                        } : function() {
                            return this.domEvent.ctrlKey;
                        };
                    }.call(r.prototype));
                }), ace.define("ace/mouse/dragdrop_handler", ["require", "exports", "module", "ace/lib/dom", "ace/lib/event", "ace/lib/useragent"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/dom"),
                        o = e("../lib/event"),
                        r = e("../lib/useragent"),
                        s = 200,
                        a = 200,
                        l = 5;

                    function c(e) {
                        var t = e.editor,
                            n = i.createElement("div");
                        n.style.cssText = "top:-100px;position:absolute;z-index:2147483647;opacity:0.5", n.textContent = " ";
                        var c = ["dragWait", "dragWaitEnd", "startDrag", "dragReadyEnd", "onMouseDrag"];
                        c.forEach(function(t) {
                            e[t] = this[t];
                        }, this), t.on("mousedown", this.onMouseDown.bind(e));
                        var d, h, f, p, m, g, v, b, y, w, x, _ = t.container,
                            C = 0;

                        function k(e, n) {
                            var i = Date.now(),
                                o = !n || e.row != n.row,
                                r = !n || e.column != n.column;
                            if (!w || o || r) t.moveCursorToPosition(e), w = i, x = {
                                x: h,
                                y: f
                            };
                            else {
                                var s = Math.sqrt(Math.pow(h - x.x, 2) + Math.pow(f - x.y, 2));
                                s > l ? w = null : i - w >= a && (t.renderer.scrollCursorIntoView(), w = null);
                            }
                        }

                        function S(e, n) {
                            var i = Date.now(),
                                o = t.renderer.layerConfig.lineHeight,
                                r = t.renderer.layerConfig.characterWidth,
                                a = t.renderer.scroller.getBoundingClientRect(),
                                l = {
                                    x: {
                                        left: h - a.left,
                                        right: a.right - h
                                    },
                                    y: {
                                        top: f - a.top,
                                        bottom: a.bottom - f
                                    }
                                },
                                c = Math.min(l.x.left, l.x.right),
                                u = Math.min(l.y.top, l.y.bottom),
                                d = {
                                    row: e.row,
                                    column: e.column
                                };
                            c / r <= 2 && (d.column += l.x.left < l.x.right ? -3 : 2), u / o <= 1 && (d.row += l.y.top < l.y.bottom ? -1 : 1);
                            var p = e.row != d.row,
                                m = e.column != d.column,
                                g = !n || e.row != n.row;
                            p || m && !g ? y ? i - y >= s && t.renderer.scrollCursorIntoView(d) : y = i : y = null;
                        }

                        function O() {
                            var e = g;
                            g = t.renderer.screenToTextCoordinates(h, f), k(g, e), S(g, e);
                        }

                        function E() {
                            m = t.selection.toOrientedRange(), d = t.session.addMarker(m, "ace_selection", t.getSelectionStyle()), t.clearSelection(), t.isFocused() && t.renderer.$cursorLayer.setBlinking(false), clearInterval(p), O(), p = setInterval(O, 20), C = 0, o.addListener(document, "mousemove", T);
                        }

                        function $() {
                            clearInterval(p), t.session.removeMarker(d), d = null, t.selection.fromOrientedRange(m), t.isFocused() && !b && t.$resetCursorStyle(), m = null, g = null, C = 0, y = null, w = null, o.removeListener(document, "mousemove", T);
                        }
                        this.onDragStart = function(e) {
                            if (this.cancelDrag || !_.draggable) {
                                var i = this;
                                return setTimeout(function() {
                                    i.startSelect(), i.captureMouse(e);
                                }, 0), e.preventDefault();
                            }
                            m = t.getSelectionRange();
                            var o = e.dataTransfer;
                            o.effectAllowed = t.getReadOnly() ? "copy" : "copyMove", t.container.appendChild(n), o.setDragImage && o.setDragImage(n, 0, 0), setTimeout(function() {
                                t.container.removeChild(n);
                            }), o.clearData(), o.setData("Text", t.session.getTextRange()), b = true, this.setState("drag");
                        }, this.onDragEnd = function(e) {
                            if (_.draggable = false, b = false, this.setState(null), !t.getReadOnly()) {
                                var n = e.dataTransfer.dropEffect;
                                v || "move" != n || t.session.remove(t.getSelectionRange()), t.$resetCursorStyle();
                            }
                            this.editor.unsetStyle("ace_dragging"), this.editor.renderer.setCursorStyle("");
                        }, this.onDragEnter = function(e) {
                            if (!t.getReadOnly() && L(e.dataTransfer)) return h = e.clientX, f = e.clientY, d || E(), C++, e.dataTransfer.dropEffect = v = A(e), o.preventDefault(e);
                        }, this.onDragOver = function(e) {
                            if (!t.getReadOnly() && L(e.dataTransfer)) return h = e.clientX, f = e.clientY, d || (E(), C++), null !== M && (M = null), e.dataTransfer.dropEffect = v = A(e), o.preventDefault(e);
                        }, this.onDragLeave = function(e) {
                            if (C--, C <= 0 && d) return $(), v = null, o.preventDefault(e);
                        }, this.onDrop = function(e) {
                            if (g) {
                                var n = e.dataTransfer;
                                if (b) switch (v) {
                                    case "move":
                                        m = m.contains(g.row, g.column) ? {
                                            start: g,
                                            end: g
                                        } : t.moveText(m, g);
                                        break;
                                    case "copy":
                                        m = t.moveText(m, g, true);
                                        break;
                                } else {
                                    var i = n.getData("Text");
                                    m = {
                                        start: g,
                                        end: t.session.insert(g, i)
                                    }, t.focus(), v = null;
                                }
                                return $(), o.preventDefault(e);
                            }
                        }, o.addListener(_, "dragstart", this.onDragStart.bind(e), t), o.addListener(_, "dragend", this.onDragEnd.bind(e), t), o.addListener(_, "dragenter", this.onDragEnter.bind(e), t), o.addListener(_, "dragover", this.onDragOver.bind(e), t), o.addListener(_, "dragleave", this.onDragLeave.bind(e), t), o.addListener(_, "drop", this.onDrop.bind(e), t);
                        var M = null;

                        function T() {
                            null == M && (M = setTimeout(function() {
                                null != M && d && $();
                            }, 20));
                        }

                        function L(e) {
                            var t = e.types;
                            return !t || Array.prototype.some.call(t, function(e) {
                                return "text/plain" == e || "Text" == e;
                            });
                        }

                        function A(e) {
                            var t = ["copy", "copymove", "all", "uninitialized"],
                                n = ["move", "copymove", "linkmove", "all", "uninitialized"],
                                i = r.isMac ? e.altKey : e.ctrlKey,
                                o = "uninitialized";
                            try {
                                o = e.dataTransfer.effectAllowed.toLowerCase();
                            } catch (e) {}
                            var s = "none";
                            return i && t.indexOf(o) >= 0 ? s = "copy" : n.indexOf(o) >= 0 ? s = "move" : t.indexOf(o) >= 0 && (s = "copy"), s;
                        }
                    }
                    (function() {
                        this.dragWait = function() {
                            var e = Date.now() - this.mousedownEvent.time;
                            e > this.editor.getDragDelay() && this.startDrag();
                        }, this.dragWaitEnd = function() {
                            var e = this.editor.container;
                            e.draggable = false, this.startSelect(this.mousedownEvent.getDocumentPosition()), this.selectEnd();
                        }, this.dragReadyEnd = function(e) {
                            this.editor.$resetCursorStyle(), this.editor.unsetStyle("ace_dragging"), this.editor.renderer.setCursorStyle(""), this.dragWaitEnd();
                        }, this.startDrag = function() {
                            this.cancelDrag = false;
                            var e = this.editor,
                                t = e.container;
                            t.draggable = true, e.renderer.$cursorLayer.setBlinking(false), e.setStyle("ace_dragging");
                            var n = r.isWin ? "default" : "move";
                            e.renderer.setCursorStyle(n), this.setState("dragReady");
                        }, this.onMouseDrag = function(e) {
                            var t = this.editor.container;
                            if (r.isIE && "dragReady" == this.state) {
                                var n = Math.sqrt(Math.pow(this.x - this.mousedownEvent.x, 2) + Math.pow(this.y - this.mousedownEvent.y, 2));
                                n > 3 && t.dragDrop();
                            }
                            if ("dragWait" === this.state) {
                                n = Math.sqrt(Math.pow(this.x - this.mousedownEvent.x, 2) + Math.pow(this.y - this.mousedownEvent.y, 2));
                                n > 0 && (t.draggable = false, this.startSelect(this.mousedownEvent.getDocumentPosition()));
                            }
                        }, this.onMouseDown = function(e) {
                            if (this.$dragEnabled) {
                                this.mousedownEvent = e;
                                var t = this.editor,
                                    n = e.inSelection(),
                                    i = e.getButton(),
                                    o = e.domEvent.detail || 1;
                                if (1 === o && 0 === i && n) {
                                    if (e.editor.inMultiSelectMode && (e.getAccelKey() || e.getShiftKey())) return;
                                    this.mousedownEvent.time = Date.now();
                                    var s = e.domEvent.target || e.domEvent.srcElement;
                                    if ("unselectable" in s && (s.unselectable = "on"), t.getDragDelay()) {
                                        if (r.isWebKit) {
                                            this.cancelDrag = true;
                                            var a = t.container;
                                            a.draggable = true;
                                        }
                                        this.setState("dragWait");
                                    } else this.startDrag();
                                    this.captureMouse(e, this.onMouseDrag.bind(this)), e.defaultPrevented = true;
                                }
                            }
                        };
                    }.call(c.prototype), t.DragdropHandler = c);
                }), ace.define("ace/mouse/touch_handler", ["require", "exports", "module", "ace/mouse/mouse_event", "ace/lib/event", "ace/lib/dom"], function(e, t, n) {
                    "use strict";
                    var i = e("./mouse_event").MouseEvent,
                        o = e("../lib/event"),
                        r = e("../lib/dom");
                    t.addTouchListeners = function(e, t) {
                        var n, s, a, l, c, u, d, h, f, p = "scroll",
                            m = 0,
                            g = 0,
                            v = 0,
                            b = 0;

                        function y() {
                            var e = window.navigator && window.navigator.clipboard,
                                n = false,
                                i = function() {
                                    var i = t.getCopyText(),
                                        o = t.session.getUndoManager().hasUndo();
                                    f.replaceChild(r.buildDom(n ? ["span", !i && ["span", {
                                            class: "ace_mobile-button",
                                            action: "selectall"
                                        }, "Select All"], i && ["span", {
                                            class: "ace_mobile-button",
                                            action: "copy"
                                        }, "Copy"], i && ["span", {
                                            class: "ace_mobile-button",
                                            action: "cut"
                                        }, "Cut"], e && ["span", {
                                            class: "ace_mobile-button",
                                            action: "paste"
                                        }, "Paste"], o && ["span", {
                                            class: "ace_mobile-button",
                                            action: "undo"
                                        }, "Undo"],
                                        ["span", {
                                            class: "ace_mobile-button",
                                            action: "find"
                                        }, "Find"],
                                        ["span", {
                                            class: "ace_mobile-button",
                                            action: "openCommandPallete"
                                        }, "Pallete"]
                                    ] : ["span"]), f.firstChild);
                                },
                                o = function(o) {
                                    var r = o.target.getAttribute("action");
                                    if ("more" == r || !n) return n = !n, i();
                                    "paste" == r ? e.readText().then(function(e) {
                                        t.execCommand(r, e);
                                    }) : r && ("cut" != r && "copy" != r || (e ? e.writeText(t.getCopyText()) : document.execCommand("copy")), t.execCommand(r)), f.firstChild.style.display = "none", n = false, "openCommandPallete" != r && t.focus();
                                };
                            f = r.buildDom(["div", {
                                    class: "ace_mobile-menu",
                                    ontouchstart: function(e) {
                                        p = "menu", e.stopPropagation(), e.preventDefault(), t.textInput.focus();
                                    },
                                    ontouchend: function(e) {
                                        e.stopPropagation(), e.preventDefault(), o(e);
                                    },
                                    onclick: o
                                },
                                ["span"],
                                ["span", {
                                    class: "ace_mobile-button",
                                    action: "more"
                                }, "..."]
                            ], t.container);
                        }

                        function w() {
                            f || y();
                            var e = t.selection.cursor,
                                n = t.renderer.textToScreenCoordinates(e.row, e.column),
                                i = t.renderer.textToScreenCoordinates(0, 0).pageX,
                                o = t.renderer.scrollLeft,
                                r = t.container.getBoundingClientRect();
                            f.style.top = n.pageY - r.top - 3 + "px", n.pageX - r.left < r.width - 70 ? (f.style.left = "", f.style.right = "10px") : (f.style.right = "", f.style.left = i + o - r.left + "px"), f.style.display = "", f.firstChild.style.display = "none", t.on("input", x);
                        }

                        function x(e) {
                            f && (f.style.display = "none"), t.off("input", x);
                        }

                        function _() {
                            c = null, clearTimeout(c);
                            var e = t.selection.getRange(),
                                n = e.contains(d.row, d.column);
                            !e.isEmpty() && n || (t.selection.moveToPosition(d), t.selection.selectWord()), p = "wait", w();
                        }

                        function C() {
                            c = null, clearTimeout(c), t.selection.moveToPosition(d);
                            var e = g >= 2 ? t.selection.getLineRange(d.row) : t.session.getBracketRange(d);
                            e && !e.isEmpty() ? t.selection.setRange(e) : t.selection.selectWord(), p = "wait";
                        }

                        function k() {
                            m += 60, u = setInterval(function() {
                                m-- <= 0 && (clearInterval(u), u = null), Math.abs(v) < 0.01 && (v = 0), Math.abs(b) < 0.01 && (b = 0), m < 20 && (v *= 0.9), m < 20 && (b *= 0.9);
                                var e = t.session.getScrollTop();
                                t.renderer.scrollBy(10 * v, 10 * b), e == t.session.getScrollTop() && (m = 0);
                            }, 10);
                        }
                        o.addListener(e, "contextmenu", function(e) {
                            if (h) {
                                var n = t.textInput.getElement();
                                n.focus();
                            }
                        }, t), o.addListener(e, "touchstart", function(e) {
                            var o = e.touches;
                            if (c || o.length > 1) return clearTimeout(c), c = null, a = -1, void(p = "zoom");
                            h = t.$mouseHandler.isMousePressed = true;
                            var r = t.renderer.layerConfig.lineHeight,
                                u = t.renderer.layerConfig.lineHeight,
                                f = e.timeStamp;
                            l = f;
                            var y = o[0],
                                w = y.clientX,
                                x = y.clientY;
                            Math.abs(n - w) + Math.abs(s - x) > r && (a = -1), n = e.clientX = w, s = e.clientY = x, v = b = 0;
                            var k = new i(e, t);
                            if (d = k.getDocumentPosition(), f - a < 500 && 1 == o.length && !m) g++, e.preventDefault(), e.button = 0, C();
                            else {
                                g = 0;
                                var S = t.selection.cursor,
                                    O = t.selection.isEmpty() ? S : t.selection.anchor,
                                    E = t.renderer.$cursorLayer.getPixelPosition(S, true),
                                    $ = t.renderer.$cursorLayer.getPixelPosition(O, true),
                                    M = t.renderer.scroller.getBoundingClientRect(),
                                    T = t.renderer.layerConfig.offset,
                                    L = t.renderer.scrollLeft;
                                if (e.clientX < M.left) return void(p = "zoom");
                                var D = (e.clientX - M.left - E.left + L /= u, e.clientY - M.top - E.top + T = (e.clientY - M.top - E.top + T) / r - 0.75, (e.clientX - M.left - E.left + L) * (e.clientX - M.left - E.left + L) + (e.clientY - M.top - E.top + T) * (e.clientY - M.top - E.top + T)),
                                    F = (e.clientX - M.left - $.left + L /= u, e.clientY - M.top - $.top + T = (e.clientY - M.top - $.top + T) / r - 0.75, (e.clientX - M.left - $.left + L) * (e.clientX - M.left - $.left + L) + (e.clientY - M.top - $.top + T) * (e.clientY - M.top - $.top + T));
                                D < 3.5 && F < 3.5 && (p = D > F ? "cursor" : "anchor"), p = F < 3.5 ? "anchor" : D < 3.5 ? "cursor" : "scroll", c = setTimeout(_, 450);
                            }
                            a = f;
                        }, t), o.addListener(e, "touchend", function(e) {
                            h = t.$mouseHandler.isMousePressed = false, u && clearInterval(u), "zoom" == p ? (p = "", m = 0) : c ? (t.selection.moveToPosition(d), m = 0, w()) : "scroll" == p ? (k(), x()) : w(), clearTimeout(c), c = null;
                        }, t), o.addListener(e, "touchmove", function(e) {
                            c && (clearTimeout(c), c = null);
                            var o = e.touches;
                            if (!(o.length > 1 || "zoom" == p)) {
                                var r = o[0],
                                    a = n - r.clientX,
                                    u = s - r.clientY;
                                if ("wait" == p) {
                                    if (!(a * a + u * u > 4)) return e.preventDefault();
                                    p = "cursor";
                                }
                                n = r.clientX, s = r.clientY, e.clientX = r.clientX, e.clientY = r.clientY;
                                var d = e.timeStamp,
                                    h = d - l;
                                if (l = d, "scroll" == p) {
                                    var f = new i(e, t);
                                    f.speed = 1, f.wheelX = a, f.wheelY = u, 10 * Math.abs(a) < Math.abs(u) && (a = 0), 10 * Math.abs(u) < Math.abs(a) && (u = 0), 0 != h && (v = a / h, b = u / h), t._emit("mousewheel", f), f.propagationStopped || (v = b = 0);
                                } else {
                                    var m = new i(e, t),
                                        g = m.getDocumentPosition();
                                    "cursor" == p ? t.selection.moveCursorToPosition(g) : "anchor" == p && t.selection.setSelectionAnchor(g.row, g.column), t.renderer.scrollCursorIntoView(g), e.preventDefault();
                                }
                            }
                        }, t);
                    };
                }), ace.define("ace/lib/net", ["require", "exports", "module", "ace/lib/dom"], function(e, t, n) {
                    "use strict";
                    var i = e("./dom");
                    t.get = function(e, t) {
                        var n = new XMLHttpRequest;
                        n.open("GET", e, true), n.onreadystatechange = function() {
                            4 === n.readyState && t(n.responseText);
                        }, n.send(null);
                    }, t.loadScript = function(e, t) {
                        var n = i.getDocumentHead(),
                            o = document.createElement("script");
                        o.src = e, n.appendChild(o), o.onload = o.onreadystatechange = function(e, n) {
                            !n && o.readyState && "loaded" != o.readyState && "complete" != o.readyState || (o = o.onload = o.onreadystatechange = null, n || t());
                        };
                    }, t.qualifyURL = function(e) {
                        var t = document.createElement("a");
                        return t.href = e, t.href;
                    };
                }), ace.define("ace/lib/event_emitter", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    var i = {},
                        o = function() {
                            this.propagationStopped = true;
                        },
                        r = function() {
                            this.defaultPrevented = true;
                        };
                    i._emit = i._dispatchEvent = function(e, t) {
                        this._eventRegistry || (this._eventRegistry = {}), this._defaultHandlers || (this._defaultHandlers = {});
                        var n = this._eventRegistry[e] || [],
                            i = this._defaultHandlers[e];
                        if (n.length || i) {
                            "object" == typeof t && t || (t = {}), t.type || (t.type = e), t.stopPropagation || (t.stopPropagation = o), t.preventDefault || (t.preventDefault = r), n = n.slice();
                            for (var s = 0; s < n.length; s++)
                                if (n[s](t, this), t.propagationStopped) break;
                            return i && !t.defaultPrevented ? i(t, this) : undefined;
                        }
                    }, i._signal = function(e, t) {
                        var n = (this._eventRegistry || {})[e];
                        if (n) {
                            n = n.slice();
                            for (var i = 0; i < n.length; i++) n[i](t, this);
                        }
                    }, i.once = function(e, t) {
                        var n = this;
                        if (this.on(e, function i() {
                                n.off(e, i), t.apply(null, arguments);
                            }), !t) return new Promise(function(e) {
                            t = e;
                        });
                    }, i.setDefaultHandler = function(e, t) {
                        var n = this._defaultHandlers;
                        if (n || (n = this._defaultHandlers = {
                                _disabled_: {}
                            }), n[e]) {
                            var i = n[e],
                                o = n._disabled_[e];
                            o || (n._disabled_[e] = o = []), o.push(i);
                            var r = o.indexOf(t); -
                            1 != r && o.splice(r, 1);
                        }
                        n[e] = t;
                    }, i.removeDefaultHandler = function(e, t) {
                        var n = this._defaultHandlers;
                        if (n) {
                            var i = n._disabled_[e];
                            if (n[e] == t) i && this.setDefaultHandler(e, i.pop());
                            else if (i) {
                                var o = i.indexOf(t); -
                                1 != o && i.splice(o, 1);
                            }
                        }
                    }, i.on = i.addEventListener = function(e, t, n) {
                        this._eventRegistry = this._eventRegistry || {};
                        var i = this._eventRegistry[e];
                        return i || (i = this._eventRegistry[e] = []), -1 == i.indexOf(t) && i[n ? "unshift" : "push"](t), t;
                    }, i.off = i.removeListener = i.removeEventListener = function(e, t) {
                        this._eventRegistry = this._eventRegistry || {};
                        var n = this._eventRegistry[e];
                        if (n) {
                            var i = n.indexOf(t); -
                            1 !== i && n.splice(i, 1);
                        }
                    }, i.removeAllListeners = function(e) {
                        e || (this._eventRegistry = this._defaultHandlers = undefined), this._eventRegistry && (this._eventRegistry[e] = undefined), this._defaultHandlers && (this._defaultHandlers[e] = undefined);
                    }, t.EventEmitter = i;
                }), ace.define("ace/lib/app_config", ["require", "exports", "module", "ace/lib/oop", "ace/lib/event_emitter"], function(e, t, n) {
                    var i = e("./oop"),
                        o = e("./event_emitter").EventEmitter,
                        r = {
                            setOptions: function(e) {
                                Object.keys(e).forEach(function(t) {
                                    this.setOption(t, e[t]);
                                }, this);
                            },
                            getOptions: function(e) {
                                var t = {};
                                if (e) Array.isArray(e) || (t = e, e = Object.keys(t));
                                else {
                                    var n = this.$options;
                                    e = Object.keys(n).filter(function(e) {
                                        return !n[e].hidden;
                                    });
                                }
                                return e.forEach(function(e) {
                                    t[e] = this.getOption(e);
                                }, this), t;
                            },
                            setOption: function(e, t) {
                                if (this["$" + e] !== t) {
                                    var n = this.$options[e];
                                    if (!n) return s('misspelled option "' + e + '"');
                                    if (n.forwardTo) return this[n.forwardTo] && this[n.forwardTo].setOption(e, t);
                                    n.handlesSet || (this["$" + e] = t), n && n.set && n.set.call(this, t);
                                }
                            },
                            getOption: function(e) {
                                var t = this.$options[e];
                                return t ? t.forwardTo ? this[t.forwardTo] && this[t.forwardTo].getOption(e) : t && t.get ? t.get.call(this) : this["$" + e] : s('misspelled option "' + e + '"');
                            }
                        };

                    function s(e) {
                        "undefined" != typeof console && console.warn && console.warn.apply(console, arguments);
                    }

                    function a(e, t) {
                        var n = new Error(e);
                        n.data = t, "object" == typeof console && console.error && console.error(n), setTimeout(function() {
                            throw n;
                        });
                    }
                    var l = function() {
                        this.$defaultOptions = {};
                    };
                    (function() {
                        i.implement(this, o), this.defineOptions = function(e, t, n) {
                            return e.$options || (this.$defaultOptions[t] = e.$options = {}), Object.keys(n).forEach(function(t) {
                                var i = n[t];
                                "string" == typeof i && (i = {
                                    forwardTo: i
                                }), i.name || (i.name = t), e.$options[i.name] = i, "initialValue" in i && (e["$" + i.name] = i.initialValue);
                            }), i.implement(e, r), this;
                        }, this.resetOptions = function(e) {
                            Object.keys(e.$options).forEach(function(t) {
                                var n = e.$options[t];
                                "value" in n && e.setOption(t, n.value);
                            });
                        }, this.setDefaultValue = function(e, t, n) {
                            if (!e) {
                                for (e in this.$defaultOptions)
                                    if (this.$defaultOptions[e][t]) break;
                                if (!this.$defaultOptions[e][t]) return false;
                            }
                            var i = this.$defaultOptions[e] || (this.$defaultOptions[e] = {});
                            i[t] && (i.forwardTo ? this.setDefaultValue(i.forwardTo, t, n) : i[t].value = n);
                        }, this.setDefaultValues = function(e, t) {
                            Object.keys(t).forEach(function(n) {
                                this.setDefaultValue(e, n, t[n]);
                            }, this);
                        }, this.warn = s, this.reportError = a;
                    }.call(l.prototype), t.AppConfig = l);
                }), ace.define("ace/config", ["require", "exports", "module", "ace/lib/lang", "ace/lib/oop", "ace/lib/net", "ace/lib/dom", "ace/lib/app_config"], function(e, t, i) {
                    var o = e("./lib/lang"),
                        r = (e("./lib/oop"), e("./lib/net")),
                        s = e("./lib/dom"),
                        a = e("./lib/app_config").AppConfig;
                    i.exports = t = new a;
                    var l = function() {
                            return this || "undefined" != typeof window && window;
                        }(),
                        c = {
                            packaged: false,
                            workerPath: null,
                            modePath: null,
                            themePath: null,
                            basePath: "",
                            suffix: ".js",
                            $moduleUrls: {},
                            loadWorkerFromBlob: true,
                            sharedPopups: false,
                            useStrictCSP: null
                        };
                    t.get = function(e) {
                        if (!c.hasOwnProperty(e)) throw new Error("Unknown config key: " + e);
                        return c[e];
                    }, t.set = function(e, t) {
                        if (c.hasOwnProperty(e)) c[e] = t;
                        else if (0 == this.setDefaultValue("", e, t)) throw new Error("Unknown config key: " + e);
                        "useStrictCSP" == e && s.useStrictCSP(t);
                    }, t.all = function() {
                        return o.copyObject(c);
                    }, t.$modes = {}, t.moduleUrl = function(e, t) {
                        if (c.$moduleUrls[e]) return c.$moduleUrls[e];
                        var n = e.split("/");
                        t = t || n[n.length - 2] || "";
                        var i = "snippets" == t ? "/" : "-",
                            o = n[n.length - 1];
                        if ("worker" == t && "-" == i) {
                            var r = new RegExp("^" + t + "[\\-_]|[\\-_]" + t + "$", "g");
                            o = o.replace(r, "");
                        }
                        (!o || o == t) && n.length > 1 && (o = n[n.length - 2]);
                        var s = c[t + "Path"];
                        return null == s ? s = c.basePath : "/" == i && (t = i = ""), s && "/" != s.slice(-1) && (s += "/"), s + t + i + o + this.get("suffix");
                    }, t.setModuleUrl = function(e, t) {
                        return c.$moduleUrls[e] = t;
                    }, t.$loading = {}, t.loadModule = function(n, i) {
                        var o, s;
                        Array.isArray(n) && (s = n[0], n = n[1]);
                        try {
                            o = e(n);
                        } catch (l) {}
                        if (o && !t.$loading[n]) return i && i(o);
                        if (t.$loading[n] || (t.$loading[n] = []), t.$loading[n].push(i), !(t.$loading[n].length > 1)) {
                            var a = function() {
                                e([n], function(e) {
                                    t._emit("load.module", {
                                        name: n,
                                        module: e
                                    });
                                    var i = t.$loading[n];
                                    t.$loading[n] = null, i.forEach(function(t) {
                                        t && t(e);
                                    });
                                });
                            };
                            if (!t.get("packaged")) return a();
                            r.loadScript(t.moduleUrl(n, s), a), u();
                        }
                    };
                    var u = function() {
                        c.basePath || c.workerPath || c.modePath || c.themePath || Object.keys(c.$moduleUrls).length || (console.error("Unable to infer path to ace from script src,", "use ace.config.set('basePath', 'path') to enable dynamic loading of modes and themes", "or with webpack use ace/webpack-resolver"), u = function() {});
                    };

                    function d(o) {
                        if (l && l.document) {
                            c.packaged = o || e.packaged || i.packaged || l.define && n("07d6").packaged;
                            for (var r = {}, s = "", a = document.currentScript || document._currentScript, u = a && a.ownerDocument || document, d = u.getElementsByTagName("script"), f = 0; f < d.length; f++) {
                                var p = d[f],
                                    m = p.src || p.getAttribute("src");
                                if (m) {
                                    for (var g = p.attributes, v = 0, b = g.length; v < b; v++) {
                                        var y = g[v];
                                        0 === y.name.indexOf("data-ace-") && (r[h(y.name.replace(/^data-ace-/, ""))] = y.value);
                                    }
                                    var w = m.match(/^(.*)\/ace(\-\w+)?\.js(\?|$)/);
                                    w && (s = w[1]);
                                }
                            }
                            for (var x in s && (r.base = r.base || s, r.packaged = true), r.basePath = r.base, r.workerPath = r.workerPath || r.base, r.modePath = r.modePath || r.base, r.themePath = r.themePath || r.base, delete r.base, r) "undefined" !== typeof r[x] && t.set(x, r[x]);
                        }
                    }

                    function h(e) {
                        return e.replace(/-(.)/g, function(e, t) {
                            return t.toUpperCase();
                        });
                    }
                    d(true), t.init = d, t.version = "1.4.13";
                }), ace.define("ace/mouse/mouse_handler", ["require", "exports", "module", "ace/lib/event", "ace/lib/useragent", "ace/mouse/default_handlers", "ace/mouse/default_gutter_handler", "ace/mouse/mouse_event", "ace/mouse/dragdrop_handler", "ace/mouse/touch_handler", "ace/config"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/event"),
                        o = e("../lib/useragent"),
                        r = e("./default_handlers").DefaultHandlers,
                        s = e("./default_gutter_handler").GutterHandler,
                        a = e("./mouse_event").MouseEvent,
                        l = e("./dragdrop_handler").DragdropHandler,
                        c = e("./touch_handler").addTouchListeners,
                        u = e("../config"),
                        d = function(e) {
                            var t = this;
                            this.editor = e, new r(this), new s(this), new l(this);
                            var n = function(t) {
                                    var n = !document.hasFocus || !document.hasFocus() || !e.isFocused() && document.activeElement == (e.textInput && e.textInput.getElement());
                                    n && window.focus(), e.focus();
                                },
                                a = e.renderer.getMouseEventTarget();
                            i.addListener(a, "click", this.onMouseEvent.bind(this, "click"), e), i.addListener(a, "mousemove", this.onMouseMove.bind(this, "mousemove"), e), i.addMultiMouseDownListener([a, e.renderer.scrollBarV && e.renderer.scrollBarV.inner, e.renderer.scrollBarH && e.renderer.scrollBarH.inner, e.textInput && e.textInput.getElement()].filter(Boolean), [400, 300, 250], this, "onMouseEvent", e), i.addMouseWheelListener(e.container, this.onMouseWheel.bind(this, "mousewheel"), e), c(e.container, e);
                            var u = e.renderer.$gutter;
                            i.addListener(u, "mousedown", this.onMouseEvent.bind(this, "guttermousedown"), e), i.addListener(u, "click", this.onMouseEvent.bind(this, "gutterclick"), e), i.addListener(u, "dblclick", this.onMouseEvent.bind(this, "gutterdblclick"), e), i.addListener(u, "mousemove", this.onMouseEvent.bind(this, "guttermousemove"), e), i.addListener(a, "mousedown", n, e), i.addListener(u, "mousedown", n, e), o.isIE && e.renderer.scrollBarV && (i.addListener(e.renderer.scrollBarV.element, "mousedown", n, e), i.addListener(e.renderer.scrollBarH.element, "mousedown", n, e)), e.on("mousemove", function(n) {
                                if (!t.state && !t.$dragDelay && t.$dragEnabled) {
                                    var i = e.renderer.screenToTextCoordinates(n.x, n.y),
                                        o = e.session.selection.getRange(),
                                        r = e.renderer;
                                    !o.isEmpty() && o.insideStart(i.row, i.column) ? r.setCursorStyle("default") : r.setCursorStyle("");
                                }
                            }, e);
                        };
                    (function() {
                        this.onMouseEvent = function(e, t) {
                            this.editor.session && this.editor._emit(e, new a(t, this.editor));
                        }, this.onMouseMove = function(e, t) {
                            var n = this.editor._eventRegistry && this.editor._eventRegistry.mousemove;
                            n && n.length && this.editor._emit(e, new a(t, this.editor));
                        }, this.onMouseWheel = function(e, t) {
                            var n = new a(t, this.editor);
                            n.speed = 2 * this.$scrollSpeed, n.wheelX = t.wheelX, n.wheelY = t.wheelY, this.editor._emit(e, n);
                        }, this.setState = function(e) {
                            this.state = e;
                        }, this.captureMouse = function(e, t) {
                            this.x = e.x, this.y = e.y, this.isMousePressed = true;
                            var n = this.editor,
                                r = this.editor.renderer;
                            r.$isMousePressed = true;
                            var s = this,
                                l = function(e) {
                                    if (e) {
                                        if (o.isWebKit && !e.which && s.releaseMouse) return s.releaseMouse();
                                        s.x = e.clientX, s.y = e.clientY, t && t(e), s.mouseEvent = new a(e, s.editor), s.$mouseMoved = true;
                                    }
                                },
                                c = function(e) {
                                    n.off("beforeEndOperation", d), clearInterval(h), n.session && u(), s[s.state + "End"] && s[s.state + "End"](e), s.state = "", s.isMousePressed = r.$isMousePressed = false, r.$keepTextAreaAtCursor && r.$moveTextAreaToCursor(), s.$onCaptureMouseMove = s.releaseMouse = null, e && s.onMouseEvent("mouseup", e), n.endOperation();
                                },
                                u = function() {
                                    s[s.state] && s[s.state](), s.$mouseMoved = false;
                                };
                            if (o.isOldIE && "dblclick" == e.domEvent.type) return setTimeout(function() {
                                c(e);
                            });
                            var d = function(e) {
                                s.releaseMouse && n.curOp.command.name && n.curOp.selectionChanged && (s[s.state + "End"] && s[s.state + "End"](), s.state = "", s.releaseMouse());
                            };
                            n.on("beforeEndOperation", d), n.startOperation({
                                command: {
                                    name: "mouse"
                                }
                            }), s.$onCaptureMouseMove = l, s.releaseMouse = i.capture(this.editor.container, l, c);
                            var h = setInterval(u, 20);
                        }, this.releaseMouse = null, this.cancelContextMenu = function() {
                            var e = function(t) {
                                t && t.domEvent && "contextmenu" != t.domEvent.type || (this.editor.off("nativecontextmenu", e), t && t.domEvent && i.stopEvent(t.domEvent));
                            }.bind(this);
                            setTimeout(e, 10), this.editor.on("nativecontextmenu", e);
                        }, this.destroy = function() {
                            this.releaseMouse && this.releaseMouse();
                        };
                    }.call(d.prototype), u.defineOptions(d.prototype, "mouseHandler", {
                        scrollSpeed: {
                            initialValue: 2
                        },
                        dragDelay: {
                            initialValue: o.isMac ? 150 : 0
                        },
                        dragEnabled: {
                            initialValue: true
                        },
                        focusTimeout: {
                            initialValue: 0
                        },
                        tooltipFollowsMouse: {
                            initialValue: true
                        }
                    }), t.MouseHandler = d);
                }), ace.define("ace/mouse/fold_handler", ["require", "exports", "module", "ace/lib/dom"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/dom");

                    function o(e) {
                        e.on("click", function(t) {
                            var n = t.getDocumentPosition(),
                                o = e.session,
                                r = o.getFoldAt(n.row, n.column, 1);
                            r && (t.getAccelKey() ? o.removeFold(r) : o.expandFold(r), t.stop());
                            var s = t.domEvent && t.domEvent.target;
                            s && i.hasCssClass(s, "ace_inline_button") && i.hasCssClass(s, "ace_toggle_wrap") && (o.setOption("wrap", !o.getUseWrapMode()), e.renderer.scrollCursorIntoView());
                        }), e.on("gutterclick", function(t) {
                            var n = e.renderer.$gutterLayer.getRegion(t);
                            if ("foldWidgets" == n) {
                                var i = t.getDocumentPosition().row,
                                    o = e.session;
                                o.foldWidgets && o.foldWidgets[i] && e.session.onFoldWidgetClick(i, t), e.isFocused() || e.focus(), t.stop();
                            }
                        }), e.on("gutterdblclick", function(t) {
                            var n = e.renderer.$gutterLayer.getRegion(t);
                            if ("foldWidgets" == n) {
                                var i = t.getDocumentPosition().row,
                                    o = e.session,
                                    r = o.getParentFoldRangeData(i, true),
                                    s = r.range || r.firstRange;
                                if (s) {
                                    i = s.start.row;
                                    var a = o.getFoldAt(i, o.getLine(i).length, 1);
                                    a ? o.removeFold(a) : (o.addFold("...", s), e.renderer.scrollCursorIntoView({
                                        row: s.start.row,
                                        column: 0
                                    }));
                                }
                                t.stop();
                            }
                        });
                    }
                    t.FoldHandler = o;
                }), ace.define("ace/keyboard/keybinding", ["require", "exports", "module", "ace/lib/keys", "ace/lib/event"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/keys"),
                        o = e("../lib/event"),
                        r = function(e) {
                            this.$editor = e, this.$data = {
                                editor: e
                            }, this.$handlers = [], this.setDefaultHandler(e.commands);
                        };
                    (function() {
                        this.setDefaultHandler = function(e) {
                            this.removeKeyboardHandler(this.$defaultHandler), this.$defaultHandler = e, this.addKeyboardHandler(e, 0);
                        }, this.setKeyboardHandler = function(e) {
                            var t = this.$handlers;
                            if (t[t.length - 1] != e) {
                                while (t[t.length - 1] && t[t.length - 1] != this.$defaultHandler) this.removeKeyboardHandler(t[t.length - 1]);
                                this.addKeyboardHandler(e, 1);
                            }
                        }, this.addKeyboardHandler = function(e, t) {
                            if (e) {
                                "function" != typeof e || e.handleKeyboard || (e.handleKeyboard = e);
                                var n = this.$handlers.indexOf(e); -
                                1 != n && this.$handlers.splice(n, 1), undefined == t ? this.$handlers.push(e) : this.$handlers.splice(t, 0, e), -1 == n && e.attach && e.attach(this.$editor);
                            }
                        }, this.removeKeyboardHandler = function(e) {
                            var t = this.$handlers.indexOf(e);
                            return -1 != t && (this.$handlers.splice(t, 1), e.detach && e.detach(this.$editor), true);
                        }, this.getKeyboardHandler = function() {
                            return this.$handlers[this.$handlers.length - 1];
                        }, this.getStatusText = function() {
                            var e = this.$data,
                                t = e.editor;
                            return this.$handlers.map(function(n) {
                                return n.getStatusText && n.getStatusText(t, e) || "";
                            }).filter(Boolean).join(" ");
                        }, this.$callKeyboardHandlers = function(e, t, n, i) {
                            for (var r, s = false, a = this.$editor.commands, l = this.$handlers.length; l--;)
                                if (r = this.$handlers[l].handleKeyboard(this.$data, e, t, n, i), r && r.command && (s = "null" == r.command || a.exec(r.command, this.$editor, r.args, i), s && i && -1 != e && 1 != r.passEvent && 1 != r.command.passEvent && o.stopEvent(i), s)) break;
                            return s || -1 != e || (r = {
                                command: "insertstring"
                            }, s = a.exec("insertstring", this.$editor, t)), s && this.$editor._signal && this.$editor._signal("keyboardActivity", r), s;
                        }, this.onCommandKey = function(e, t, n) {
                            var o = i.keyCodeToString(n);
                            return this.$callKeyboardHandlers(t, o, n, e);
                        }, this.onTextInput = function(e) {
                            return this.$callKeyboardHandlers(-1, e);
                        };
                    }.call(r.prototype), t.KeyBinding = r);
                }), ace.define("ace/lib/bidiutil", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    var i = 0,
                        o = 0,
                        r = false,
                        s = false,
                        a = false,
                        l = [
                            [0, 3, 0, 1, 0, 0, 0],
                            [0, 3, 0, 1, 2, 2, 0],
                            [0, 3, 0, 17, 2, 0, 1],
                            [0, 3, 5, 5, 4, 1, 0],
                            [0, 3, 21, 21, 4, 0, 1],
                            [0, 3, 5, 5, 4, 2, 0]
                        ],
                        c = [
                            [2, 0, 1, 1, 0, 1, 0],
                            [2, 0, 1, 1, 0, 2, 0],
                            [2, 0, 2, 1, 3, 2, 0],
                            [2, 0, 2, 33, 3, 1, 1]
                        ],
                        u = 0,
                        d = 1,
                        h = 0,
                        f = 1,
                        p = 2,
                        m = 3,
                        g = 4,
                        v = 5,
                        b = 6,
                        y = 7,
                        w = 8,
                        x = 9,
                        _ = 10,
                        C = 11,
                        k = 12,
                        S = 13,
                        O = 14,
                        E = 15,
                        $ = 16,
                        M = 17,
                        T = 18,
                        L = [T, T, T, T, T, T, T, T, T, b, v, b, w, v, T, T, T, T, T, T, T, T, T, T, T, T, T, T, v, v, v, b, w, g, g, C, C, C, g, g, g, g, g, _, x, _, x, x, p, p, p, p, p, p, p, p, p, p, x, g, g, g, g, g, g, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, g, g, g, g, g, g, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, h, g, g, g, g, T, T, T, T, T, T, v, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, x, g, C, C, C, C, g, g, g, g, h, g, g, T, g, g, C, C, p, p, g, h, g, g, g, p, h, g, g, g, g, g],
                        A = [w, w, w, w, w, w, w, w, w, w, w, T, T, T, h, f, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, w, v, S, O, E, $, M, x, C, C, C, C, C, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, x, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, w];

                    function D(e, t, n, u) {
                        var d = i ? c : l,
                            h = null,
                            f = null,
                            p = null,
                            m = 0,
                            g = null,
                            y = null,
                            x = -1,
                            _ = null,
                            C = null,
                            k = [];
                        if (!u)
                            for (_ = 0, u = []; _ < n; _++) u[_] = j(e[_]);
                        for (o = i, r = false, false, s = false, a = false, C = 0; C < n; C++) {
                            if (h = m, k[C] = f = R(e, u, k, C), m = d[h][f], g = 240 & m, m &= 15, t[C] = p = d[m][5], g > 0)
                                if (16 == g) {
                                    for (_ = x; _ < C; _++) t[_] = 1;
                                    x = -1;
                                } else x = -1;
                            if (y = d[m][6], y) - 1 == x && (x = C);
                            else if (x > -1) {
                                for (_ = x; _ < C; _++) t[_] = p;
                                x = -1;
                            }
                            u[C] == v && (t[C] = 0), o |= p;
                        }
                        if (a)
                            for (_ = 0; _ < n; _++)
                                if (u[_] == b) {
                                    t[_] = i;
                                    for (var S = _ - 1; S >= 0; S--) {
                                        if (u[S] != w) break;
                                        t[S] = i;
                                    }
                                }
                    }

                    function F(e, t, n) {
                        if (!(o < e))
                            if (1 != e || i != d || s) {
                                var r, a, l, c, u = n.length,
                                    h = 0;
                                while (h < u) {
                                    if (t[h] >= e) {
                                        r = h + 1;
                                        while (r < u && t[r] >= e) r++;
                                        for (a = h, l = r - 1; a < l; a++, l--) c = n[a], n[a] = n[l], n[l] = c;
                                        h = r;
                                    }
                                    h++;
                                }
                            } else n.reverse();
                    }

                    function R(e, t, n, o) {
                        var l, c, u, d, L = t[o];
                        switch (L) {
                            case h:
                            case f:
                                r = false;
                            case g:
                            case m:
                                return L;
                            case p:
                                return r ? m : p;
                            case y:
                                return r = true, true, f;
                            case w:
                                return g;
                            case x:
                                return o < 1 || o + 1 >= t.length || (l = n[o - 1]) != p && l != m || (c = t[o + 1]) != p && c != m ? g : (r && (c = m), c == l ? c : g);
                            case _:
                                return l = o > 0 ? n[o - 1] : v, l == p && o + 1 < t.length && t[o + 1] == p ? p : g;
                            case C:
                                if (o > 0 && n[o - 1] == p) return p;
                                if (r) return g;
                                d = o + 1, u = t.length;
                                while (d < u && t[d] == C) d++;
                                return d < u && t[d] == p ? p : g;
                            case k:
                                u = t.length, d = o + 1;
                                while (d < u && t[d] == k) d++;
                                if (d < u) {
                                    var A = e[o],
                                        D = A >= 1425 && A <= 2303 || 64286 == A;
                                    if (l = t[d], D && (l == f || l == y)) return f;
                                }
                                return o < 1 || (l = t[o - 1]) == v ? g : n[o - 1];
                            case v:
                                return r = false, s = true, i;
                            case b:
                                return a = true, g;
                            case S:
                            case O:
                            case $:
                            case M:
                            case E:
                                r = false;
                            case T:
                                return g;
                        }
                    }

                    function j(e) {
                        var t = e.charCodeAt(0),
                            n = t >> 8;
                        return 0 == n ? t > 191 ? h : L[t] : 5 == n ? /[\u0591-\u05f4]/.test(e) ? f : h : 6 == n ? /[\u0610-\u061a\u064b-\u065f\u06d6-\u06e4\u06e7-\u06ed]/.test(e) ? k : /[\u0660-\u0669\u066b-\u066c]/.test(e) ? m : 1642 == t ? C : /[\u06f0-\u06f9]/.test(e) ? p : y : 32 == n && t <= 8287 ? A[255 & t] : 254 == n && t >= 65136 ? y : g;
                    }
                    t.L = h, t.R = f, t.EN = p, t.ON_R = 3, t.AN = 4, t.R_H = 5, t.B = 6, t.RLE = 7, t.DOT = "·", t.doBidiReorder = function(e, n, o) {
                        if (e.length < 2) return {};
                        var r = e.split(""),
                            s = new Array(r.length),
                            a = new Array(r.length),
                            l = [];
                        i = o ? d : u, D(r, l, r.length, n);
                        for (var c = 0; c < s.length; s[c] = c, c++);
                        F(2, l, s), F(1, l, s);
                        for (c = 0; c < s.length - 1; c++) n[c] === m ? l[c] = t.AN : l[c] === f && (n[c] > y && n[c] < S || n[c] === g || n[c] === T) ? l[c] = t.ON_R : c > 0 && "ل" === r[c - 1] && /\u0622|\u0623|\u0625|\u0627/.test(r[c]) && (l[c - 1] = l[c] = t.R_H, c++);
                        r[r.length - 1] === t.DOT && (l[r.length - 1] = t.B), "‫" === r[0] && (l[0] = t.RLE);
                        for (c = 0; c < s.length; c++) a[c] = l[s[c]];
                        return {
                            logicalFromVisual: s,
                            bidiLevels: a
                        };
                    }, t.hasBidiCharacters = function(e, t) {
                        for (var n = false, i = 0; i < e.length; i++) t[i] = j(e.charAt(i)), n || t[i] != f && t[i] != y && t[i] != m || (n = true);
                        return n;
                    }, t.getVisualFromLogicalIdx = function(e, t) {
                        for (var n = 0; n < t.logicalFromVisual.length; n++)
                            if (t.logicalFromVisual[n] == e) return n;
                        return 0;
                    };
                }), ace.define("ace/bidihandler", ["require", "exports", "module", "ace/lib/bidiutil", "ace/lib/lang"], function(e, t, n) {
                    "use strict";
                    var i = e("./lib/bidiutil"),
                        o = e("./lib/lang"),
                        r = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\u202B]/,
                        s = function(e) {
                            this.session = e, this.bidiMap = {}, this.currentRow = null, this.bidiUtil = i, this.charWidths = [], this.EOL = "¬", this.showInvisibles = true, this.isRtlDir = false, this.$isRtl = false, this.line = "", this.wrapIndent = 0, this.EOF = "¶", this.RLE = "‫", this.contentWidth = 0, this.fontMetrics = null, this.rtlLineOffset = 0, this.wrapOffset = 0, this.isMoveLeftOperation = false, this.seenBidi = r.test(e.getValue());
                        };
                    (function() {
                        this.isBidiRow = function(e, t, n) {
                            return !!this.seenBidi && (e !== this.currentRow && (this.currentRow = e, this.updateRowLine(t, n), this.updateBidiMap()), this.bidiMap.bidiLevels);
                        }, this.onChange = function(e) {
                            this.seenBidi ? this.currentRow = null : "insert" == e.action && r.test(e.lines.join("\n")) && (this.seenBidi = true, this.currentRow = null);
                        }, this.getDocumentRow = function() {
                            var e = 0,
                                t = this.session.$screenRowCache;
                            if (t.length) {
                                var n = this.session.$getRowCacheIndex(t, this.currentRow);
                                n >= 0 && (e = this.session.$docRowCache[n]);
                            }
                            return e;
                        }, this.getSplitIndex = function() {
                            var e = 0,
                                t = this.session.$screenRowCache;
                            if (t.length) {
                                var n, i = this.session.$getRowCacheIndex(t, this.currentRow);
                                while (this.currentRow - e > 0) {
                                    if (n = this.session.$getRowCacheIndex(t, this.currentRow - e - 1), n !== i) break;
                                    i = n, e++;
                                }
                            } else e = this.currentRow;
                            return e;
                        }, this.updateRowLine = function(e, t) {
                            undefined === e && (e = this.getDocumentRow());
                            var n = e === this.session.getLength() - 1,
                                r = n ? this.EOF : this.EOL;
                            if (this.wrapIndent = 0, this.line = this.session.getLine(e), this.isRtlDir = this.$isRtl || this.line.charAt(0) === this.RLE, this.session.$useWrapMode) {
                                var s = this.session.$wrapData[e];
                                s && (undefined === t && (t = this.getSplitIndex()), t > 0 && s.length ? (this.wrapIndent = s.indent, this.wrapOffset = this.wrapIndent * this.charWidths[i.L], this.line = t < s.length ? this.line.substring(s[t - 1], s[t]) : this.line.substring(s[s.length - 1])) : this.line = this.line.substring(0, s[t])), t == s.length && (this.line += this.showInvisibles ? r : i.DOT);
                            } else this.line += this.showInvisibles ? r : i.DOT;
                            var a, l = this.session,
                                c = 0;
                            this.line = this.line.replace(/\t|[\u1100-\u2029, \u202F-\uFFE6]/g, function(e, t) {
                                return "	" === e || l.isFullWidth(e.charCodeAt(0)) ? (a = "	" === e ? l.getScreenTabSize(t + c) : 2, c += a - 1, o.stringRepeat(i.DOT, a)) : e;
                            }), this.isRtlDir && (this.fontMetrics.$main.textContent = this.line.charAt(this.line.length - 1) == i.DOT ? this.line.substr(0, this.line.length - 1) : this.line, this.rtlLineOffset = this.contentWidth - this.fontMetrics.$main.getBoundingClientRect().width);
                        }, this.updateBidiMap = function() {
                            var e = [];
                            i.hasBidiCharacters(this.line, e) || this.isRtlDir ? this.bidiMap = i.doBidiReorder(this.line, e, this.isRtlDir) : this.bidiMap = {};
                        }, this.markAsDirty = function() {
                            this.currentRow = null;
                        }, this.updateCharacterWidths = function(e) {
                            if (this.characterWidth !== e.$characterSize.width) {
                                this.fontMetrics = e;
                                var t = this.characterWidth = e.$characterSize.width,
                                    n = e.$measureCharWidth("ה");
                                this.charWidths[i.L] = this.charWidths[i.EN] = this.charWidths[i.ON_R] = t, this.charWidths[i.R] = this.charWidths[i.AN] = n, this.charWidths[i.R_H] = 0.45 * n, this.charWidths[i.B] = this.charWidths[i.RLE] = 0, this.currentRow = null;
                            }
                        }, this.setShowInvisibles = function(e) {
                            this.showInvisibles = e, this.currentRow = null;
                        }, this.setEolChar = function(e) {
                            this.EOL = e;
                        }, this.setContentWidth = function(e) {
                            this.contentWidth = e;
                        }, this.isRtlLine = function(e) {
                            return !!this.$isRtl || (undefined != e ? this.session.getLine(e).charAt(0) == this.RLE : this.isRtlDir);
                        }, this.setRtlDirection = function(e, t) {
                            for (var n = e.getCursorPosition(), i = e.selection.getSelectionAnchor().row; i <= n.row; i++) t || e.session.getLine(i).charAt(0) !== e.session.$bidiHandler.RLE ? t && e.session.getLine(i).charAt(0) !== e.session.$bidiHandler.RLE && e.session.doc.insert({
                                column: 0,
                                row: i
                            }, e.session.$bidiHandler.RLE) : e.session.doc.removeInLine(i, 0, 1);
                        }, this.getPosLeft = function(e) {
                            e -= this.wrapIndent;
                            var t = this.line.charAt(0) === this.RLE ? 1 : 0,
                                n = e > t ? this.session.getOverwrite() ? e : e - 1 : t,
                                o = i.getVisualFromLogicalIdx(n, this.bidiMap),
                                r = this.bidiMap.bidiLevels,
                                s = 0;
                            !this.session.getOverwrite() && e <= t && r[o] % 2 !== 0 && o++;
                            for (var a = 0; a < o; a++) s += this.charWidths[r[a]];
                            return !this.session.getOverwrite() && e > t && r[o] % 2 === 0 && (s += this.charWidths[r[o]]), this.wrapIndent && (s += this.isRtlDir ? -1 * this.wrapOffset : this.wrapOffset), this.isRtlDir && (s += this.rtlLineOffset), s;
                        }, this.getSelections = function(e, t) {
                            var n, i = this.bidiMap,
                                o = i.bidiLevels,
                                r = [],
                                s = 0,
                                a = Math.min(e, t) - this.wrapIndent,
                                l = Math.max(e, t) - this.wrapIndent,
                                c = false,
                                u = false,
                                d = 0;
                            this.wrapIndent && (s += this.isRtlDir ? -1 * this.wrapOffset : this.wrapOffset);
                            for (var h, f = 0; f < o.length; f++) h = i.logicalFromVisual[f], n = o[f], c = h >= a && h < l, c && !u ? d = s : !c && u && r.push({
                                left: d,
                                width: s - d
                            }), s += this.charWidths[n], u = c;
                            if (c && f === o.length && r.push({
                                    left: d,
                                    width: s - d
                                }), this.isRtlDir)
                                for (var p = 0; p < r.length; p++) r[p].left += this.rtlLineOffset;
                            return r;
                        }, this.offsetToCol = function(e) {
                            this.isRtlDir && (e -= this.rtlLineOffset);
                            var t = 0,
                                n = (e = Math.max(e, 0), 0),
                                i = 0,
                                o = this.bidiMap.bidiLevels,
                                r = this.charWidths[o[i]];
                            this.wrapIndent && (e -= this.isRtlDir ? -1 * this.wrapOffset : this.wrapOffset);
                            while (e > n + r / 2) {
                                if (n += r, i === o.length - 1) {
                                    r = 0;
                                    break;
                                }
                                r = this.charWidths[o[++i]];
                            }
                            return i > 0 && o[i - 1] % 2 !== 0 && o[i] % 2 === 0 ? (e < n && i--, t = this.bidiMap.logicalFromVisual[i]) : i > 0 && o[i - 1] % 2 === 0 && o[i] % 2 !== 0 ? t = 1 + (e > n ? this.bidiMap.logicalFromVisual[i] : this.bidiMap.logicalFromVisual[i - 1]) : this.isRtlDir && i === o.length - 1 && 0 === r && o[i - 1] % 2 === 0 || !this.isRtlDir && 0 === i && o[i] % 2 !== 0 ? t = 1 + this.bidiMap.logicalFromVisual[i] : (i > 0 && o[i - 1] % 2 !== 0 && 0 !== r && i--, t = this.bidiMap.logicalFromVisual[i]), 0 === t && this.isRtlDir && t++, t + this.wrapIndent;
                        };
                    }.call(s.prototype), t.BidiHandler = s);
                }), ace.define("ace/selection", ["require", "exports", "module", "ace/lib/oop", "ace/lib/lang", "ace/lib/event_emitter", "ace/range"], function(e, t, n) {
                    "use strict";
                    var i = e("./lib/oop"),
                        o = e("./lib/lang"),
                        r = e("./lib/event_emitter").EventEmitter,
                        s = e("./range").Range,
                        a = function(e) {
                            this.session = e, this.doc = e.getDocument(), this.clearSelection(), this.cursor = this.lead = this.doc.createAnchor(0, 0), this.anchor = this.doc.createAnchor(0, 0), this.$silent = false;
                            var t = this;
                            this.cursor.on("change", function(e) {
                                t.$cursorChanged = true, t.$silent || t._emit("changeCursor"), t.$isEmpty || t.$silent || t._emit("changeSelection"), t.$keepDesiredColumnOnChange || e.old.column == e.value.column || (t.$desiredColumn = null);
                            }), this.anchor.on("change", function() {
                                t.$anchorChanged = true, t.$isEmpty || t.$silent || t._emit("changeSelection");
                            });
                        };
                    (function() {
                        i.implement(this, r), this.isEmpty = function() {
                            return this.$isEmpty || this.anchor.row == this.lead.row && this.anchor.column == this.lead.column;
                        }, this.isMultiLine = function() {
                            return !this.$isEmpty && this.anchor.row != this.cursor.row;
                        }, this.getCursor = function() {
                            return this.lead.getPosition();
                        }, this.setSelectionAnchor = function(e, t) {
                            this.$isEmpty = false, this.anchor.setPosition(e, t);
                        }, this.getAnchor = this.getSelectionAnchor = function() {
                            return this.$isEmpty ? this.getSelectionLead() : this.anchor.getPosition();
                        }, this.getSelectionLead = function() {
                            return this.lead.getPosition();
                        }, this.isBackwards = function() {
                            var e = this.anchor,
                                t = this.lead;
                            return e.row > t.row || e.row == t.row && e.column > t.column;
                        }, this.getRange = function() {
                            var e = this.anchor,
                                t = this.lead;
                            return this.$isEmpty ? s.fromPoints(t, t) : this.isBackwards() ? s.fromPoints(t, e) : s.fromPoints(e, t);
                        }, this.clearSelection = function() {
                            this.$isEmpty || (this.$isEmpty = true, this._emit("changeSelection"));
                        }, this.selectAll = function() {
                            this.$setSelection(0, 0, Number.MAX_VALUE, Number.MAX_VALUE);
                        }, this.setRange = this.setSelectionRange = function(e, t) {
                            var n = t ? e.end : e.start,
                                i = t ? e.start : e.end;
                            this.$setSelection(n.row, n.column, i.row, i.column);
                        }, this.$setSelection = function(e, t, n, i) {
                            if (!this.$silent) {
                                var o = this.$isEmpty,
                                    r = this.inMultiSelectMode;
                                this.$silent = true, this.$cursorChanged = this.$anchorChanged = false, this.anchor.setPosition(e, t), this.cursor.setPosition(n, i), this.$isEmpty = !s.comparePoints(this.anchor, this.cursor), this.$silent = false, this.$cursorChanged && this._emit("changeCursor"), (this.$cursorChanged || this.$anchorChanged || o != this.$isEmpty || r) && this._emit("changeSelection");
                            }
                        }, this.$moveSelection = function(e) {
                            var t = this.lead;
                            this.$isEmpty && this.setSelectionAnchor(t.row, t.column), e.call(this);
                        }, this.selectTo = function(e, t) {
                            this.$moveSelection(function() {
                                this.moveCursorTo(e, t);
                            });
                        }, this.selectToPosition = function(e) {
                            this.$moveSelection(function() {
                                this.moveCursorToPosition(e);
                            });
                        }, this.moveTo = function(e, t) {
                            this.clearSelection(), this.moveCursorTo(e, t);
                        }, this.moveToPosition = function(e) {
                            this.clearSelection(), this.moveCursorToPosition(e);
                        }, this.selectUp = function() {
                            this.$moveSelection(this.moveCursorUp);
                        }, this.selectDown = function() {
                            this.$moveSelection(this.moveCursorDown);
                        }, this.selectRight = function() {
                            this.$moveSelection(this.moveCursorRight);
                        }, this.selectLeft = function() {
                            this.$moveSelection(this.moveCursorLeft);
                        }, this.selectLineStart = function() {
                            this.$moveSelection(this.moveCursorLineStart);
                        }, this.selectLineEnd = function() {
                            this.$moveSelection(this.moveCursorLineEnd);
                        }, this.selectFileEnd = function() {
                            this.$moveSelection(this.moveCursorFileEnd);
                        }, this.selectFileStart = function() {
                            this.$moveSelection(this.moveCursorFileStart);
                        }, this.selectWordRight = function() {
                            this.$moveSelection(this.moveCursorWordRight);
                        }, this.selectWordLeft = function() {
                            this.$moveSelection(this.moveCursorWordLeft);
                        }, this.getWordRange = function(e, t) {
                            if ("undefined" == typeof t) {
                                var n = e || this.lead;
                                e = n.row, t = n.column;
                            }
                            return this.session.getWordRange(e, t);
                        }, this.selectWord = function() {
                            this.setSelectionRange(this.getWordRange());
                        }, this.selectAWord = function() {
                            var e = this.getCursor(),
                                t = this.session.getAWordRange(e.row, e.column);
                            this.setSelectionRange(t);
                        }, this.getLineRange = function(e, t) {
                            var n, i = "number" == typeof e ? e : this.lead.row,
                                o = this.session.getFoldLine(i);
                            return o ? (i = o.start.row, n = o.end.row) : n = i, true === t ? new s(i, 0, n, this.session.getLine(n).length) : new s(i, 0, n + 1, 0);
                        }, this.selectLine = function() {
                            this.setSelectionRange(this.getLineRange());
                        }, this.moveCursorUp = function() {
                            this.moveCursorBy(-1, 0);
                        }, this.moveCursorDown = function() {
                            this.moveCursorBy(1, 0);
                        }, this.wouldMoveIntoSoftTab = function(e, t, n) {
                            var i = e.column,
                                o = e.column + t;
                            return n < 0 && (i = e.column - t, o = e.column), this.session.isTabStop(e) && this.doc.getLine(e.row).slice(i, o).split(" ").length - 1 == t;
                        }, this.moveCursorLeft = function() {
                            var e, t = this.lead.getPosition();
                            if (e = this.session.getFoldAt(t.row, t.column, -1)) this.moveCursorTo(e.start.row, e.start.column);
                            else if (0 === t.column) t.row > 0 && this.moveCursorTo(t.row - 1, this.doc.getLine(t.row - 1).length);
                            else {
                                var n = this.session.getTabSize();
                                this.wouldMoveIntoSoftTab(t, n, -1) && !this.session.getNavigateWithinSoftTabs() ? this.moveCursorBy(0, -n) : this.moveCursorBy(0, -1);
                            }
                        }, this.moveCursorRight = function() {
                            var e, t = this.lead.getPosition();
                            if (e = this.session.getFoldAt(t.row, t.column, 1)) this.moveCursorTo(e.end.row, e.end.column);
                            else if (this.lead.column == this.doc.getLine(this.lead.row).length) this.lead.row < this.doc.getLength() - 1 && this.moveCursorTo(this.lead.row + 1, 0);
                            else {
                                var n = this.session.getTabSize();
                                t = this.lead;
                                this.wouldMoveIntoSoftTab(t, n, 1) && !this.session.getNavigateWithinSoftTabs() ? this.moveCursorBy(0, n) : this.moveCursorBy(0, 1);
                            }
                        }, this.moveCursorLineStart = function() {
                            var e = this.lead.row,
                                t = this.lead.column,
                                n = this.session.documentToScreenRow(e, t),
                                i = this.session.screenToDocumentPosition(n, 0),
                                o = this.session.getDisplayLine(e, null, i.row, i.column),
                                r = o.match(/^\s*/);
                            r[0].length == t || this.session.$useEmacsStyleLineStart || (i.column += r[0].length), this.moveCursorToPosition(i);
                        }, this.moveCursorLineEnd = function() {
                            var e = this.lead,
                                t = this.session.getDocumentLastRowColumnPosition(e.row, e.column);
                            if (this.lead.column == t.column) {
                                var n = this.session.getLine(t.row);
                                if (t.column == n.length) {
                                    var i = n.search(/\s+$/);
                                    i > 0 && (t.column = i);
                                }
                            }
                            this.moveCursorTo(t.row, t.column);
                        }, this.moveCursorFileEnd = function() {
                            var e = this.doc.getLength() - 1,
                                t = this.doc.getLine(e).length;
                            this.moveCursorTo(e, t);
                        }, this.moveCursorFileStart = function() {
                            this.moveCursorTo(0, 0);
                        }, this.moveCursorLongWordRight = function() {
                            var e = this.lead.row,
                                t = this.lead.column,
                                n = this.doc.getLine(e),
                                i = n.substring(t);
                            this.session.nonTokenRe.lastIndex = 0, this.session.tokenRe.lastIndex = 0;
                            var o = this.session.getFoldAt(e, t, 1);
                            if (o) this.moveCursorTo(o.end.row, o.end.column);
                            else {
                                if (this.session.nonTokenRe.exec(i) && (t += this.session.nonTokenRe.lastIndex, this.session.nonTokenRe.lastIndex = 0, i = n.substring(t)), t >= n.length) return this.moveCursorTo(e, n.length), this.moveCursorRight(), void(e < this.doc.getLength() - 1 && this.moveCursorWordRight());
                                this.session.tokenRe.exec(i) && (t += this.session.tokenRe.lastIndex, this.session.tokenRe.lastIndex = 0), this.moveCursorTo(e, t);
                            }
                        }, this.moveCursorLongWordLeft = function() {
                            var e, t = this.lead.row,
                                n = this.lead.column;
                            if (e = this.session.getFoldAt(t, n, -1)) this.moveCursorTo(e.start.row, e.start.column);
                            else {
                                var i = this.session.getFoldStringAt(t, n, -1);
                                null == i && (i = this.doc.getLine(t).substring(0, n));
                                var r = o.stringReverse(i);
                                if (this.session.nonTokenRe.lastIndex = 0, this.session.tokenRe.lastIndex = 0, this.session.nonTokenRe.exec(r) && (n -= this.session.nonTokenRe.lastIndex, r = r.slice(this.session.nonTokenRe.lastIndex), this.session.nonTokenRe.lastIndex = 0), n <= 0) return this.moveCursorTo(t, 0), this.moveCursorLeft(), void(t > 0 && this.moveCursorWordLeft());
                                this.session.tokenRe.exec(r) && (n -= this.session.tokenRe.lastIndex, this.session.tokenRe.lastIndex = 0), this.moveCursorTo(t, n);
                            }
                        }, this.$shortWordEndIndex = function(e) {
                            var t, n = 0,
                                i = /\s/,
                                o = this.session.tokenRe;
                            if (o.lastIndex = 0, this.session.tokenRe.exec(e)) n = this.session.tokenRe.lastIndex;
                            else {
                                while ((t = e[n]) && i.test(t)) n++;
                                if (n < 1) {
                                    o.lastIndex = 0;
                                    while ((t = e[n]) && !o.test(t))
                                        if (o.lastIndex = 0, n++, i.test(t)) {
                                            if (n > 2) {
                                                n--;
                                                break;
                                            }
                                            while ((t = e[n]) && i.test(t)) n++;
                                            if (n > 2) break;
                                        }
                                }
                            }
                            return o.lastIndex = 0, n;
                        }, this.moveCursorShortWordRight = function() {
                            var e = this.lead.row,
                                t = this.lead.column,
                                n = this.doc.getLine(e),
                                i = n.substring(t),
                                o = this.session.getFoldAt(e, t, 1);
                            if (o) return this.moveCursorTo(o.end.row, o.end.column);
                            if (t == n.length) {
                                var r = this.doc.getLength();
                                do {
                                    e++, i = this.doc.getLine(e);
                                } while (e < r && /^\s*$/.test(i));
                                /^\s+/.test(i) || (i = ""), t = 0;
                            }
                            var s = this.$shortWordEndIndex(i);
                            this.moveCursorTo(e, t + s);
                        }, this.moveCursorShortWordLeft = function() {
                            var e, t = this.lead.row,
                                n = this.lead.column;
                            if (e = this.session.getFoldAt(t, n, -1)) return this.moveCursorTo(e.start.row, e.start.column);
                            var i = this.session.getLine(t).substring(0, n);
                            if (0 === n) {
                                do {
                                    t--, i = this.doc.getLine(t);
                                } while (t > 0 && /^\s*$/.test(i));
                                n = i.length, /\s+$/.test(i) || (i = "");
                            }
                            var r = o.stringReverse(i),
                                s = this.$shortWordEndIndex(r);
                            return this.moveCursorTo(t, n - s);
                        }, this.moveCursorWordRight = function() {
                            this.session.$selectLongWords ? this.moveCursorLongWordRight() : this.moveCursorShortWordRight();
                        }, this.moveCursorWordLeft = function() {
                            this.session.$selectLongWords ? this.moveCursorLongWordLeft() : this.moveCursorShortWordLeft();
                        }, this.moveCursorBy = function(e, t) {
                            var n, i = this.session.documentToScreenPosition(this.lead.row, this.lead.column);
                            if (0 === t && (0 !== e && (this.session.$bidiHandler.isBidiRow(i.row, this.lead.row) ? (n = this.session.$bidiHandler.getPosLeft(i.column), i.column = Math.round(n / this.session.$bidiHandler.charWidths[0])) : n = i.column * this.session.$bidiHandler.charWidths[0]), this.$desiredColumn ? i.column = this.$desiredColumn : this.$desiredColumn = i.column), 0 != e && this.session.lineWidgets && this.session.lineWidgets[this.lead.row]) {
                                var o = this.session.lineWidgets[this.lead.row];
                                e < 0 ? e -= o.rowsAbove || 0 : e > 0 && (e += o.rowCount - (o.rowsAbove || 0));
                            }
                            var r = this.session.screenToDocumentPosition(i.row + e, i.column, n);
                            0 !== e && 0 === t && r.row === this.lead.row && (r.column, this.lead.column), this.moveCursorTo(r.row, r.column + t, 0 === t);
                        }, this.moveCursorToPosition = function(e) {
                            this.moveCursorTo(e.row, e.column);
                        }, this.moveCursorTo = function(e, t, n) {
                            var i = this.session.getFoldAt(e, t, 1);
                            i && (e = i.start.row, t = i.start.column), this.$keepDesiredColumnOnChange = true;
                            var o = this.session.getLine(e);
                            /[\uDC00-\uDFFF]/.test(o.charAt(t)) && o.charAt(t - 1) && (this.lead.row == e && this.lead.column == t + 1 ? t -= 1 : t += 1), this.lead.setPosition(e, t), this.$keepDesiredColumnOnChange = false, n || (this.$desiredColumn = null);
                        }, this.moveCursorToScreen = function(e, t, n) {
                            var i = this.session.screenToDocumentPosition(e, t);
                            this.moveCursorTo(i.row, i.column, n);
                        }, this.detach = function() {
                            this.lead.detach(), this.anchor.detach();
                        }, this.fromOrientedRange = function(e) {
                            this.setSelectionRange(e, e.cursor == e.start), this.$desiredColumn = e.desiredColumn || this.$desiredColumn;
                        }, this.toOrientedRange = function(e) {
                            var t = this.getRange();
                            return e ? (e.start.column = t.start.column, e.start.row = t.start.row, e.end.column = t.end.column, e.end.row = t.end.row) : e = t, e.cursor = this.isBackwards() ? e.start : e.end, e.desiredColumn = this.$desiredColumn, e;
                        }, this.getRangeOfMovements = function(e) {
                            var t = this.getCursor();
                            try {
                                e(this);
                                var n = this.getCursor();
                                return s.fromPoints(t, n);
                            } catch (i) {
                                return s.fromPoints(t, t);
                            } finally {
                                this.moveCursorToPosition(t);
                            }
                        }, this.toJSON = function() {
                            if (this.rangeCount) var e = this.ranges.map(function(e) {
                                var t = e.clone();
                                return t.isBackwards = e.cursor == e.start, t;
                            });
                            else {
                                e = this.getRange();
                                e.isBackwards = this.isBackwards();
                            }
                            return e;
                        }, this.fromJSON = function(e) {
                            if (undefined == e.start) {
                                if (this.rangeList && e.length > 1) {
                                    this.toSingleRange(e[0]);
                                    for (var t = e.length; t--;) {
                                        var n = s.fromPoints(e[t].start, e[t].end);
                                        e[t].isBackwards && (n.cursor = n.start), this.addRange(n, true);
                                    }
                                    return;
                                }
                                e = e[0];
                            }
                            this.rangeList && this.toSingleRange(e), this.setSelectionRange(e, e.isBackwards);
                        }, this.isEqual = function(e) {
                            if ((e.length || this.rangeCount) && e.length != this.rangeCount) return false;
                            if (!e.length || !this.ranges) return this.getRange().isEqual(e);
                            for (var t = this.ranges.length; t--;)
                                if (!this.ranges[t].isEqual(e[t])) return false;
                            return true;
                        };
                    }.call(a.prototype), t.Selection = a);
                }), ace.define("ace/tokenizer", ["require", "exports", "module", "ace/config"], function(e, t, n) {
                    "use strict";
                    var i = e("./config"),
                        o = 2e3,
                        r = function(e) {
                            for (var t in this.states = e, this.regExps = {}, this.matchMappings = {}, this.states) {
                                for (var n = this.states[t], i = [], o = 0, r = this.matchMappings[t] = {
                                        defaultToken: "text"
                                    }, s = "g", a = [], l = 0; l < n.length; l++) {
                                    var c = n[l];
                                    if (c.defaultToken && (r.defaultToken = c.defaultToken), c.caseInsensitive && (s = "gi"), null != c.regex) {
                                        c.regex instanceof RegExp && (c.regex = c.regex.toString().slice(1, -1));
                                        var u = c.regex,
                                            d = new RegExp("(?:(" + u + ")|(.))").exec("a").length - 2;
                                        Array.isArray(c.token) ? 1 == c.token.length || 1 == d ? c.token = c.token[0] : d - 1 != c.token.length ? (this.reportError("number of classes and regexp groups doesn't match", {
                                            rule: c,
                                            groupCount: d - 1
                                        }), c.token = c.token[0]) : (c.tokenArray = c.token, c.token = null, c.onMatch = this.$arrayTokens) : "function" != typeof c.token || c.onMatch || (c.onMatch = d > 1 ? this.$applyToken : c.token), d > 1 && (/\\\d/.test(c.regex) ? u = c.regex.replace(/\\([0-9]+)/g, function(e, t) {
                                            return "\\" + (parseInt(t, 10) + o + 1);
                                        }) : (d = 1, u = this.removeCapturingGroups(c.regex)), c.splitRegex || "string" == typeof c.token || a.push(c)), r[o] = l, o += d, i.push(u), c.onMatch || (c.onMatch = null);
                                    }
                                }
                                i.length || (r[0] = 0, i.push("$")), a.forEach(function(e) {
                                    e.splitRegex = this.createSplitterRegexp(e.regex, s);
                                }, this), this.regExps[t] = new RegExp("(" + i.join(")|(") + ")|($)", s);
                            }
                        };
                    (function() {
                        this.$setMaxTokenCount = function(e) {
                            o = 0 | e;
                        }, this.$applyToken = function(e) {
                            var t = this.splitRegex.exec(e).slice(1),
                                n = this.token.apply(this, t);
                            if ("string" === typeof n) return [{
                                type: n,
                                value: e
                            }];
                            for (var i = [], o = 0, r = n.length; o < r; o++) t[o] && (i[i.length] = {
                                type: n[o],
                                value: t[o]
                            });
                            return i;
                        }, this.$arrayTokens = function(e) {
                            if (!e) return [];
                            var t = this.splitRegex.exec(e);
                            if (!t) return "text";
                            for (var n = [], i = this.tokenArray, o = 0, r = i.length; o < r; o++) t[o + 1] && (n[n.length] = {
                                type: i[o],
                                value: t[o + 1]
                            });
                            return n;
                        }, this.removeCapturingGroups = function(e) {
                            var t = e.replace(/\\.|\[(?:\\.|[^\\\]])*|\(\?[:=!<]|(\()/g, function(e, t) {
                                return t ? "(?:" : e;
                            });
                            return t;
                        }, this.createSplitterRegexp = function(e, t) {
                            if (-1 != e.indexOf("(?=")) {
                                var n = 0,
                                    i = false,
                                    o = {};
                                e.replace(/(\\.)|(\((?:\?[=!])?)|(\))|([\[\]])/g, function(e, t, r, s, a, l) {
                                    return i ? i = "]" != a : a ? i = true : s ? (n == o.stack && (o.end = l + 1, o.stack = -1), n--) : r && (n++, 1 != r.length && (o.stack = n, o.start = l)), e;
                                }), null != o.end && /^\)*$/.test(e.substr(o.end)) && (e = e.substring(0, o.start) + e.substr(o.end));
                            }
                            return "^" != e.charAt(0) && (e = "^" + e), "$" != e.charAt(e.length - 1) && (e += "$"), new RegExp(e, (t || "").replace("g", ""));
                        }, this.getLineTokens = function(e, t) {
                            if (t && "string" != typeof t) {
                                var n = t.slice(0);
                                t = n[0], "#tmp" === t && (n.shift(), t = n.shift());
                            } else n = [];
                            var i = t || "start",
                                r = this.states[i];
                            r || (i = "start", r = this.states[i]);
                            var s = this.matchMappings[i],
                                a = this.regExps[i];
                            a.lastIndex = 0;
                            var l, c = [],
                                u = 0,
                                d = 0,
                                h = {
                                    type: null,
                                    value: ""
                                };
                            while (l = a.exec(e)) {
                                var f = s.defaultToken,
                                    p = null,
                                    m = l[0],
                                    g = a.lastIndex;
                                if (g - m.length > u) {
                                    var v = e.substring(u, g - m.length);
                                    h.type == f ? h.value += v : (h.type && c.push(h), h = {
                                        type: f,
                                        value: v
                                    });
                                }
                                for (var b = 0; b < l.length - 2; b++)
                                    if (undefined !== l[b + 1]) {
                                        p = r[s[b]], f = p.onMatch ? p.onMatch(m, i, n, e) : p.token, p.next && (i = "string" == typeof p.next ? p.next : p.next(i, n), r = this.states[i], r || (this.reportError("state doesn't exist", i), i = "start", r = this.states[i]), s = this.matchMappings[i], u = g, a = this.regExps[i], a.lastIndex = g), p.consumeLineEnd && (u = g);
                                        break;
                                    }
                                if (m)
                                    if ("string" === typeof f) p && false === p.merge || h.type !== f ? (h.type && c.push(h), h = {
                                        type: f,
                                        value: m
                                    }) : h.value += m;
                                    else if (f) {
                                    h.type && c.push(h), h = {
                                        type: null,
                                        value: ""
                                    };
                                    for (b = 0; b < f.length; b++) c.push(f[b]);
                                }
                                if (u == e.length) break;
                                if (u = g, d++ > o) {
                                    d > 2 * e.length && this.reportError("infinite loop with in ace tokenizer", {
                                        startState: t,
                                        line: e
                                    });
                                    while (u < e.length) h.type && c.push(h), h = {
                                        value: e.substring(u, u += 500),
                                        type: "overflow"
                                    };
                                    i = "start", n = [];
                                    break;
                                }
                            }
                            return h.type && c.push(h), n.length > 1 && n[0] !== i && n.unshift("#tmp", i), {
                                tokens: c,
                                state: n.length ? n : i
                            };
                        }, this.reportError = i.reportError;
                    }.call(r.prototype), t.Tokenizer = r);
                }), ace.define("ace/mode/text_highlight_rules", ["require", "exports", "module", "ace/lib/lang"], function(e, t, n) {
                    "use strict";
                    var i = e("../lib/lang"),
                        o = function() {
                            this.$rules = {
                                start: [{
                                    token: "empty_line",
                                    regex: "^$"
                                }, {
                                    defaultToken: "text"
                                }]
                            };
                        };
                    (function() {
                        this.addRules = function(e, t) {
                            if (t)
                                for (var n in e) {
                                    for (var i = e[n], o = 0; o < i.length; o++) {
                                        var r = i[o];
                                        (r.next || r.onMatch) && ("string" == typeof r.next && 0 !== r.next.indexOf(t) && (r.next = t + r.next), r.nextState && 0 !== r.nextState.indexOf(t) && (r.nextState = t + r.nextState));
                                    }
                                    this.$rules[t + n] = i;
                                } else
                                    for (var n in e) this.$rules[n] = e[n];
                        }, this.getRules = function() {
                            return this.$rules;
                        }, this.embedRules = function(e, t, n, o, r) {
                            var s = "function" == typeof e ? (new e).getRules() : e;
                            if (o)
                                for (var a = 0; a < o.length; a++) o[a] = t + o[a];
                            else
                                for (var l in o = [], s) o.push(t + l);
                            if (this.addRules(s, t), n) {
                                var c = Array.prototype[r ? "push" : "unshift"];
                                for (a = 0; a < o.length; a++) c.apply(this.$rules[o[a]], i.deepCopy(n));
                            }
                            this.$embeds || (this.$embeds = []), this.$embeds.push(t);
                        }, this.getEmbeds = function() {
                            return this.$embeds;
                        };
                        this.normalizeRules = function() {
                            var n = 0,
                                i = this.$rules;

                            function o(r) {
                                var s = i[r];
                                s.processed = true;
                                for (var a = 0; a < s.length; a++) {
                                    var l = s[a],
                                        c = null;
                                    Array.isArray(l) && (c = l, l = {}), !l.regex && l.start && (l.regex = l.start, l.next || (l.next = []), l.next.push({
                                        defaultToken: l.token
                                    }, {
                                        token: l.token + ".end",
                                        regex: l.end || l.start,
                                        next: "pop"
                                    }), l.token = l.token + ".start", l.push = true);
                                    var u = l.next || l.push;
                                    if (u && Array.isArray(u)) {
                                        var d = l.stateName;
                                        d || (d = l.token, "string" != typeof d && (d = d[0] || ""), i[d] && (d += n++)), i[d] = u, l.next = d, o(d);
                                    } else "pop" == u && (l.next = t);
                                    if (l.push && (l.nextState = l.next || l.push, l.next = e, delete l.push), l.rules)
                                        for (var h in l.rules) i[h] ? i[h].push && i[h].push.apply(i[h], l.rules[h]) : i[h] = l.rules[h];
                                    var f = "string" == typeof l ? l : l.include;
                                    if (f && (c = Array.isArray(f) ? f.map(function(e) {
                                            return i[e];
                                        }) : i[f]), c) {
                                        var p = [a, 1].concat(c);
                                        l.noEscape && (p = p.filter(function(e) {
                                            return !e.next;
                                        })), s.splice.apply(s, p), a--;
                                    }
                                    l.keywordMap && (l.token = this.createKeywordMapper(l.keywordMap, l.defaultToken || "text", l.caseInsensitive), delete l.defaultToken);
                                }
                            }
                            Object.keys(i).forEach(o, this);
                        }, this.createKeywordMapper = function(e, t, n, i) {
                            var o = Object.create(null);
                            return this.$keywordList = [], Object.keys(e).forEach(function(t) {
                                for (var r = e[t], s = r.split(i || "|"), a = s.length; a--;) {
                                    var l = s[a];
                                    this.$keywordList.push(l), n && (l = l.toLowerCase()), o[l] = t;
                                }
                            }, this), e = null, n ? function(e) {
                                return o[e.toLowerCase()] || t;
                            } : function(e) {
                                return o[e] || t;
                            };
                        }, this.getKeywords = function() {
                            return this.$keywords;
                        };
                    }.call(o.prototype), t.TextHighlightRules = o);
                }), ace.define("ace/mode/behaviour", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    var i = function() {
                        this.$behaviours = {};
                    };
                    (function() {
                        this.add = function(e, t, n) {
                            switch (undefined) {
                                case this.$behaviours:
                                    this.$behaviours = {};
                                case this.$behaviours[e]:
                                    this.$behaviours[e] = {};
                            }
                            this.$behaviours[e][t] = n;
                        }, this.addBehaviours = function(e) {
                            for (var t in e)
                                for (var n in e[t]) this.add(t, n, e[t][n]);
                        }, this.remove = function(e) {
                            this.$behaviours && this.$behaviours[e] && delete this.$behaviours[e];
                        }, this.inherit = function(e, t) {
                            if ("function" === typeof e) var n = (new e).getBehaviours(t);
                            else n = e.getBehaviours(t);
                            this.addBehaviours(n);
                        }, this.getBehaviours = function(e) {
                            if (e) {
                                for (var t = {}, n = 0; n < e.length; n++) this.$behaviours[e[n]] && (t[e[n]] = this.$behaviours[e[n]]);
                                return t;
                            }
                            return this.$behaviours;
                        };
                    }.call(i.prototype), t.Behaviour = i);
                }), ace.define("ace/token_iterator", ["require", "exports", "module", "ace/range"], function(e, t, n) {
                    "use strict";
                    var i = e("./range").Range,
                        o = function(e, t, n) {
                            this.$session = e, this.$row = t, this.$rowTokens = e.getTokens(t);
                            var i = e.getTokenAt(t, n);
                            this.$tokenIndex = i ? i.index : -1;
                        };
                    (function() {
                        this.stepBackward = function() {
                            this.$tokenIndex -= 1;
                            while (this.$tokenIndex < 0) {
                                if (this.$row -= 1, this.$row < 0) return this.$row = 0, null;
                                this.$rowTokens = this.$session.getTokens(this.$row), this.$tokenIndex = this.$rowTokens.length - 1;
                            }
                            return this.$rowTokens[this.$tokenIndex];
                        }, this.stepForward = function() {
                            var e;
                            this.$tokenIndex += 1;
                            while (this.$tokenIndex >= this.$rowTokens.length) {
                                if (this.$row += 1, e || (e = this.$session.getLength()), this.$row >= e) return this.$row = e - 1, null;
                                this.$rowTokens = this.$session.getTokens(this.$row), this.$tokenIndex = 0;
                            }
                            return this.$rowTokens[this.$tokenIndex];
                        }, this.getCurrentToken = function() {
                            return this.$rowTokens[this.$tokenIndex];
                        }, this.getCurrentTokenRow = function() {
                            return this.$row;
                        }, this.getCurrentTokenColumn = function() {
                            var e = this.$rowTokens,
                                t = this.$tokenIndex,
                                n = e[t].start;
                            if (undefined !== n) return n;
                            n = 0;
                            while (t > 0) t -= 1, n += e[t].value.length;
                            return n;
                        }, this.getCurrentTokenPosition = function() {
                            return {
                                row: this.$row,
                                column: this.getCurrentTokenColumn()
                            };
                        }, this.getCurrentTokenRange = function() {
                            var e = this.$rowTokens[this.$tokenIndex],
                                t = this.getCurrentTokenColumn();
                            return new i(this.$row, t, this.$row, t + e.value.length);
                        };
                    }.call(o.prototype), t.TokenIterator = o);
                }), ace.define("ace/mode/behaviour/cstyle", ["require", "exports", "module", "ace/lib/oop", "ace/mode/behaviour", "ace/token_iterator", "ace/lib/lang"], function(e, t, n) {
                    "use strict";
                    var i, o = e("../../lib/oop"),
                        r = e("../behaviour").Behaviour,
                        s = e("../../token_iterator").TokenIterator,
                        a = e("../../lib/lang"),
                        l = ["text", "paren.rparen", "rparen", "paren", "punctuation.operator"],
                        c = ["text", "paren.rparen", "rparen", "paren", "punctuation.operator", "comment"],
                        u = {},
                        d = {
                            '"': '"',
                            "'": "'"
                        },
                        h = function(e) {
                            var t = -1;
                            if (e.multiSelect && (t = e.selection.index, u.rangeCount != e.multiSelect.rangeCount && (u = {
                                    rangeCount: e.multiSelect.rangeCount
                                })), u[t]) return i = u[t];
                            i = u[t] = {
                                autoInsertedBrackets: 0,
                                autoInsertedRow: -1,
                                autoInsertedLineEnd: "",
                                maybeInsertedBrackets: 0,
                                maybeInsertedRow: -1,
                                maybeInsertedLineStart: "",
                                maybeInsertedLineEnd: ""
                            };
                        },
                        f = function(e, t, n, i) {
                            var o = e.end.row - e.start.row;
                            return {
                                text: n + t + i,
                                selection: [0, e.start.column + 1, o, e.end.column + (o ? 0 : 1)]
                            };
                        },
                        p = function(e) {
                            this.add("braces", "insertion", function(t, n, o, r, s) {
                                var l = o.getCursorPosition(),
                                    c = r.doc.getLine(l.row);
                                if ("{" == s) {
                                    h(o);
                                    var u = o.getSelectionRange(),
                                        d = r.doc.getTextRange(u);
                                    if ("" !== d && "{" !== d && o.getWrapBehavioursEnabled()) return f(u, d, "{", "}");
                                    if (p.isSaneInsertion(o, r)) return /[\]\}\)]/.test(c[l.column]) || o.inMultiSelectMode || e && e.braces ? (p.recordAutoInsert(o, r, "}"), {
                                        text: "{}",
                                        selection: [1, 1]
                                    }) : (p.recordMaybeInsert(o, r, "{"), {
                                        text: "{",
                                        selection: [1, 1]
                                    });
                                } else if ("}" == s) {
                                    h(o);
                                    var m = c.substring(l.column, l.column + 1);
                                    if ("}" == m) {
                                        var g = r.$findOpeningBracket("}", {
                                            column: l.column + 1,
                                            row: l.row
                                        });
                                        if (null !== g && p.isAutoInsertedClosing(l, c, s)) return p.popAutoInsertedClosing(), {
                                            text: "",
                                            selection: [1, 1]
                                        };
                                    }
                                } else {
                                    if ("\n" == s || "\r\n" == s) {
                                        h(o);
                                        var v = "";
                                        p.isMaybeInsertedClosing(l, c) && (v = a.stringRepeat("}", i.maybeInsertedBrackets), p.clearMaybeInsertedClosing());
                                        m = c.substring(l.column, l.column + 1);
                                        if ("}" === m) {
                                            var b = r.findMatchingBracket({
                                                row: l.row,
                                                column: l.column + 1
                                            }, "}");
                                            if (!b) return null;
                                            var y = this.$getIndent(r.getLine(b.row));
                                        } else {
                                            if (!v) return void p.clearMaybeInsertedClosing();
                                            y = this.$getIndent(c);
                                        }
                                        var w = y + r.getTabString();
                                        return {
                                            text: "\n" + w + "\n" + y + v,
                                            selection: [1, w.length, 1, w.length]
                                        };
                                    }
                                    p.clearMaybeInsertedClosing();
                                }
                            }), this.add("braces", "deletion", function(e, t, n, o, r) {
                                var s = o.doc.getTextRange(r);
                                if (!r.isMultiLine() && "{" == s) {
                                    h(n);
                                    var a = o.doc.getLine(r.start.row),
                                        l = a.substring(r.end.column, r.end.column + 1);
                                    if ("}" == l) return r.end.column++, r;
                                    i.maybeInsertedBrackets--;
                                }
                            }), this.add("parens", "insertion", function(e, t, n, i, o) {
                                if ("(" == o) {
                                    h(n);
                                    var r = n.getSelectionRange(),
                                        s = i.doc.getTextRange(r);
                                    if ("" !== s && n.getWrapBehavioursEnabled()) return f(r, s, "(", ")");
                                    if (p.isSaneInsertion(n, i)) return p.recordAutoInsert(n, i, ")"), {
                                        text: "()",
                                        selection: [1, 1]
                                    };
                                } else if (")" == o) {
                                    h(n);
                                    var a = n.getCursorPosition(),
                                        l = i.doc.getLine(a.row),
                                        c = l.substring(a.column, a.column + 1);
                                    if (")" == c) {
                                        var u = i.$findOpeningBracket(")", {
                                            column: a.column + 1,
                                            row: a.row
                                        });
                                        if (null !== u && p.isAutoInsertedClosing(a, l, o)) return p.popAutoInsertedClosing(), {
                                            text: "",
                                            selection: [1, 1]
                                        };
                                    }
                                }
                            }), this.add("parens", "deletion", function(e, t, n, i, o) {
                                var r = i.doc.getTextRange(o);
                                if (!o.isMultiLine() && "(" == r) {
                                    h(n);
                                    var s = i.doc.getLine(o.start.row),
                                        a = s.substring(o.start.column + 1, o.start.column + 2);
                                    if (")" == a) return o.end.column++, o;
                                }
                            }), this.add("brackets", "insertion", function(e, t, n, i, o) {
                                if ("[" == o) {
                                    h(n);
                                    var r = n.getSelectionRange(),
                                        s = i.doc.getTextRange(r);
                                    if ("" !== s && n.getWrapBehavioursEnabled()) return f(r, s, "[", "]");
                                    if (p.isSaneInsertion(n, i)) return p.recordAutoInsert(n, i, "]"), {
                                        text: "[]",
                                        selection: [1, 1]
                                    };
                                } else if ("]" == o) {
                                    h(n);
                                    var a = n.getCursorPosition(),
                                        l = i.doc.getLine(a.row),
                                        c = l.substring(a.column, a.column + 1);
                                    if ("]" == c) {
                                        var u = i.$findOpeningBracket("]", {
                                            column: a.column + 1,
                                            row: a.row
                                        });
                                        if (null !== u && p.isAutoInsertedClosing(a, l, o)) return p.popAutoInsertedClosing(), {
                                            text: "",
                                            selection: [1, 1]
                                        };
                                    }
                                }
                            }), this.add("brackets", "deletion", function(e, t, n, i, o) {
                                var r = i.doc.getTextRange(o);
                                if (!o.isMultiLine() && "[" == r) {
                                    h(n);
                                    var s = i.doc.getLine(o.start.row),
                                        a = s.substring(o.start.column + 1, o.start.column + 2);
                                    if ("]" == a) return o.end.column++, o;
                                }
                            }), this.add("string_dquotes", "insertion", function(e, t, n, i, o) {
                                var r = i.$mode.$quotes || d;
                                if (1 == o.length && r[o]) {
                                    if (this.lineCommentStart && -1 != this.lineCommentStart.indexOf(o)) return;
                                    h(n);
                                    var s = o,
                                        a = n.getSelectionRange(),
                                        l = i.doc.getTextRange(a);
                                    if (!("" === l || 1 == l.length && r[l]) && n.getWrapBehavioursEnabled()) return f(a, l, s, s);
                                    if (!l) {
                                        var c = n.getCursorPosition(),
                                            u = i.doc.getLine(c.row),
                                            p = u.substring(c.column - 1, c.column),
                                            m = u.substring(c.column, c.column + 1),
                                            g = i.getTokenAt(c.row, c.column),
                                            v = i.getTokenAt(c.row, c.column + 1);
                                        if ("\\" == p && g && /escape/.test(g.type)) return null;
                                        var b, y = g && /string|escape/.test(g.type),
                                            w = !v || /string|escape/.test(v.type);
                                        if (m == s) b = y !== w, b && /string\.end/.test(v.type) && (b = false);
                                        else {
                                            if (y && !w) return null;
                                            if (y && w) return null;
                                            var x = i.$mode.tokenRe;
                                            x.lastIndex = 0;
                                            var _ = x.test(p);
                                            x.lastIndex = 0;
                                            var C = x.test(p);
                                            if (_ || C) return null;
                                            if (m && !/[\s;,.})\]\\]/.test(m)) return null;
                                            var k = u[c.column - 2];
                                            if (p == s && (k == s || x.test(k))) return null;
                                            b = true;
                                        }
                                        return {
                                            text: b ? s + s : "",
                                            selection: [1, 1]
                                        };
                                    }
                                }
                            }), this.add("string_dquotes", "deletion", function(e, t, n, i, o) {
                                var r = i.$mode.$quotes || d,
                                    s = i.doc.getTextRange(o);
                                if (!o.isMultiLine() && r.hasOwnProperty(s)) {
                                    h(n);
                                    var a = i.doc.getLine(o.start.row),
                                        l = a.substring(o.start.column + 1, o.start.column + 2);
                                    if (l == s) return o.end.column++, o;
                                }
                            });
                        };
                    p.isSaneInsertion = function(e, t) {
                        var n = e.getCursorPosition(),
                            i = new s(t, n.row, n.column);
                        if (!this.$matchTokenType(i.getCurrentToken() || "text", l)) {
                            if (/[)}\]]/.test(e.session.getLine(n.row)[n.column])) return true;
                            var o = new s(t, n.row, n.column + 1);
                            if (!this.$matchTokenType(o.getCurrentToken() || "text", l)) return false;
                        }
                        return i.stepForward(), i.getCurrentTokenRow() !== n.row || this.$matchTokenType(i.getCurrentToken() || "text", c);
                    }, p.$matchTokenType = function(e, t) {
                        return t.indexOf(e.type || e) > -1;
                    }, p.recordAutoInsert = function(e, t, n) {
                        var o = e.getCursorPosition(),
                            r = t.doc.getLine(o.row);
                        this.isAutoInsertedClosing(o, r, i.autoInsertedLineEnd[0]) || (i.autoInsertedBrackets = 0), i.autoInsertedRow = o.row, i.autoInsertedLineEnd = n + r.substr(o.column), i.autoInsertedBrackets++;
                    }, p.recordMaybeInsert = function(e, t, n) {
                        var o = e.getCursorPosition(),
                            r = t.doc.getLine(o.row);
                        this.isMaybeInsertedClosing(o, r) || (i.maybeInsertedBrackets = 0), i.maybeInsertedRow = o.row, i.maybeInsertedLineStart = r.substr(0, o.column) + n, i.maybeInsertedLineEnd = r.substr(o.column), i.maybeInsertedBrackets++;
                    }, p.isAutoInsertedClosing = function(e, t, n) {
                        return i.autoInsertedBrackets > 0 && e.row === i.autoInsertedRow && n === i.autoInsertedLineEnd[0] && t.substr(e.column) === i.autoInsertedLineEnd;
                    }, p.isMaybeInsertedClosing = function(e, t) {
                        return i.maybeInsertedBrackets > 0 && e.row === i.maybeInsertedRow && t.substr(e.column) === i.maybeInsertedLineEnd && t.substr(0, e.column) == i.maybeInsertedLineStart;
                    }, p.popAutoInsertedClosing = function() {
                        i.autoInsertedLineEnd = i.autoInsertedLineEnd.substr(1), i.autoInsertedBrackets--;
                    }, p.clearMaybeInsertedClosing = function() {
                        i && (i.maybeInsertedBrackets = 0, i.maybeInsertedRow = -1);
                    }, o.inherits(p, r), t.CstyleBehaviour = p;
                }), ace.define("ace/unicode", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    for (var i = [48, 9, 8, 25, 5, 0, 2, 25, 48, 0, 11, 0, 5, 0, 6, 22, 2, 30, 2, 457, 5, 11, 15, 4, 8, 0, 2, 0, 18, 116, 2, 1, 3, 3, 9, 0, 2, 2, 2, 0, 2, 19, 2, 82, 2, 138, 2, 4, 3, 155, 12, 37, 3, 0, 8, 38, 10, 44, 2, 0, 2, 1, 2, 1, 2, 0, 9, 26, 6, 2, 30, 10, 7, 61, 2, 9, 5, 101, 2, 7, 3, 9, 2, 18, 3, 0, 17, 58, 3, 100, 15, 53, 5, 0, 6, 45, 211, 57, 3, 18, 2, 5, 3, 11, 3, 9, 2, 1, 7, 6, 2, 2, 2, 7, 3, 1, 3, 21, 2, 6, 2, 0, 4, 3, 3, 8, 3, 1, 3, 3, 9, 0, 5, 1, 2, 4, 3, 11, 16, 2, 2, 5, 5, 1, 3, 21, 2, 6, 2, 1, 2, 1, 2, 1, 3, 0, 2, 4, 5, 1, 3, 2, 4, 0, 8, 3, 2, 0, 8, 15, 12, 2, 2, 8, 2, 2, 2, 21, 2, 6, 2, 1, 2, 4, 3, 9, 2, 2, 2, 2, 3, 0, 16, 3, 3, 9, 18, 2, 2, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 3, 8, 3, 1, 3, 2, 9, 1, 5, 1, 2, 4, 3, 9, 2, 0, 17, 1, 2, 5, 4, 2, 2, 3, 4, 1, 2, 0, 2, 1, 4, 1, 4, 2, 4, 11, 5, 4, 4, 2, 2, 3, 3, 0, 7, 0, 15, 9, 18, 2, 2, 7, 2, 2, 2, 22, 2, 9, 2, 4, 4, 7, 2, 2, 2, 3, 8, 1, 2, 1, 7, 3, 3, 9, 19, 1, 2, 7, 2, 2, 2, 22, 2, 9, 2, 4, 3, 8, 2, 2, 2, 3, 8, 1, 8, 0, 2, 3, 3, 9, 19, 1, 2, 7, 2, 2, 2, 22, 2, 15, 4, 7, 2, 2, 2, 3, 10, 0, 9, 3, 3, 9, 11, 5, 3, 1, 2, 17, 4, 23, 2, 8, 2, 0, 3, 6, 4, 0, 5, 5, 2, 0, 2, 7, 19, 1, 14, 57, 6, 14, 2, 9, 40, 1, 2, 0, 3, 1, 2, 0, 3, 0, 7, 3, 2, 6, 2, 2, 2, 0, 2, 0, 3, 1, 2, 12, 2, 2, 3, 4, 2, 0, 2, 5, 3, 9, 3, 1, 35, 0, 24, 1, 7, 9, 12, 0, 2, 0, 2, 0, 5, 9, 2, 35, 5, 19, 2, 5, 5, 7, 2, 35, 10, 0, 58, 73, 7, 77, 3, 37, 11, 42, 2, 0, 4, 328, 2, 3, 3, 6, 2, 0, 2, 3, 3, 40, 2, 3, 3, 32, 2, 3, 3, 6, 2, 0, 2, 3, 3, 14, 2, 56, 2, 3, 3, 66, 5, 0, 33, 15, 17, 84, 13, 619, 3, 16, 2, 25, 6, 74, 22, 12, 2, 6, 12, 20, 12, 19, 13, 12, 2, 2, 2, 1, 13, 51, 3, 29, 4, 0, 5, 1, 3, 9, 34, 2, 3, 9, 7, 87, 9, 42, 6, 69, 11, 28, 4, 11, 5, 11, 11, 39, 3, 4, 12, 43, 5, 25, 7, 10, 38, 27, 5, 62, 2, 28, 3, 10, 7, 9, 14, 0, 89, 75, 5, 9, 18, 8, 13, 42, 4, 11, 71, 55, 9, 9, 4, 48, 83, 2, 2, 30, 14, 230, 23, 280, 3, 5, 3, 37, 3, 5, 3, 7, 2, 0, 2, 0, 2, 0, 2, 30, 3, 52, 2, 6, 2, 0, 4, 2, 2, 6, 4, 3, 3, 5, 5, 12, 6, 2, 2, 6, 67, 1, 20, 0, 29, 0, 14, 0, 17, 4, 60, 12, 5, 0, 4, 11, 18, 0, 5, 0, 3, 9, 2, 0, 4, 4, 7, 0, 2, 0, 2, 0, 2, 3, 2, 10, 3, 3, 6, 4, 5, 0, 53, 1, 2684, 46, 2, 46, 2, 132, 7, 6, 15, 37, 11, 53, 10, 0, 17, 22, 10, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 31, 48, 0, 470, 1, 36, 5, 2, 4, 6, 1, 5, 85, 3, 1, 3, 2, 2, 89, 2, 3, 6, 40, 4, 93, 18, 23, 57, 15, 513, 6581, 75, 20939, 53, 1164, 68, 45, 3, 268, 4, 27, 21, 31, 3, 13, 13, 1, 2, 24, 9, 69, 11, 1, 38, 8, 3, 102, 3, 1, 111, 44, 25, 51, 13, 68, 12, 9, 7, 23, 4, 0, 5, 45, 3, 35, 13, 28, 4, 64, 15, 10, 39, 54, 10, 13, 3, 9, 7, 22, 4, 1, 5, 66, 25, 2, 227, 42, 2, 1, 3, 9, 7, 11171, 13, 22, 5, 48, 8453, 301, 3, 61, 3, 105, 39, 6, 13, 4, 6, 11, 2, 12, 2, 4, 2, 0, 2, 1, 2, 1, 2, 107, 34, 362, 19, 63, 3, 53, 41, 11, 5, 15, 17, 6, 13, 1, 25, 2, 33, 4, 2, 134, 20, 9, 8, 25, 5, 0, 2, 25, 12, 88, 4, 5, 3, 5, 3, 5, 3, 2], o = 0, r = [], s = 0; s < i.length; s += 2) r.push(o += i[s]), i[s + 1] && r.push(45, o += i[s + 1]);
                    t.wordChars = String.fromCharCode.apply(null, r);
                }), ace.define("ace/mode/text", ["require", "exports", "module", "ace/config", "ace/tokenizer", "ace/mode/text_highlight_rules", "ace/mode/behaviour/cstyle", "ace/unicode", "ace/lib/lang", "ace/token_iterator", "ace/range"], function(e, t, n) {
                    "use strict";
                    var i = e("../config"),
                        o = e("../tokenizer").Tokenizer,
                        r = e("./text_highlight_rules").TextHighlightRules,
                        s = e("./behaviour/cstyle").CstyleBehaviour,
                        a = e("../unicode"),
                        l = e("../lib/lang"),
                        c = e("../token_iterator").TokenIterator,
                        u = e("../range").Range,
                        d = function() {
                            this.HighlightRules = r;
                        };
                    (function() {
                        this.$defaultBehaviour = new s, this.tokenRe = new RegExp("^[" + a.wordChars + "\\$_]+", "g"), this.nonTokenRe = new RegExp("^(?:[^" + a.wordChars + "\\$_]|\\s])+", "g"), this.getTokenizer = function() {
                            return this.$tokenizer || (this.$highlightRules = this.$highlightRules || new this.HighlightRules(this.$highlightRuleConfig), this.$tokenizer = new o(this.$highlightRules.getRules())), this.$tokenizer;
                        }, this.lineCommentStart = "", this.blockComment = "", this.toggleCommentLines = function(e, t, n, i) {
                            var o = t.doc,
                                r = true,
                                s = true,
                                a = Infinity,
                                c = t.getTabSize(),
                                u = false;
                            if (this.lineCommentStart) {
                                if (Array.isArray(this.lineCommentStart)) m = this.lineCommentStart.map(l.escapeRegExp).join("|"), f = this.lineCommentStart[0];
                                else m = l.escapeRegExp(this.lineCommentStart), f = this.lineCommentStart;
                                m = new RegExp("^(\\s*)(?:" + m + ") ?"), u = t.getUseSoftTabs();
                                b = function(e, t) {
                                    var n = e.match(m);
                                    if (n) {
                                        var i = n[1].length,
                                            r = n[0].length;
                                        h(e, i, r) || " " != n[0][r - 1] || r--, o.removeInLine(t, i, r);
                                    }
                                };
                                var d = f + " ",
                                    h = (v = function(e, t) {
                                        r && !/\S/.test(e) || (h(e, a, a) ? o.insertInLine({
                                            row: t,
                                            column: a
                                        }, d) : o.insertInLine({
                                            row: t,
                                            column: a
                                        }, f));
                                    }, y = function(e, t) {
                                        return m.test(e);
                                    }, function(e, t, n) {
                                        var i = 0;
                                        while (t-- && " " == e.charAt(t)) i++;
                                        if (i % c != 0) return false;
                                        i = 0;
                                        while (" " == e.charAt(n++)) i++;
                                        return c > 2 ? i % c != c - 1 : i % c == 0;
                                    });
                            } else {
                                if (!this.blockComment) return false;
                                var f = this.blockComment.start,
                                    p = this.blockComment.end,
                                    m = new RegExp("^(\\s*)(?:" + l.escapeRegExp(f) + ")"),
                                    g = new RegExp("(?:" + l.escapeRegExp(p) + ")\\s*$"),
                                    v = function(e, t) {
                                        y(e, t) || r && !/\S/.test(e) || (o.insertInLine({
                                            row: t,
                                            column: e.length
                                        }, p), o.insertInLine({
                                            row: t,
                                            column: a
                                        }, f));
                                    },
                                    b = function(e, t) {
                                        var n;
                                        (n = e.match(g)) && o.removeInLine(t, e.length - n[0].length, e.length), (n = e.match(m)) && o.removeInLine(t, n[1].length, n[0].length);
                                    },
                                    y = function(e, n) {
                                        if (m.test(e)) return true;
                                        for (var i = t.getTokens(n), o = 0; o < i.length; o++)
                                            if ("comment" === i[o].type) return true;
                                    };
                            }

                            function w(e) {
                                for (var t = n; t <= i; t++) e(o.getLine(t), t);
                            }
                            var x = Infinity;
                            w(function(e, t) {
                                var n = e.search(/\S/); -
                                1 !== n ? (n < a && (a = n), s && !y(e, t) && (s = false)) : x > e.length && (x = e.length);
                            }), a == Infinity && (a = x, r = false, s = false), u && a % c != 0 && (a = Math.floor(a / c) * c), w(s ? b : v);
                        }, this.toggleBlockComment = function(e, t, n, i) {
                            var o = this.blockComment;
                            if (o) {
                                !o.start && o[0] && (o = o[0]);
                                var r, s, a = new c(t, i.row, i.column),
                                    l = a.getCurrentToken(),
                                    d = (t.selection, t.selection.toOrientedRange());
                                if (l && /comment/.test(l.type)) {
                                    var h, f;
                                    while (l && /comment/.test(l.type)) {
                                        var p = l.value.indexOf(o.start);
                                        if (-1 != p) {
                                            var m = a.getCurrentTokenRow(),
                                                g = a.getCurrentTokenColumn() + p;
                                            h = new u(m, g, m, g + o.start.length);
                                            break;
                                        }
                                        l = a.stepBackward();
                                    }
                                    a = new c(t, i.row, i.column), l = a.getCurrentToken();
                                    while (l && /comment/.test(l.type)) {
                                        p = l.value.indexOf(o.end);
                                        if (-1 != p) {
                                            m = a.getCurrentTokenRow(), g = a.getCurrentTokenColumn() + p;
                                            f = new u(m, g, m, g + o.end.length);
                                            break;
                                        }
                                        l = a.stepForward();
                                    }
                                    f && t.remove(f), h && (t.remove(h), r = h.start.row, s = -o.start.length);
                                } else s = o.start.length, r = n.start.row, t.insert(n.end, o.end), t.insert(n.start, o.start);
                                d.start.row == r && (d.start.column += s), d.end.row == r && (d.end.column += s), t.selection.fromOrientedRange(d);
                            }
                        }, this.getNextLineIndent = function(e, t, n) {
                            return this.$getIndent(t);
                        }, this.checkOutdent = function(e, t, n) {
                            return false;
                        }, this.autoOutdent = function(e, t, n) {}, this.$getIndent = function(e) {
                            return e.match(/^\s*/)[0];
                        }, this.createWorker = function(e) {
                            return null;
                        }, this.createModeDelegates = function(e) {
                            for (var t in this.$embeds = [], this.$modes = {}, e)
                                if (e[t]) {
                                    var n = e[t],
                                        o = n.prototype.$id,
                                        r = i.$modes[o];
                                    r || (i.$modes[o] = r = new n), i.$modes[t] || (i.$modes[t] = r), this.$embeds.push(t), this.$modes[t] = r;
                                }
                            var s = ["toggleBlockComment", "toggleCommentLines", "getNextLineIndent", "checkOutdent", "autoOutdent", "transformAction", "getCompletions"];
                            for (t = 0; t < s.length; t++)(function(e) {
                                var n = s[t],
                                    i = e[n];
                                e[s[t]] = function() {
                                    return this.$delegator(n, arguments, i);
                                };
                            }(this));
                        }, this.$delegator = function(e, t, n) {
                            var i = t[0] || "start";
                            if ("string" != typeof i) {
                                if (Array.isArray(i[2])) {
                                    var o = i[2][i[2].length - 1],
                                        r = this.$modes[o];
                                    if (r) return r[e].apply(r, [i[1]].concat([].slice.call(t, 1)));
                                }
                                i = i[0] || "start";
                            }
                            for (var s = 0; s < this.$embeds.length; s++)
                                if (this.$modes[this.$embeds[s]]) {
                                    var a = i.split(this.$embeds[s]);
                                    if (!a[0] && a[1]) {
                                        t[0] = a[1];
                                        r = this.$modes[this.$embeds[s]];
                                        return r[e].apply(r, t);
                                    }
                                }
                            var l = n.apply(this, t);
                            return n ? l : undefined;
                        }, this.transformAction = function(e, t, n, i, o) {
                            if (this.$behaviour) {
                                var r = this.$behaviour.getBehaviours();
                                for (var s in r)
                                    if (r[s][t]) {
                                        var a = r[s][t].apply(this, arguments);
                                        if (a) return a;
                                    }
                            }
                        }, this.getKeywords = function(e) {
                            if (!this.completionKeywords) {
                                var t = this.$tokenizer.rules,
                                    n = [];
                                for (var i in t)
                                    for (var o = t[i], r = 0, s = o.length; r < s; r++)
                                        if ("string" === typeof o[r].token) /keyword|support|storage/.test(o[r].token) && n.push(o[r].regex);
                                        else if ("object" === typeof o[r].token)
                                    for (var a = 0, l = o[r].token.length; a < l; a++)
                                        if (/keyword|support|storage/.test(o[r].token[a])) {
                                            i = o[r].regex.match(/\(.+?\)/g)[a];
                                            n.push(i.substr(1, i.length - 2));
                                        }
                                this.completionKeywords = n;
                            }
                            return e ? n.concat(this.$keywordList || []) : this.$keywordList;
                        }, this.$createKeywordList = function() {
                            return this.$highlightRules || this.getTokenizer(), this.$keywordList = this.$highlightRules.$keywordList || [];
                        }, this.getCompletions = function(e, t, n, i) {
                            var o = this.$keywordList || this.$createKeywordList();
                            return o.map(function(e) {
                                return {
                                    name: e,
                                    value: e,
                                    score: 0,
                                    meta: "keyword"
                                };
                            });
                        }, this.$id = "ace/mode/text";
                    }.call(d.prototype), t.Mode = d);
                }), ace.define("ace/apply_delta", ["require", "exports", "module"], function(e, t, n) {
                    "use strict";
                    t.applyDelta = function(e, t, n) {
                        var i = t.start.row,
                            o = t.start.column,
                            r = e[i] || "";
                        switch (t.action) {
                            case "insert":
                                var s = t.lines;
                                if (1 === s.length) e[i] = r.substring(0, o) + t.lines[0] + r.substring(o);
                                else {
                                    var a = [i, 1].concat(t.lines);
                                    e.splice.apply(e, a), e[i] = r.substring(0, o) + e[i], e[i + t.lines.length - 1] += r.substring(o);
                                }
                                break;
                            case "remove":
                                var l = t.end.column,
                                    c = t.end.row;
                                i === c ? e[i] = r.substring(0, o) + r.substring(l) : e.splice(i, c - i + 1, r.substring(0, o) + e[c].substring(l));
                                break;
                        }
                    };
                }), ace.define("ace/anchor", ["require", "exports", "module", "ace/lib/oop", "ace/lib/event_emitter"], function(e, t, n) {
                    "use strict";
                    var i = e("./lib/oop"),
                        o = e("./lib/event_emitter").EventEmitter,
                        r = t.Anchor = function(e, t, n) {
                            this.$onChange = this.onChange.bind(this), this.attach(e), "undefined" == typeof n ? this.setPosition(t.row, t.column) : this.setPosition(t, n);
                        };
                    (function() {
                        function e(e, t, n) {
                            var i = n ? e.column <= t.column : e.column < t.column;
                            return e.row < t.row || e.row == t.row && i;
                        }

                        function t(t, n, i) {
                            var o = "insert" == t.action,
                                r = (o ? 1 : -1) * (t.end.row - t.start.row),
                                s = (o ? 1 : -1) * (t.end.column - t.start.column),
                                a = t.start,
                                l = o ? a : t.end;
                            return e(n, a, i) ? {
                                row: n.row,
                                column: n.column
                            } : e(l, n, !i) ? {
                                row: n.row + r,
                                column: n.column + (n.row == l.row ? s : 0)
                            } : {
                                row: a.row,
                                column: a.column
                            };
                        }
                        i.implement(this, o), this.getPosition = function() {
                            return this.$clipPositionToDocument(this.row, this.column);
                        }, this.getDocument = function() {
                            return this.document;
                        }, this.$insertRight = false, this.onChange = function(e) {
                            if ((e.start.row != e.end.row || e.start.row == this.row) && !(e.start.row > this.row)) {
                                var n = t(e, {
                                    row: this.row,
                                    column: this.column
                                }, this.$insertRight);
                                this.setPosition(n.row, n.column, true);
                            }
                        }, this.setPosition = function(e, t, n) {
                            var i;
                            if (i = n ? {
                                    row: e,
                                    column: t
                                } : this.$clipPositionToDocument(e, t), this.row != i.row || this.column != i.column) {
                                var o = {
                                    row: this.row,
                                    column: this.column
                                };
                                this.row = i.row, this.column = i.column, this._signal("change", {
                                    old: o,
                                    value: i
                                });
                            }
                        }, this.detach = function() {
                            this.document.off("change", this.$onChange);
                        }, this.attach = function(e) {
                            this.document = e || this.document, this.document.on("change", this.$onChange);
                        }, this.$clipPositionToDocument = function(e, t) {
                            var n = {};
                            return e >= this.document.getLength() ? (n.row = Math.max(0, this.document.getLength() - 1), n.column = this.document.getLine(n.row).length) : e < 0 ? (n.row = 0, n.column = 0) : (n.row = e, n.column = Math.min(this.document.getLine(n.row).length, Math.max(0, t))), t < 0 && (n.column = 0), n;
                        };
                    }.call(r.prototype));
                }), ace.define("ace/document", ["require", "exports", "module", "ace/lib/oop", "ace/apply_delta", "ace/lib/event_emitter", "ace/range", "ace/anchor"], function(e, t, n) {
                    "use strict";
                    var i = e("./lib/oop"),
                        o = e("./apply_delta").applyDelta,
                        r = e("./lib/event_emitter").EventEmitter,
                        s = e("./range").Range,
                        a = e("./anchor").Anchor,
                        l = function(e) {
                            this.$lines = [""], 0 === e.length ? this.$lines = [""] : Array.isArray(e) ? this.insertMergedLines({
                                row: 0,
                                column: 0
                            }, e) : this.insert({
                                row: 0,
                                column: 0
                            }, e);
                        };
                    (function() {
                        i.implement(this, r), this.setValue = function(e) {
                            var t = this.getLength() - 1;
                            this.remove(new s(0, 0, t, this.getLine(t).length)), this.insert({
                                row: 0,
                                column: 0
                            }, e);
                        }, this.getValue = function() {
                            return this.getAllLines().join(this.getNewLineCharacter());
                        }, this.createAnchor = function(e, t) {
                            return new a(this, e, t);
                        }, 0 === "aaa".split(/a/).length ? this.$split = function(e) {
                            return e.replace(/\r\n|\r/g, "\n").split("\n");
                        } : this.$split = function(e) {
                            return e.split(/\r\n|\r|\n/);
                        }, this.$detectNewLine = function(e) {
                            var t = e.match(/^.*?(\r\n|\r|\n)/m);
                            this.$autoNewLine = t ? t[1] : "\n", this._signal("changeNewLineMode");
                        }, this.getNewLineCharacter = function() {
                            switch (this.$newLineMode) {
                                case "windows":
                                    return "\r\n";
                                case "unix":
                                    return "\n";
                                default:
                                    return this.$autoNewLine || "\n";
                            }
                        }, this.$autoNewLine = "", this.$newLineMode = "auto", this.setNewLineMode = function(e) {
                            this.$newLineMode !== e && (this.$newLineMode = e, this._signal("changeNewLineMode"));
                        }, this.getNewLineMode = function() {
                            return this.$newLineMode;
                        }, this.isNewLine = function(e) {
                            return "\r\n" == e || "\r" == e || "\n" == e;
                        }, this.getLine = function(e) {
                            return this.$lines[e] || "";
                        }, this.getLines = function(e, t) {
                            return this.$lines.slice(e, t + 1);
                        }, this.getAllLines = function() {
                            return this.getLines(0, this.getLength());
                        }, this.getLength = function() {
                            return this.$lines.length;
                        }, this.getTextRange = function(e) {
                            return this.getLinesForRange(e).join(this.getNewLineCharacter());
                        }, this.getLinesForRange = function(e) {
                            var t;
                            if (e.start.row === e.end.row) t = [this.getLine(e.start.row).substring(e.start.column, e.end.column)];
                            else {
                                t = this.getLines(e.start.row, e.end.row), t[0] = (t[0] || "").substring(e.start.column);
                                var n = t.length - 1;
                                e.end.row - e.start.row == n && (t[n] = t[n].substring(0, e.end.column));
                            }
                            return t;
                        }, this.insertLines = function(e, t) {
                            return console.warn("Use of document.insertLines is deprecated. Use the insertFullLines method instead."), this.insertFullLines(e, t);
                        }, this.removeLines = function(e, t) {
                            return console.warn("Use of document.removeLines is deprecated. Use the removeFullLines method instead."), this.removeFullLines(e, t);
                        }, this.insertNewLine = function(e) {
                            return console.warn("Use of document.insertNewLine is deprecated. Use insertMergedLines(position, ['', '']) instead."), this.insertMergedLines(e, ["", ""]);
                        }, this.insert = function(e, t) {
                            return this.getLength() <= 1 && this.$detectNewLine(t), this.insertMergedLines(e, this.$split(t));
                        }, this.insertInLine = function(e, t) {
                            var n = this.clippedPos(e.row, e.column),
                                i = this.pos(e.row, e.column + t.length);
                            return this.applyDelta({
                                start: n,
                                end: i,
                                action: "insert",
                                lines: [t]
                            }, true), this.clonePos(i);
                        }, this.clippedPos = function(e, t) {
                            var n = this.getLength();
                            undefined === e ? e = n : e < 0 ? e = 0 : e >= n && (e = n - 1, t = undefined);
                            var i = this.getLine(e);
                            return undefined == t && (t = i.length), t = Math.min(Math.max(t, 0), i.length), {
                                row: e,
                                column: t
                            };
                        }, this.clonePos = function(e) {
                            return {
                                row: e.row,
                                column: e.column
                            };
                        }, this.pos = function(e, t) {
                            return {
                                row: e,
                                column: t
                            };
                        }, this.$clipPosition = function(e) {
                            var t = this.getLength();
                            return e.row >= t ? (e.row = Math.max(0, t - 1), e.column = this.getLine(t - 1).length) : (e.row = Math.max(0, e.row), e.column = Math.min(Math.max(e.column, 0), this.getLine(e.row).length)), e;
                        }, this.insertFullLines = function(e, t) {
                            e = Math.min(Math.max(e, 0), this.getLength());
                            var n = 0;
                            e < this.getLength() ? (t = t.concat([""]), n = 0) : (t = [""].concat(t), e--, n = this.$lines[e].length), this.insertMergedLines({
                                row: e,
                                column: n
                            }, t);
                        }, this.insertMergedLines = function(e, t) {
                            var n = this.clippedPos(e.row, e.column),
                                i = {
                                    row: n.row + t.length - 1,
                                    column: (1 == t.length ? n.column : 0) + t[t.length - 1].length
                                };
                            return this.applyDelta({
                                start: n,
                                end: i,
                                action: "insert",
                                lines: t
                            }), this.clonePos(i);
                        }, this.remove = function(e) {
                            var t = this.clippedPos(e.start.row, e.start.column),
                                n = this.clippedPos(e.end.row, e.end.column);
                            return this.applyDelta({
                                start: t,
                                end: n,
                                action: "remove",
                                lines: this.getLinesForRange({
                                    start: t,
                                    end: n
                                })
                            }), this.clonePos(t);
                        }, this.removeInLine = function(e, t, n) {
                            var i = this.clippedPos(e, t),
                                o = this.clippedPos(e, n);
                            return this.applyDelta({
                                start: i,
                                end: o,
                                action: "remove",
                                lines: this.getLinesForRange({
                                    start: i,
                                    end: o
                                })
                            }, true), this.clonePos(i);
                        }, this.removeFullLines = function(e, t) {
                            e = Math.min(Math.max(0, e), this.getLength() - 1), t = Math.min(Math.max(0, t), this.getLength() - 1);
                            var n = t == this.getLength() - 1 && e > 0,
                                i = t < this.getLength() - 1,
                                o = n ? e - 1 : e,
                                r = n ? this.getLine(o).length : 0,
                                a = i ? t + 1 : t,
                                l = i ? 0 : this.getLine(a).length,
                                c = new s(o, r, a, l),
                                u = this.$lines.slice(e, t + 1);
                            return this.applyDelta({
                                start: c.start,
                                end: c.end,
                                action: "remove",
                                lines: this.getLinesForRange(c)
                            }), u;
                        }, this.removeNewLine = function(e) {
                            e < this.getLength() - 1 && e >= 0 && this.applyDelta({
                                start: this.pos(e, this.getLine(e).length),
                                end: this.pos(e + 1, 0),
                                action: "remove",
                                lines: ["", ""]
                            });
                        }, this.replace = function(e, t) {
                            return e instanceof s || (e = s.fromPoints(e.start, e.end)), 0 === t.length && e.isEmpty() ? e.start : t == this.getTextRange(e) ? e.end : (this.remove(e), n = t ? this.insert(e.start, t) : e.start, n);
                            var n;
                        }, this.applyDeltas = function(e) {
                            for (var t = 0; t < e.length; t++) this.applyDelta(e[t]);
                        }, this.revertDeltas = function(e) {
                            for (var t = e.length - 1; t >= 0; t--) this.revertDelta(e[t]);
                        }, this.applyDelta = function(e, t) {
                            var n = "insert" == e.action;
                            (n ? e.lines.length <= 1 && !e.lines[0] : !s.comparePoints(e.start, e.end)) || (n && e.lines.length > 2e4 ? this.$splitAndapplyLargeDelta(e, 2e4) : (o(this.$lines, e, t), this._signal("change", e)));
                        }, this.$safeApplyDelta = function(e) {
                            var t = this.$lines.length;
                            ("remove" == e.action && e.start.row < t && e.end.row < t || "insert" == e.action && e.start.row <= t) && this.applyDelta(e);
                        }, this.$splitAndapplyLargeDelta = function(e, t) {
                            for (var n = e.lines, i = n.length - t + 1, o = e.start.row, r = e.start.column, s = 0, a = 0; s < i; s = a) {
                                a += t - 1;
                                var l = n.slice(s, a);
                                l.push(""), this.applyDelta({
                                    start: this.pos(o + s, r),
                                    end: this.pos(o + a, r = 0),
                                    action: e.action,
                                    lines: l
                                }, true);
                            }
                            e.lines = n.slice(s), e.start.row = o + s, e.start.column = r, this.applyDelta(e, true);
                        }, this.revertDelta = function(e) {
                            this.$safeApplyDelta({
                                start: this.clonePos(e.start),
                                end: this.clonePos(e.end),
                                action: "insert" == e.action ? "remove" : "insert",
                                lines: e.lines.slice()
                            });
                        }, this.indexToPosition = function(e, t) {
                            for (var n = this.$lines || this.getAllLines(), i = this.getNewLineCharacter().length, o = t || 0, r = n.length; o < r; o++)
                                if (e -= n[o].length + i, e < 0) return {
                                    row: o,
                                    column: e + n[o].length + i
                                };
                            return {
                                row: r - 1,
                                column: e + n[r - 1].length + i
                            };
                        }, this.positionToIndex = function(e, t) {
                            for (var n = this.$lines || this.getAllLines(), i = this.getNewLineCharacter().length, o = 0, r = Math.min(e.row, n.length), s = t || 0; s < r; ++s) o += n[s].length + i;
                            return o + e.column;
                        };
                    }.call(l.prototype), t.Document = l);
                }), ace.define("ace/background_tokenizer", ["require", "exports", "module", "ace/lib/oop", "ace/lib/event_emitter"], function(e, t, n) {
                    "use strict";
                    var i = e("./lib/oop"),
                        o = e("./lib/event_emitter").EventEmitter,
                        r = function(e, t) {
                            this.running = false, this.lines = [], this.states = [], this.currentLine = 0, this.tokenizer = e;
                            var n = this;
                            this.$worker = function() {
                                if (n.running) {
                                    var e = new Date,
                                        t = n.currentLine,
                                        i = -1,
                                        o = n.doc,
                                        r = t;
                                    while (n.lines[t]) t++;
                                    var s = o.getLength(),
                                        a = 0;
                                    n.running = false;
                                    while (t < s) {
                                        n.$tokenizeRow(t), i = t;
                                        do {
                                            t++;
                                        } while (n.lines[t]);
                                        if (a++, a % 5 === 0 && new Date - e > 20) {
                                            n.running = setTimeout(n.$worker, 20);
                                            break;
                                        }
                                    }
                                    n.currentLine = t, -1 == i && (i = t), r <= i && n.fireUpdateEvent(r, i);
                                }
                            };
                        };
                    (function() {
                        i.implement(this, o), this.setTokenizer = function(e) {
                            this.tokenizer = e, this.lines = [], this.states = [], this.start(0);
                        }, this.setDocument = function(e) {
                            this.doc = e, this.lines = [], this.states = [], this.stop();
                        }, this.fireUpdateEvent = function(e, t) {
                            var n = {
                                first: e,
                                last: t
                            };
                            this._signal("update", {
                                data: n
                            });
                        }, this.start = function(e) {
                            this.currentLine = Math.min(e || 0, this.currentLine, this.doc.getLength()), this.lines.splice(this.currentLine, this.lines.length), this.states.splice(this.currentLine, this.states.length), this.stop(), this.running = setTimeout(this.$worker, 700);
                        }, this.scheduleStart = function() {
                            this.running || (this.running = setTimeout(this.$worker, 700));
                        }, this.$updateOnChange = function(e) {
                            var t = e.start.row,
                                n = e.end.row - t;
                            if (0 === n) this.lines[t] = null;
                            else if ("remove" == e.action) this.lines.splice(t, n + 1, null), this.states.splice(t, n + 1, null);
                            else {
                                var i = Array(n + 1);
                                i.unshift(t, 1), this.lines.splice.apply(this.lines, i), this.states.splice.apply(this.states, i);
                            }
                            this.currentLine = Math.min(t, this.currentLine, this.doc.getLength()), this.stop();
                        }, this.stop = function() {
                            this.running && clearTimeout(this.running), this.running = false;
                        }, this.getTokens = function(e) {
                            return this.lines[e] || this.$tokenizeRow(e);
                        }, this.getState = function(e) {
                            return this.currentLine == e && this.$tokenizeRow(e), this.states[e] || "start";
                        }, this.$tokenizeRow = function(e) {
                            var t = this.doc.getLine(e),
                                n = this.states[e - 1],
                                i = this.tokenizer.getLineTokens(t, n, e);
                            return this.states[e] + "" !== i.state + "" ? (this.states[e] = i.state, this.lines[e + 1] = null, this.currentLine > e + 1 && (this.currentLine = e + 1)) : this.currentLine == e && (this.currentLine = e + 1), this.lines[e] = i.tokens;
                        };
                    }.call(r.prototype), t.BackgroundTokenizer = r);
                }), ace.define("ace/search_highlight", ["require", "exports", "module", "ace/lib/lang", "ace/lib/oop", "ace/range"], function(e, t, n) {
                    "use strict";
                    var i = e("./lib/lang"),
                        o = (e("./lib/oop"), e("./range").Range),
                        r = function(e, t, n) {
                            this.setRegexp(e), this.clazz = t, this.type = n || "text";
                        };
                    (function() {
                        this.MAX_RANGES = 500, this.setRegexp = function(e) {
                            this.regExp + "" != e + "" && (this.regExp = e, this.cache = []);
                        }, this.update = function(e, t, n, r) {
                            if (this.regExp)
                                for (var s = r.firstRow, a = r.lastRow, l = s; l <= a; l++) {
                                    var c = this.cache[l];
                                    null == c && (c = i.getMatchOffsets(n.getLine(l), this.regExp), c.length > this.MAX_RANGES && (c = c.slice(0, this.MAX_RANGES)), c = c.map(function(e) {
                                        return new o(l, e.offset, l, e.offset + e.length);
                                    }), this.cache[l] = c.length ? c : "");
                                    for (var u = c.length; u--;) t.drawSingleLineMarker(e, c[u].toScreenRange(n), this.clazz, r);
                                }
                        };
                    }.call(r.prototype), t.SearchHighlight = r);
                }), ace.define("ace/edit_session/fold_line", ["require", "exports", "module", "ace/range"], function(e, t, n) {
                    "use strict";
                    var i = e("../range").Range;

                    function o(e, t) {
                        this.foldData = e, Array.isArray(t) ? this.folds = t : t = this.folds = [t];
                        var n = t[t.length - 1];
                        this.range = new i(t[0].start.row, t[0].start.column, n.end.row, n.end.column), this.start = this.range.start, this.end = this.range.end, this.folds.forEach(function(e) {
                            e.setFoldLine(this);
                        }, this);
                    }
                    (function() {
                        this.shiftRow = function(e) {
                            this.start.row += e, this.end.row += e, this.folds.forEach(function(t) {
                                t.start.row += e, t.end.row += e;
                            });
                        }, this.addFold = function(e) {
                            if (e.sameRow) {
                                if (e.start.row < this.startRow || e.endRow > this.endRow) throw new Error("Can't add a fold to this FoldLine as it has no connection");
                                this.folds.push(e), this.folds.sort(function(e, t) {
                                    return -e.range.compareEnd(t.start.row, t.start.column);
                                }), this.range.compareEnd(e.start.row, e.start.column) > 0 ? (this.end.row = e.end.row, this.end.column = e.end.column) : this.range.compareStart(e.end.row, e.end.column) < 0 && (this.start.row = e.start.row, this.start.column = e.start.column);
                            } else if (e.start.row == this.end.row) this.folds.push(e), this.end.row = e.end.row, this.end.column = e.end.column;
                            else {
                                if (e.end.row != this.start.row) throw new Error("Trying to add fold to FoldRow that doesn't have a matching row");
                                this.folds.unshift(e), this.start.row = e.start.row, this.start.column = e.start.column;
                            }
                            e.foldLine = this;
                        }, this.containsRow = function(e) {
                            return e >= this.start.row && e <= this.end.row;
                        }, this.walk = function(e, t, n) {
                            var i, o, r, s = 0,
                                a = this.folds,
                                l = true;
                            null == t && (t = this.end.row, n = this.end.column);
                            for (var c = 0; c < a.length; c++) {
                                if (i = a[c], o = i.range.compareStart(t, n), -1 == o) return void e(null, t, n, s, l);
                                if (r = e(null, i.start.row, i.start.column, s, l), r = !r && e(i.placeholder, i.start.row, i.start.column, s), r || 0 === o) return;
                                l = !i.sameRow, s = i.end.column;
                            }
                            e(null, t, n, s, l);
                        }, this.getNextFoldTo = function(e, t) {
                            for (var n, i, o = 0; o < this.folds.length; o++) {
                                if (n = this.folds[o], i = n.range.compareEnd(e, t), -1 == i) return {
                                    fold: n,
                                    kind: "after"
                                };
                                if (0 === i) return {
                                    fold: n,
                                    kind: "inside"
                                };
                            }
                            return null;
                        }, this.addRemoveChars = function(e, t, n) {
                            var i, o, r = this.getNextFoldTo(e, t);
                            if (r)
                                if (i = r.fold, "inside" == r.kind && i.start.column != t && i.start.row != e) window.console && window.console.log(e, t, i);
                                else if (i.start.row == e) {
                                o = this.folds;
                                var s = o.indexOf(i);
                                for (0 === s && (this.start.column += n), s; s < o.length; s++) {
                                    if (i = o[s], i.start.column += n, !i.sameRow) return;
                                    i.end.column += n;
                                }
                                this.end.column += n;
                            }
                        }, this.split = function(e, t) {
                            var n = this.getNextFoldTo(e, t);
                            if (!n || "inside" == n.kind) return null;
                            var i = n.fold,
                                r = this.folds,
                                s = this.foldData,
                                a = r.indexOf(i),
                                l = r[a - 1];
                            this.end.row = l.end.row, this.end.column = l.end.column, r = r.splice(a, r.length - a);
                            var c = new o(s, r);
                            return s.splice(s.indexOf(this) + 1, 0, c), c;
                        }, this.merge = function(e) {
                            for (var t = e.folds, n = 0; n < t.length; n++) this.addFold(t[n]);
                            var i = this.foldData;
                            i.splice(i.indexOf(e), 1);
                        }, this.toString = function() {
                            var e = [this.range.toString() + ": ["];
                            return this.folds.forEach(function(t) {
                                e.push("  " + t.toString());
                            }), e.push("]"), e.join("\n");
                        }, this.idxToPosition = function(e) {
                            for (var t = 0, n = 0; n < this.folds.length; n++) {
                                var i = this.folds[n];
                                if (e -= i.start.column - t, e < 0) return {
                                    row: i.start.row,
                                    column: i.start.column + e
                                };
                                if (e -= i.placeholder.length, e < 0) return i.start;
                                t = i.end.column;
                            }
                            return {
                                row: this.end.row,
                                column: this.end.column + e
                            };
                        };
                    }.call(o.prototype), t.FoldLine = o);
                }), ace.define("ace/range_list", ["require", "exports", "module", "ace/range"], function(e, t, n) {
                    "use strict";
                    var i = e("./range").Range,
                        o = i.comparePoints,
                        r = function() {
                            this.ranges = [], this.$bias = 1;
                        };
                    (function() {
                        this.comparePoints = o, this.pointIndex = function(e, t, n) {
                            for (var i = this.ranges, r = n || 0; r < i.length; r++) {
                                var s = i[r],
                                    a = o(e, s.end);
                                if (!(a > 0)) {
                                    var l = o(e, s.start);
                                    return 0 === a ? t && 0 !== l ? -r - 2 : r : l > 0 || 0 === l && !t ? r : -r - 1;
                                }
                            }
                            return -r - 1;
                        }, this.add = function(e) {
                            var t = !e.isEmpty(),
                                n = this.pointIndex(e.start, t);
                            n < 0 && (n = -n - 1);
                            var i = this.pointIndex(e.end, t, n);
                            return i < 0 ? i = -i - 1 : i++, this.ranges.splice(n, i - n, e);
                        }, this.addList = function(e) {
                            for (var t = [], n = e.length; n--;) t.push.apply(t, this.add(e[n]));
                            return t;
                        }, this.substractPoint = function(e) {
                            var t = this.pointIndex(e);
                            if (t >= 0) return this.ranges.splice(t, 1);
                        }, this.merge = function() {
                            var e = [],
                                t = this.ranges;
                            t = t.sort(function(e, t) {
                                return o(e.start, t.start);
                            });
                            for (var n, i = t[0], r = 1; r < t.length; r++) {
                                n = i, i = t[r];
                                var s = o(n.end, i.start);
                                s < 0 || (0 != s || n.isEmpty() || i.isEmpty()) && (o(n.end, i.end) < 0 && (n.end.row = i.end.row, n.end.column = i.end.column), t.splice(r, 1), e.push(i), i = n, r--);
                            }
                            return this.ranges = t, e;
                        }, this.contains = function(e, t) {
                            return this.pointIndex({
                                row: e,
                                column: t
                            }) >= 0;
                        }, this.containsPoint = function(e) {
                            return this.pointIndex(e) >= 0;
                        }, this.rangeAtPoint = function(e) {
                            var t = this.pointIndex(e);
                            if (t >= 0) return this.ranges[t];
                        }, this.clipRows = function(e, t) {
                            var n = this.ranges;
                            if (n[0].start.row > t || n[n.length - 1].start.row < e) return [];
                            var i = this.pointIndex({
                                row: e,
                                column: 0
                            });
                            i < 0 && (i = -i - 1);
                            var o = this.pointIndex({
                                row: t,
                                column: 0
                            }, i);
                            o < 0 && (o = -o - 1);
                            for (var r = [], s = i; s < o; s++) r.push(n[s]);
                            return r;
                        }, this.removeAll = function() {
                            return this.ranges.splice(0, this.ranges.length);
                        }, this.attach = function(e) {
                            this.session && this.detach(), this.session = e, this.onChange = this.$onChange.bind(this), this.session.on("change", this.onChange);
                        }, this.detach = function() {
                            this.session && (this.session.removeListener("change", this.onChange), this.session = null);
                        }, this.$onChange = function(e) {
                            for (var t = e.start, n = e.end, i = t.row, o = n.row, r = this.ranges, s = 0, a = r.length; s < a; s++) {
                                var l = r[s];
                                if (l.end.row >= i) break;
                            }
                            if ("insert" == e.action)
                                for (var c = o - i, u = -t.column + n.column; s < a; s++) {
                                    l = r[s];
                                    if (l.start.row > i) break;
                                    if (l.start.row == i && l.start.column >= t.column && (l.start.column == t.column && this.$bias <= 0 || (l.start.column += u, l.start.row += c)), l.end.row == i && l.end.column >= t.column) {
                                        if (l.end.column == t.column && this.$bias < 0) continue;
                                        l.end.column == t.column && u > 0 && s < a - 1 && l.end.column > l.start.column && l.end.column == r[s + 1].start.column && (l.end.column -= u), l.end.column += u, l.end.row += c;
                                    }
                                } else
                                    for (c = i - o, u = t.column - n.column; s < a; s++) {
                                        l = r[s];
                                        if (l.start.row > o) break;
                                        l.end.row < o && (i < l.end.row || i == l.end.row && t.column < l.end.column) ? (l.end.row = i, l.end.column = t.column) : l.end.row == o ? l.end.column <= n.column ? (c || l.end.column > t.column) && (l.end.column = t.column, l.end.row = t.row) : (l.end.column += u, l.end.row += c) : l.end.row > o && (l.end.row += c), l.start.row < o && (i < l.start.row || i == l.start.row && t.column < l.start.column) ? (l.start.row = i, l.start.column = t.column) : l.start.row == o ? l.start.column <= n.column ? (c || l.start.column > t.column) && (l.start.column = t.column, l.start.row = t.row) : (l.start.column += u, l.start.row += c) : l.start.row > o && (l.start.row += c);
                                    }
                            if (0 != c && s < a)
                                for (; s < a; s++) {
                                    l = r[s];
                                    l.start.row += c, l.end.row += c;
                                }
                        };
                    }.call(r.prototype), t.RangeList = r);
                }), ace.define("ace/edit_session/fold", ["require", "exports", "module", "ace/range_list", "ace/lib/oop"], function(e, t, n) {
                    "use strict";
                    var i = e("../range_list").RangeList,
                        o = e("../lib/oop"),
                        r = t.Fold = function(e, t) {
                            this.foldLine = null, this.placeholder = t, this.range = e, this.start = e.start, this.end = e.end, this.sameRow = e.start.row == e.end.row, this.subFolds = this.ranges = [];
                        };

                    function s(e, t) {
                        e.row -= t.row, 0 == e.row && (e.column -= t.column);
                    }

                    function a(e, t) {
                        s(e.start, t), s(e.end, t);
                    }

                    function l(e, t) {
                        0 == e.row && (e.column += t.column), e.row += t.row;
                    }

                    function c(e, t) {
                        l(e.start, t), l(e.end, t);
                    }
                    o.inherits(r, i),
                        function() {
                            this.toString = function() {
                                return '"' + this.placeholder + '" ' + this.range.toString();
                            }, this.setFoldLine = function(e) {
                                this.foldLine = e, this.subFolds.forEach(function(t) {
                                    t.setFoldLine(e);
                                });
                            }, this.clone = function() {
                                var e = this.range.clone(),
                                    t = new r(e, this.placeholder);
                                return this.subFolds.forEach(function(e) {
                                    t.subFolds.push(e.clone());
                                }), t.collapseChildren = this.collapseChildren, t;
                            }, this.addSubFold = function(e) {
                                if (!this.range.isEqual(e)) {
                                    a(e, this.start);
                                    for (var t = e.start.row, n = e.start.column, i = 0, o = -1; i < this.subFolds.length; i++)
                                        if (o = this.subFolds[i].range.compare(t, n), 1 != o) break;
                                    var r = this.subFolds[i],
                                        s = 0;
                                    if (0 == o) {
                                        if (r.range.containsRange(e)) return r.addSubFold(e);
                                        s = 1;
                                    }
                                    t = e.range.end.row, n = e.range.end.column;
                                    var l = i;
                                    for (o = -1; l < this.subFolds.length; l++)
                                        if (o = this.subFolds[l].range.compare(t, n), 1 != o) break;
                                    0 == o && l++;
                                    for (var c = this.subFolds.splice(i, l - i, e), u = 0 == o ? c.length - 1 : c.length, d = s; d < u; d++) e.addSubFold(c[d]);
                                    return e.setFoldLine(this.foldLine), e;
                                }
                            }, this.restoreRange = function(e) {
                                return c(e, this.start);
                            };
                        }.call(r.prototype);
                }), ace.define("ace/edit_session/folding", ["require", "exports", "module", "ace/range", "ace/edit_session/fold_line", "ace/edit_session/fold", "ace/token_iterator"], function(e, t, n) {
                    "use strict";
                    var i = e("../range").Range,
                        o = e("./fold_line").FoldLine,
                        r = e("./fold").Fold,
                        s = e("../token_iterator").TokenIterator;

                    function a() {
                        this.getFoldAt = function(e, t, n) {
                            var i = this.getFoldLine(e);
                            if (!i) return null;
                            for (var o = i.folds, r = 0; r < o.length; r++) {
                                var s = o[r].range;
                                if (s.contains(e, t)) {
                                    if (1 == n && s.isEnd(e, t) && !s.isEmpty()) continue;
                                    if (-1 == n && s.isStart(e, t) && !s.isEmpty()) continue;
                                    return o[r];
                                }
                            }
                        }, this.getFoldsInRange = function(e) {
                            var t = e.start,
                                n = e.end,
                                i = this.$foldData,
                                o = [];
                            t.column += 1, n.column -= 1;
                            for (var r = 0; r < i.length; r++) {
                                var s = i[r].range.compareRange(e);
                                if (2 != s) {
                                    if (-2 == s) break;
                                    for (var a = i[r].folds, l = 0; l < a.length; l++) {
                                        var c = a[l];
                                        if (s = c.range.compareRange(e), -2 == s) break;
                                        if (2 != s) {
                                            if (42 == s) break;
                                            o.push(c);
                                        }
                                    }
                                }
                            }
                            return t.column -= 1, n.column += 1, o;
                        }, this.getFoldsInRangeList = function(e) {
                            if (Array.isArray(e)) {
                                var t = [];
                                e.forEach(function(e) {
                                    t = t.concat(this.getFoldsInRange(e));
                                }, this);
                            } else t = this.getFoldsInRange(e);
                            return t;
                        }, this.getAllFolds = function() {
                            for (var e = [], t = this.$foldData, n = 0; n < t.length; n++)
                                for (var i = 0; i < t[n].folds.length; i++) e.push(t[n].folds[i]);
                            return e;
                        }, this.getFoldStringAt = function(e, t, n, i) {
                            if (i = i || this.getFoldLine(e), !i) return null;
                            for (var o, r, s = {
                                    end: {
                                        column: 0
                                    }
                                }, a = 0; a < i.folds.length; a++) {
                                r = i.folds[a];
                                var l = r.range.compareEnd(e, t);
                                if (-1 == l) {
                                    o = this.getLine(r.start.row).substring(s.end.column, r.start.column);
                                    break;
                                }
                                if (0 === l) return null;
                                s = r;
                            }
                            return o || (o = this.getLine(r.start.row).substring(s.end.column)), -1 == n ? o.substring(0, t - s.end.column) : 1 == n ? o.substring(t - s.end.column) : o;
                        }, this.getFoldLine = function(e, t) {
                            var n = this.$foldData,
                                i = 0;
                            for (t && (i = n.indexOf(t)), -1 == i && (i = 0), i; i < n.length; i++) {
                                var o = n[i];
                                if (o.start.row <= e && o.end.row >= e) return o;
                                if (o.end.row > e) return null;
                            }
                            return null;
                        }, this.getNextFoldLine = function(e, t) {
                            var n = this.$foldData,
                                i = 0;
                            for (t && (i = n.indexOf(t)), -1 == i && (i = 0), i; i < n.length; i++) {
                                var o = n[i];
                                if (o.end.row >= e) return o;
                            }
                            return null;
                        }, this.getFoldedRowCount = function(e, t) {
                            for (var n = this.$foldData, i = t - e + 1, o = 0; o < n.length; o++) {
                                var r = n[o],
                                    s = r.end.row,
                                    a = r.start.row;
                                if (s >= t) {
                                    a < t && (a >= e ? i -= t - a : i = 0);
                                    break;
                                }
                                s >= e && (i -= a >= e ? s - a : s - e + 1);
                            }
                            return i;
                        }, this.$addFoldLine = function(e) {
                            return this.$foldData.push(e), this.$foldData.sort(function(e, t) {
                                return e.start.row - t.start.row;
                            }), e;
                        }, this.addFold = function(e, t) {
                            var n, i = this.$foldData,
                                s = false;
                            e instanceof r ? n = e : (n = new r(t, e), n.collapseChildren = t.collapseChildren), this.$clipRangeToDocument(n.range);
                            var a = n.start.row,
                                l = n.start.column,
                                c = n.end.row,
                                u = n.end.column,
                                d = this.getFoldAt(a, l, 1),
                                h = this.getFoldAt(c, u, -1);
                            if (d && h == d) return d.addSubFold(n);
                            d && !d.range.isStart(a, l) && this.removeFold(d), h && !h.range.isEnd(c, u) && this.removeFold(h);
                            var f = this.getFoldsInRange(n.range);
                            f.length > 0 && (this.removeFolds(f), n.collapseChildren || f.forEach(function(e) {
                                n.addSubFold(e);
                            }));
                            for (var p = 0; p < i.length; p++) {
                                var m = i[p];
                                if (c == m.start.row) {
                                    m.addFold(n), s = true;
                                    break;
                                }
                                if (a == m.end.row) {
                                    if (m.addFold(n), s = true, !n.sameRow) {
                                        var g = i[p + 1];
                                        if (g && g.start.row == c) {
                                            m.merge(g);
                                            break;
                                        }
                                    }
                                    break;
                                }
                                if (c <= m.start.row) break;
                            }
                            return s || (m = this.$addFoldLine(new o(this.$foldData, n))), this.$useWrapMode ? this.$updateWrapData(m.start.row, m.start.row) : this.$updateRowLengthCache(m.start.row, m.start.row), this.$modified = true, this._signal("changeFold", {
                                data: n,
                                action: "add"
                            }), n;
                        }, this.addFolds = function(e) {
                            e.forEach(function(e) {
                                this.addFold(e);
                            }, this);
                        }, this.removeFold = function(e) {
                            var t = e.foldLine,
                                n = t.start.row,
                                i = t.end.row,
                                o = this.$foldData,
                                r = t.folds;
                            if (1 == r.length) o.splice(o.indexOf(t), 1);
                            else if (t.range.isEnd(e.end.row, e.end.column)) r.pop(), t.end.row = r[r.length - 1].end.row, t.end.column = r[r.length - 1].end.column;
                            else if (t.range.isStart(e.start.row, e.start.column)) r.shift(), t.start.row = r[0].start.row, t.start.column = r[0].start.column;
                            else if (e.sameRow) r.splice(r.indexOf(e), 1);
                            else {
                                var s = t.split(e.start.row, e.start.column);
                                r = s.folds, r.shift(), s.start.row = r[0].start.row, s.start.column = r[0].start.column;
                            }
                            this.$updating || (this.$useWrapMode ? this.$updateWrapData(n, i) : this.$updateRowLengthCache(n, i)), this.$modified = true, this._signal("changeFold", {
                                data: e,
                                action: "remove"
                            });
                        }, this.removeFolds = function(e) {
                            for (var t = [], n = 0; n < e.length; n++) t.push(e[n]);
                            t.forEach(function(e) {
                                this.removeFold(e);
                            }, this), this.$modified = true;
                        }, this.expandFold = function(e) {
                            this.removeFold(e), e.subFolds.forEach(function(t) {
                                e.restoreRange(t), this.addFold(t);
                            }, this), e.collapseChildren > 0 && this.foldAll(e.start.row + 1, e.end.row, e.collapseChildren - 1), e.subFolds = [];
                        }, this.expandFolds = function(e) {
                            e.forEach(function(e) {
                                this.expandFold(e);
                            }, this);
                        }, this.unfold = function(e, t) {
                            var n, o;
                            if (null == e) n = new i(0, 0, this.getLength(), 0), null == t && (t = true);
                            else if ("number" == typeof e) n = new i(e, 0, e, this.getLine(e).length);
                            else if ("row" in e) n = i.fromPoints(e, e);
                            else {
                                if (Array.isArray(e)) return o = [], e.forEach(function(e) {
                                    o = o.concat(this.unfold(e));
                                }, this), o;
                                n = e;
                            }
                            o = this.getFoldsInRangeList(n);
                            var r = o;
                            while (1 == o.length && i.comparePoints(o[0].start, n.start) < 0 && i.comparePoints(o[0].end, n.end) > 0) this.expandFolds(o), o = this.getFoldsInRangeList(n);
                            if (0 != t ? this.removeFolds(o) : this.expandFolds(o), r.length) return r;
                        }, this.isRowFolded = function(e, t) {
                            return !!this.getFoldLine(e, t);
                        }, this.getRowFoldEnd = function(e, t) {
                            var n = this.getFoldLine(e, t);
                            return n ? n.end.row : e;
                        }, this.getRowFoldStart = function(e, t) {
                            var n = this.getFoldLine(e, t);
                            return n ? n.start.row : e;
                        }, this.getFoldDisplayLine = function(e, t, n, i, o) {
                            null == i && (i = e.start.row), null == o && (o = 0), null == t && (t = e.end.row), null == n && (n = this.getLine(t).length);
                            var r = this.doc,
                                s = "";
                            return e.walk(function(e, t, n, a) {
                                if (!(t < i)) {
                                    if (t == i) {
                                        if (n < o) return;
                                        a = Math.max(o, a);
                                    }
                                    s += null != e ? e : r.getLine(t).substring(a, n);
                                }
                            }, t, n), s;
                        }, this.getDisplayLine = function(e, t, n, i) {
                            var o, r = this.getFoldLine(e);
                            return r ? this.getFoldDisplayLine(r, e, t, n, i) : (o = this.doc.getLine(e), o.substring(i || 0, t || o.length));
                        }, this.$cloneFoldData = function() {
                            var e = [];
                            return e = this.$foldData.map(function(t) {
                                var n = t.folds.map(function(e) {
                                    return e.clone();
                                });
                                return new o(e, n);
                            }), e;
                        }, this.toggleFold = function(e) {
                            var t, n, i = this.selection,
                                o = i.getRange();
                            if (o.isEmpty()) {
                                var r = o.start;
                                if (t = this.getFoldAt(r.row, r.column), t) return void this.expandFold(t);
                                (n = this.findMatchingBracket(r)) ? 1 == o.comparePoint(n) ? o.end = n : (o.start = n, o.start.column++, o.end.column--): (n = this.findMatchingBracket({
                                    row: r.row,
                                    column: r.column + 1
                                })) ? (1 == o.comparePoint(n) ? o.end = n : o.start = n, o.start.column++) : o = this.getCommentFoldRange(r.row, r.column) || o;
                            } else {
                                var s = this.getFoldsInRange(o);
                                if (e && s.length) return void this.expandFolds(s);
                                1 == s.length && (t = s[0]);
                            }
                            if (t || (t = this.getFoldAt(o.start.row, o.start.column)), t && t.range.toString() == o.toString()) this.expandFold(t);
                            else {
                                var a = "...";
                                if (!o.isMultiLine()) {
                                    if (a = this.getTextRange(o), a.length < 4) return;
                                    a = a.trim().substring(0, 2) + "..";
                                }
                                this.addFold(a, o);
                            }
                        }, this.getCommentFoldRange = function(e, t, n) {
                            var o = new s(this, e, t),
                                r = o.getCurrentToken(),
                                a = r && r.type;
                            if (r && /^comment|string/.test(a)) {
                                a = a.match(/comment|string/)[0], "comment" == a && (a += "|doc-start");
                                var l = new RegExp(a),
                                    c = new i;
                                if (1 != n) {
                                    do {
                                        r = o.stepBackward();
                                    } while (r && l.test(r.type));
                                    o.stepForward();
                                }
                                if (c.start.row = o.getCurrentTokenRow(), c.start.column = o.getCurrentTokenColumn() + 2, o = new s(this, e, t), -1 != n) {
                                    var u = -1;
                                    do {
                                        if (r = o.stepForward(), -1 == u) {
                                            var d = this.getState(o.$row);
                                            l.test(d) || (u = o.$row);
                                        } else if (o.$row > u) break;
                                    } while (r && l.test(r.type));
                                    r = o.stepBackward();
                                } else r = o.getCurrentToken();
                                return c.end.row = o.getCurrentTokenRow(), c.end.column = o.getCurrentTokenColumn() + r.value.length - 2, c;
                            }
                        }, this.foldAll = function(e, t, n, i) {
                            undefined == n && (n = 1e5);
                            var o = this.foldWidgets;
                            if (o) {
                                t = t || this.getLength(), e = e || 0;
                                for (var r = e; r < t; r++)
                                    if (null == o[r] && (o[r] = this.getFoldWidget(r)), "start" == o[r] && (!i || i(r))) {
                                        var s = this.getFoldWidgetRange(r);
                                        s && s.isMultiLine() && s.end.row <= t && s.start.row >= e && (r = s.end.row, s.collapseChildren = n, this.addFold("...", s));
                                    }
                            }
                        }, this.foldToLevel = function(e) {
                            this.foldAll();
                            while (e-- > 0) this.unfold(null, false);
                        }, this.foldAllComments = function() {
                            var e = this;
                            this.foldAll(null, null, null, function(t) {
                                for (var n = e.getTokens(t), i = 0; i < n.length; i++) {
                                    var o = n[i];
                                    if ("text" != o.type || !/^\s+$/.test(o.value)) return !!/comment/.test(o.type);
                                }
                            });
                        }, this.$foldStyles = {
                            manual: 1,
                            markbegin: 1,
                            markbeginend: 1
                        }, this.$foldStyle = "markbegin", this.setFoldStyle = function(e) {
                            if (!this.$foldStyles[e]) throw new Error("invalid fold style: " + e + "[" + Object.keys(this.$foldStyles).join(", ") + "]");
                            if (this.$foldStyle != e) {
                                this.$foldStyle = e, "manual" == e && this.unfold();
                                var t = this.$foldMode;
                                this.$setFolding(null), this.$setFolding(t);
                            }
                        }, this.$setFolding = function(e) {
                            this.$foldMode != e && (this.$foldMode = e, this.off("change", this.$updateFoldWidgets), this.off("tokenizerUpdate", this.$tokenizerUpdateFoldWidgets), this._signal("changeAnnotation"), e && "manual" != this.$foldStyle ? (this.foldWidgets = [], this.getFoldWidget = e.getFoldWidget.bind(e, this, this.$foldStyle), this.getFoldWidgetRange = e.getFoldWidgetRange.bind(e, this, this.$foldStyle), this.$updateFoldWidgets = this.updateFoldWidgets.bind(this), this.$tokenizerUpdateFoldWidgets = this.tokenizerUpdateFoldWidgets.bind(this), this.on("change", this.$updateFoldWidgets), this.on("tokenizerUpdate", this.$tokenizerUpdateFoldWidgets)) : this.foldWidgets = null);
                        }, this.getParentFoldRangeData = function(e, t) {
                            var n = this.foldWidgets;
                            if (!n || t && n[e]) return {};
                            var i, o = e - 1;
                            while (o >= 0) {
                                var r = n[o];
                                if (null == r && (r = n[o] = this.getFoldWidget(o)), "start" == r) {
                                    var s = this.getFoldWidgetRange(o);
                                    if (i || (i = s), s && s.end.row >= e) break;
                                }
                                o--;
                            }
                            return {
                                range: -1 !== o && s,
                                firstRange: i
                            };
                        }, this.onFoldWidgetClick = function(e, t) {
                            t = t.domEvent;
                            var n = {
                                    children: t.shiftKey,
                                    all: t.ctrlKey || t.metaKey,
                                    siblings: t.altKey
                                },
                                i = this.$toggleFoldWidget(e, n);
                            if (!i) {
                                var o = t.target || t.srcElement;
                                o && /ace_fold-widget/.test(o.className) && (o.className += " ace_invalid");
                            }
                        }, this.$toggleFoldWidget = function(e, t) {
                            if (this.getFoldWidget) {
                                var n = this.getFoldWidget(e),
                                    i = this.getLine(e),
                                    o = "end" === n ? -1 : 1,
                                    r = this.getFoldAt(e, -1 === o ? 0 : i.length, o);
                                if (r) return t.children || t.all ? this.removeFold(r) : this.expandFold(r), r;
                                var s = this.getFoldWidgetRange(e, true);
                                if (s && !s.isMultiLine() && (r = this.getFoldAt(s.start.row, s.start.column, 1), r && s.isEqual(r.range))) return this.removeFold(r), r;
                                if (t.siblings) {
                                    var a = this.getParentFoldRangeData(e);
                                    if (a.range) var l = a.range.start.row + 1,
                                        c = a.range.end.row;
                                    this.foldAll(l, c, t.all ? 1e4 : 0);
                                } else t.children ? (c = s ? s.end.row : this.getLength(), this.foldAll(e + 1, c, t.all ? 1e4 : 0)) : s && (t.all && (s.collapseChildren = 1e4), this.addFold("...", s));
                                return s;
                            }
                        }, this.toggleFoldWidget = function(e) {
                            var t = this.selection.getCursor().row;
                            t = this.getRowFoldStart(t);
                            var n = this.$toggleFoldWidget(t, {});
                            if (!n) {
                                var i = this.getParentFoldRangeData(t, true);
                                if (n = i.range || i.firstRange, n) {
                                    t = n.start.row;
                                    var o = this.getFoldAt(t, this.getLine(t).length, 1);
                                    o ? this.removeFold(o) : this.addFold("...", n);
                                }
                            }
                        }, this.updateFoldWidgets = function(e) {
                            var t = e.start.row,
                                n = e.end.row - t;
                            if (0 === n) this.foldWidgets[t] = null;
                            else if ("remove" == e.action) this.foldWidgets.splice(t, n + 1, null);
                            else {
                                var i = Array(n + 1);
                                i.unshift(t, 1), this.foldWidgets.splice.apply(this.foldWidgets, i);
                            }
                        }, this.tokenizerUpdateFoldWidgets = function(e) {
                            var t = e.data;
                            t.first != t.last && this.foldWidgets.length > t.first && this.foldWidgets.splice(t.first, this.foldWidgets.length);
                        };
                    }
                    t.Folding = a;
                }), ace.define("ace/edit_session/bracket_match", ["require", "exports", "module", "ace/token_iterator", "ace/range"], function(e, t, n) {
                    "use strict";
                    var i = e("../token_iterator").TokenIterator,
                        o = e("../range").Range;

                    function r() {
                        this.findMatchingBracket = function(e, t) {
                            if (0 == e.column) return null;
                            var n = t || this.getLine(e.row).charAt(e.column - 1);
                            if ("" == n) return null;
                            var i = n.match(/([\(\[\{])|([\)\]\}])/);
                            return i ? i[1] ? this.$findClosingBracket(i[1], e) : this.$findOpeningBracket(i[2], e) : null;
                        }, this.getBracketRange = function(e) {
                            var t, n = this.getLine(e.row),
                                i = true,
                                r = n.charAt(e.column - 1),
                                s = r && r.match(/([\(\[\{])|([\)\]\}])/);
                            if (s || (r = n.charAt(e.column), e = {
                                    row: e.row,
                                    column: e.column + 1
                                }, s = r && r.match(/([\(\[\{])|([\)\]\}])/), i = false), !s) return null;
                            if (s[1]) {
                                var a = this.$findClosingBracket(s[1], e);
                                if (!a) return null;
                                t = o.fromPoints(e, a), i || (t.end.column++, t.start.column--), t.cursor = t.end;
                            } else {
                                a = this.$findOpeningBracket(s[2], e);
                                if (!a) return null;
                                t = o.fromPoints(a, e), i || (t.start.column++, t.end.column--), t.cursor = t.start;
                            }
                            return t;
                        }, this.getMatchingBracketRanges = function(e) {
                            var t = this.getLine(e.row),
                                n = t.charAt(e.column - 1),
                                i = n && n.match(/([\(\[\{])|([\)\]\}])/);
                            if (i || (n = t.charAt(e.column), e = {
                                    row: e.row,
                                    column: e.column + 1
                                }, i = n && n.match(/([\(\[\{])|([\)\]\}])/)), !i) return null;
                            var r = new o(e.row, e.column - 1, e.row, e.column),
                                s = i[1] ? this.$findClosingBracket(i[1], e) : this.$findOpeningBracket(i[2], e);
                            if (!s) return [r];
                            var a = new o(s.row, s.column, s.row, s.column + 1);
                            return [r, a];
                        }, this.$brackets = {
                            ")": "(",
                            "(": ")",
                            "]": "[",
                            "[": "]",
                            "{": "}",
                            "}": "{",
                            "<": ">",
                            ">": "<"
                        }, this.$findOpeningBracket = function(e, t, n) {
                            var o = this.$brackets[e],
                                r = 1,
                                s = new i(this, t.row, t.column),
                                a = s.getCurrentToken();
                            if (a || (a = s.stepForward()), a) {
                                n || (n = new RegExp("(\\.?" + a.type.replace(".", "\\.").replace("rparen", ".paren").replace(/\b(?:end)\b/, "(?:start|begin|end)") + ")+"));
                                var l = t.column - s.getCurrentTokenColumn() - 2,
                                    c = a.value;
                                while (1) {
                                    while (l >= 0) {
                                        var u = c.charAt(l);
                                        if (u == o) {
                                            if (r -= 1, 0 == r) return {
                                                row: s.getCurrentTokenRow(),
                                                column: l + s.getCurrentTokenColumn()
                                            };
                                        } else u == e && (r += 1);
                                        l -= 1;
                                    }
                                    do {
                                        a = s.stepBackward();
                                    } while (a && !n.test(a.type));
                                    if (null == a) break;
                                    c = a.value, l = c.length - 1;
                                }
                                return null;
                            }
                        }, this.$findClosingBracket = function(e, t, n) {
                            var o = this.$brackets[e],
                                r = 1,
                                s = new i(this, t.row, t.column),
                                a = s.getCurrentToken();
                            if (a || (a = s.stepForward()), a) {
                                n || (n = new RegExp("(\\.?" + a.type.replace(".", "\\.").replace("lparen", ".paren").replace(/\b(?:start|begin)\b/, "(?:start|begin|end)") + ")+"));
                                var l = t.column - s.getCurrentTokenColumn();
                                while (1) {
                                    var c = a.value,
                                        u = c.length;
                                    while (l < u) {
                                        var d = c.charAt(l);
                                        if (d == o) {
                                            if (r -= 1, 0 == r) return {
                                                row: s.getCurrentTokenRow(),
                                                column: l + s.getCurrentTokenColumn()
                                            };
                                        } else d == e && (r += 1);
                                        l += 1;
                                    }
                                    do {
                                        a = s.stepForward();
                                    } while (a && !n.test(a.type));
                                    if (null == a) break;
                                    l = 0;
                                }
                                return null;
                            }
                        };
                    }
                    t.BracketMatch = r;
                }), ace.define("ace/edit_session", ["require", "exports", "module", "ace/lib/oop", "ace/lib/lang", "ace/bidihandler", "ace/config", "ace/lib/event_emitter", "ace/selection", "ace/mode/text", "ace/range", "ace/document", "ace/background_tokenizer", "ace/search_highlight", "ace/edit_session/folding", "ace/edit_session/bracket_match"], function(e, t, n) {
                    "use strict";
                    var i = e("./lib/oop"),
                        o = e("./lib/lang"),
                        r = e("./bidihandler").BidiHandler,
                        s = e("./config"),
                        a = e("./lib/event_emitter").EventEmitter,
                        l = e("./selection").Selection,
                        c = e("./mode/text").Mode,
                        u = e("./range").Range,
                        d = e("./document").Document,
                        h = e("./background_tokenizer").BackgroundTokenizer,
                        f = e("./search_highlight").SearchHighlight,
                        p = function(e, t) {
                            this.$breakpoints = [], this.$decorations = [], this.$frontMarkers = {}, this.$backMarkers = {}, this.$markerId = 1, this.$undoSelect = true, this.$foldData = [], this.id = "session" + ++p.$uid, this.$foldData.toString = function() {
                                return this.join("\n");
                            }, this.on("changeFold", this.onChangeFold.bind(this)), this.$onChange = this.onChange.bind(this), "object" == typeof e && e.getLine || (e = new d(e)), this.setDocument(e), this.selection = new l(this), this.$bidiHandler = new r(this), s.resetOptions(this), this.setMode(t), s._signal("session", this);
                        };
                    p.$uid = 0,
                        function() {
                            i.implement(this, a), this.setDocument = function(e) {
                                this.doc && this.doc.off("change", this.$onChange), this.doc = e, e.on("change", this.$onChange), this.bgTokenizer && this.bgTokenizer.setDocument(this.getDocument()), this.resetCaches();
                            }, this.getDocument = function() {
                                return this.doc;
                            }, this.$resetRowCache = function(e) {
                                if (!e) return this.$docRowCache = [], void(this.$screenRowCache = []);
                                var t = this.$docRowCache.length,
                                    n = this.$getRowCacheIndex(this.$docRowCache, e) + 1;
                                t > n && (this.$docRowCache.splice(n, t), this.$screenRowCache.splice(n, t));
                            }, this.$getRowCacheIndex = function(e, t) {
                                var n = 0,
                                    i = e.length - 1;
                                while (n <= i) {
                                    var o = n + i >> 1,
                                        r = e[o];
                                    if (t > r) n = o + 1;
                                    else {
                                        if (!(t < r)) return o;
                                        i = o - 1;
                                    }
                                }
                                return n - 1;
                            }, this.resetCaches = function() {
                                this.$modified = true, this.$wrapData = [], this.$rowLengthCache = [], this.$resetRowCache(0), this.bgTokenizer && this.bgTokenizer.start(0);
                            }, this.onChangeFold = function(e) {
                                var t = e.data;
                                this.$resetRowCache(t.start.row);
                            }, this.onChange = function(e) {
                                this.$modified = true, this.$bidiHandler.onChange(e), this.$resetRowCache(e.start.row);
                                var t = this.$updateInternalDataOnChange(e);
                                !this.$fromUndo && this.$undoManager && (t && t.length && (this.$undoManager.add({
                                    action: "removeFolds",
                                    folds: t
                                }, this.mergeUndoDeltas), this.mergeUndoDeltas = true), this.$undoManager.add(e, this.mergeUndoDeltas), this.mergeUndoDeltas = true, this.$informUndoManager.schedule()), this.bgTokenizer && this.bgTokenizer.$updateOnChange(e), this._signal("change", e);
                            }, this.setValue = function(e) {
                                this.doc.setValue(e), this.selection.moveTo(0, 0), this.$resetRowCache(0), this.setUndoManager(this.$undoManager), this.getUndoManager().reset();
                            }, this.getValue = this.toString = function() {
                                return this.doc.getValue();
                            }, this.getSelection = function() {
                                return this.selection;
                            }, this.getState = function(e) {
                                return this.bgTokenizer.getState(e);
                            }, this.getTokens = function(e) {
                                return this.bgTokenizer.getTokens(e);
                            }, this.getTokenAt = function(e, t) {
                                var n, i = this.bgTokenizer.getTokens(e),
                                    o = 0;
                                if (null == t) {
                                    var r = i.length - 1;
                                    o = this.getLine(e).length;
                                } else
                                    for (r = 0; r < i.length; r++)
                                        if (o += i[r].value.length, o >= t) break;
                                return n = i[r], n ? (n.index = r, n.start = o - n.value.length, n) : null;
                            }, this.setUndoManager = function(e) {
                                if (this.$undoManager = e, this.$informUndoManager && this.$informUndoManager.cancel(), e) {
                                    var t = this;
                                    e.addSession(this), this.$syncInformUndoManager = function() {
                                        t.$informUndoManager.cancel(), t.mergeUndoDeltas = false;
                                    }, this.$informUndoManager = o.delayedCall(this.$syncInformUndoManager);
                                } else this.$syncInformUndoManager = function() {};
                            }, this.markUndoGroup = function() {
                                this.$syncInformUndoManager && this.$syncInformUndoManager();
                            }, this.$defaultUndoManager = {
                                undo: function() {},
                                redo: function() {},
                                hasUndo: function() {},
                                hasRedo: function() {},
                                reset: function() {},
                                add: function() {},
                                addSelection: function() {},
                                startNewGroup: function() {},
                                addSession: function() {}
                            }, this.getUndoManager = function() {
                                return this.$undoManager || this.$defaultUndoManager;
                            }, this.getTabString = function() {
                                return this.getUseSoftTabs() ? o.stringRepeat(" ", this.getTabSize()) : "	";
                            }, this.setUseSoftTabs = function(e) {
                                this.setOption("useSoftTabs", e);
                            }, this.getUseSoftTabs = function() {
                                return this.$useSoftTabs && !this.$mode.$indentWithTabs;
                            }, this.setTabSize = function(e) {
                                this.setOption("tabSize", e);
                            }, this.getTabSize = function() {
                                return this.$tabSize;
                            }, this.isTabStop = function(e) {
                                return this.$useSoftTabs && e.column % this.$tabSize === 0;
                            }, this.setNavigateWithinSoftTabs = function(e) {
                                this.setOption("navigateWithinSoftTabs", e);
                            }, this.getNavigateWithinSoftTabs = function() {
                                return this.$navigateWithinSoftTabs;
                            }, this.$overwrite = false, this.setOverwrite = function(e) {
                                this.setOption("overwrite", e);
                            }, this.getOverwrite = function() {
                                return this.$overwrite;
                            }, this.toggleOverwrite = function() {
                                this.setOverwrite(!this.$overwrite);
                            }, this.addGutterDecoration = function(e, t) {
                                this.$decorations[e] || (this.$decorations[e] = ""), this.$decorations[e] += " " + t, this._signal("changeBreakpoint", {});
                            }, this.removeGutterDecoration = function(e, t) {
                                this.$decorations[e] = (this.$decorations[e] || "").replace(" " + t, ""), this._signal("changeBreakpoint", {});
                            }, this.getBreakpoints = function() {
                                return this.$breakpoints;
                            }, this.setBreakpoints = function(e) {
                                this.$breakpoints = [];
                                for (var t = 0; t < e.length; t++) this.$breakpoints[e[t]] = "ace_breakpoint";
                                this._signal("changeBreakpoint", {});
                            }, this.clearBreakpoints = function() {
                                this.$breakpoints = [], this._signal("changeBreakpoint", {});
                            }, this.setBreakpoint = function(e, t) {
                                undefined === t && (t = "ace_breakpoint"), t ? this.$breakpoints[e] = t : delete this.$breakpoints[e], this._signal("changeBreakpoint", {});
                            }, this.clearBreakpoint = function(e) {
                                delete this.$breakpoints[e], this._signal("changeBreakpoint", {});
                            }, this.addMarker = function(e, t, n, i) {
                                var o = this.$markerId++,
                                    r = {
                                        range: e,
                                        type: n || "line",
                                        renderer: "function" == typeof n ? n : null,
                                        clazz: t,
                                        inFront: !!i,
                                        id: o
                                    };
                                return i ? (this.$frontMarkers[o] = r, this._signal("changeFrontMarker")) : (this.$backMarkers[o] = r, this._signal("changeBackMarker")), o;
                            }, this.addDynamicMarker = function(e, t) {
                                if (e.update) {
                                    var n = this.$markerId++;
                                    return e.id = n, e.inFront = !!t, t ? (this.$frontMarkers[n] = e, this._signal("changeFrontMarker")) : (this.$backMarkers[n] = e, this._signal("changeBackMarker")), e;
                                }
                            }, this.removeMarker = function(e) {
                                var t = this.$frontMarkers[e] || this.$backMarkers[e];
                                if (t) {
                                    var n = t.inFront ? this.$frontMarkers : this.$backMarkers;
                                    delete n[e], this._signal(t.inFront ? "changeFrontMarker" : "changeBackMarker");
                                }
                            }, this.getMarkers = function(e) {
                                return e ? this.$frontMarkers : this.$backMarkers;
                            }, this.highlight = function(e) {
                                if (!this.$searchHighlight) {
                                    var t = new f(null, "ace_selected-word", "text");
                                    this.$searchHighlight = this.addDynamicMarker(t);
                                }
                                this.$searchHighlight.setRegexp(e);
                            }, this.highlightLines = function(e, t, n, i) {
                                "number" != typeof t && (n = t, t = e), n || (n = "ace_step");
                                var o = new u(e, 0, t, Infinity);
                                return o.id = this.addMarker(o, n, "fullLine", i), o;
                            }, this.setAnnotations = function(e) {
                                this.$annotations = e, this._signal("changeAnnotation", {});
                            }, this.getAnnotations = function() {
                                return this.$annotations || [];
                            }, this.clearAnnotations = function() {
                                this.setAnnotations([]);
                            }, this.$detectNewLine = function(e) {
                                var t = e.match(/^.*?(\r?\n)/m);
