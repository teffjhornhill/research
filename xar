                            }
                        }
                    }, [e._v(e._s(e.i18nt("designer.hint.closePreview")))]), e._e(), e._e(), e._e(), e._e()], 1)], 1) : e._e(), e.showImportJsonDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: e.i18nt("designer.toolbar.importJson"),
                            visible: e.showImportJsonDialogFlag,
                            "show-close": true,
                            center: "",
                            "append-to-body": "",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showImportJsonDialogFlag = t;
                            }
                        }
                    }, [n("el-alert", {
                        staticClass: "alert-padding",
                        attrs: {
                            type: "info",
                            title: e.i18nt("designer.hint.importJsonHint"),
                            "show-icon": ""
                        }
                    }), n("code-editor", {
                        attrs: {
                            mode: "json",
                            readonly: false
                        },
                        model: {
                            value: e.importTemplate,
                            callback: function(t) {
                                e.importTemplate = t;
                            },
                            expression: "importTemplate"
                        }
                    }), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        attrs: {
                            type: "primary"
                        },
                        on: {
                            click: e.doJsonImport
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.import")))]), n("el-button", {
                        on: {
                            click: function(t) {
                                e.showImportJsonDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.cancel")))])], 1)], 1) : e._e(), e.showExportJsonDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: e.i18nt("designer.toolbar.exportJson"),
                            visible: e.showExportJsonDialogFlag,
                            "show-close": true,
                            center: "",
                            "append-to-body": "",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showExportJsonDialogFlag = t;
                            }
                        }
                    }, [n("code-editor", {
                        attrs: {
                            mode: "json",
                            readonly: true
                        },
                        model: {
                            value: e.jsonContent,
                            callback: function(t) {
                                e.jsonContent = t;
                            },
                            expression: "jsonContent"
                        }
                    }), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        staticClass: "copy-json-btn",
                        attrs: {
                            type: "primary",
                            "data-clipboard-text": e.jsonRawContent
                        },
                        on: {
                            click: e.copyFormJson
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.copyJson")))]), n("el-button", {
                        on: {
                            click: e.saveFormJson
                        }
                    }, [e._v(e._s(e.i18nt("designer.hint.saveFormJson")))]), n("el-button", {
                        attrs: {
                            type: ""
                        },
                        on: {
                            click: function(t) {
                                e.showExportJsonDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.closePreview")))])], 1)], 1) : e._e(), e.showExportCodeDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: e.i18nt("designer.toolbar.exportCode"),
                            visible: e.showExportCodeDialogFlag,
                            "show-close": true,
                            center: "",
                            "append-to-body": "",
                            width: "65%",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showExportCodeDialogFlag = t;
                            }
                        }
                    }, [n("el-tabs", {
                        staticClass: "no-box-shadow no-padding",
                        attrs: {
                            type: "border-card"
                        },
                        model: {
                            value: e.activeCodeTab,
                            callback: function(t) {
                                e.activeCodeTab = t;
                            },
                            expression: "activeCodeTab"
                        }
                    }, [n("el-tab-pane", {
                        attrs: {
                            label: "Vue",
                            name: "vue"
                        }
                    }, [n("code-editor", {
                        attrs: {
                            mode: "html",
                            readonly: true,
                            "user-worker": false
                        },
                        model: {
                            value: e.vueCode,
                            callback: function(t) {
                                e.vueCode = t;
                            },
                            expression: "vueCode"
                        }
                    })], 1), n("el-tab-pane", {
                        attrs: {
                            label: "HTML",
                            name: "html"
                        }
                    }, [n("code-editor", {
                        attrs: {
                            mode: "html",
                            readonly: true,
                            "user-worker": false
                        },
                        model: {
                            value: e.htmlCode,
                            callback: function(t) {
                                e.htmlCode = t;
                            },
                            expression: "htmlCode"
                        }
                    })], 1)], 1), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        staticClass: "copy-vue-btn",
                        attrs: {
                            type: "primary",
                            "data-clipboard-text": e.vueCode
                        },
                        on: {
                            click: e.copyVueCode
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.copyVueCode")))]), n("el-button", {
                        staticClass: "copy-html-btn",
                        attrs: {
                            type: "primary",
                            "data-clipboard-text": e.htmlCode
                        },
                        on: {
                            click: e.copyHtmlCode
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.copyHtmlCode")))]), n("el-button", {
                        on: {
                            click: e.saveVueCode
                        }
                    }, [e._v(e._s(e.i18nt("designer.hint.saveVueCode")))]), n("el-button", {
                        on: {
                            click: e.saveHtmlCode
                        }
                    }, [e._v(e._s(e.i18nt("designer.hint.saveHtmlCode")))]), n("el-button", {
                        attrs: {
                            type: ""
                        },
                        on: {
                            click: function(t) {
                                e.showExportCodeDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.closePreview")))])], 1)], 1) : e._e(), e.showFormDataDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "dialog-title-light-bg",
                        attrs: {
                            title: e.i18nt("designer.hint.exportFormData"),
                            visible: e.showFormDataDialogFlag,
                            "show-close": true,
                            center: "",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true,
                            "append-to-body": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showFormDataDialogFlag = t;
                            }
                        }
                    }, [n("div", {
                        staticStyle: {
                            border: "1px solid #DCDFE6"
                        }
                    }, [n("code-editor", {
                        attrs: {
                            mode: "json",
                            readonly: true
                        },
                        model: {
                            value: e.formDataJson,
                            callback: function(t) {
                                e.formDataJson = t;
                            },
                            expression: "formDataJson"
                        }
                    })], 1), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        staticClass: "copy-form-data-json-btn",
                        attrs: {
                            type: "primary",
                            "data-clipboard-text": e.formDataRawJson
                        },
                        on: {
                            click: e.copyFormDataJson
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.copyFormData")))]), n("el-button", {
                        on: {
                            click: e.saveFormData
                        }
                    }, [e._v(e._s(e.i18nt("designer.hint.saveFormData")))]), n("el-button", {
                        attrs: {
                            type: ""
                        },
                        on: {
                            click: function(t) {
                                e.showFormDataDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.closePreview")))])], 1)]) : e._e(), e.showExportSFCDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: e.i18nt("designer.toolbar.generateSFC"),
                            visible: e.showExportSFCDialogFlag,
                            "show-close": true,
                            center: "",
                            "append-to-body": "",
                            width: "65%",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showExportSFCDialogFlag = t;
                            }
                        }
                    }, [n("el-tabs", {
                        staticClass: "no-box-shadow no-padding",
                        attrs: {
                            type: "border-card"
                        },
                        model: {
                            value: e.activeSFCTab,
                            callback: function(t) {
                                e.activeSFCTab = t;
                            },
                            expression: "activeSFCTab"
                        }
                    }, [n("el-tab-pane", {
                        attrs: {
                            label: "Vue2",
                            name: "vue2"
                        }
                    }, [n("code-editor", {
                        attrs: {
                            mode: "html",
                            readonly: true,
                            "user-worker": false
                        },
                        model: {
                            value: e.sfcCode,
                            callback: function(t) {
                                e.sfcCode = t;
                            },
                            expression: "sfcCode"
                        }
                    })], 1), n("el-tab-pane", {
                        attrs: {
                            label: "Vue3",
                            name: "vue3"
                        }
                    }, [n("code-editor", {
                        attrs: {
                            mode: "html",
                            readonly: true,
                            "user-worker": false
                        },
                        model: {
                            value: e.sfcCodeV3,
                            callback: function(t) {
                                e.sfcCodeV3 = t;
                            },
                            expression: "sfcCodeV3"
                        }
                    })], 1)], 1), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        staticClass: "copy-vue2-sfc-btn",
                        attrs: {
                            type: "primary",
                            "data-clipboard-text": e.sfcCode
                        },
                        on: {
                            click: e.copyV2SFC
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.copyVue2SFC")))]), n("el-button", {
                        staticClass: "copy-vue3-sfc-btn",
                        attrs: {
                            type: "primary",
                            "data-clipboard-text": e.sfcCodeV3
                        },
                        on: {
                            click: e.copyV3SFC
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.copyVue3SFC")))]), n("el-button", {
                        on: {
                            click: e.saveV2SFC
                        }
                    }, [e._v(e._s(e.i18nt("designer.hint.saveVue2SFC")))]), n("el-button", {
                        on: {
                            click: e.saveV3SFC
                        }
                    }, [e._v(e._s(e.i18nt("designer.hint.saveVue3SFC")))]), n("el-button", {
                        attrs: {
                            type: ""
                        },
                        on: {
                            click: function(t) {
                                e.showExportSFCDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.closePreview")))])], 1)], 1) : e._e()], 1);
                },
                j = [],
                P = (n("e9c4"), function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-form", {
                        ref: "renderForm",
                        staticClass: "render-form",
                        class: [e.customClass],
                        attrs: {
                            "label-position": e.labelPosition,
                            size: e.size,
                            "label-width": e.labelWidth,
                            "validate-on-rule-change": false,
                            model: e.formDataModel
                        },
                        nativeOn: {
                            submit: function(e) {
                                e.preventDefault();
                            }
                        }
                    }, [e._l(e.widgetList, function(t, i) {
                        return ["container" === t.category ? [n(e.getContainerWidgetName(t), {
                            key: t.id,
                            tag: "component",
                            attrs: {
                                widget: t,
                                "parent-list": e.widgetList,
                                "index-of-parent-list": i,
                                "parent-widget": null
                            },
                            scopedSlots: e._u([e._l(Object.keys(e.$scopedSlots), function(t) {
                                return {
                                    key: t,
                                    fn: function(n) {
                                        return [e._t(t, null, null, n)];
                                    }
                                };
                            })], null, true)
                        })] : [n(e.getWidgetName(t), {
                            key: t.id,
                            tag: "component",
                            attrs: {
                                field: t,
                                "form-model": e.formDataModel,
                                designer: null,
                                "parent-list": e.widgetList,
                                "index-of-parent-list": i,
                                "parent-widget": null
                            },
                            scopedSlots: e._u([e._l(Object.keys(e.$scopedSlots), function(t) {
                                return {
                                    key: t,
                                    fn: function(n) {
                                        return [e._t(t, null, null, n)];
                                    }
                                };
                            })], null, true)
                        })]];
                    })], 2);
                }),
                I = [],
                N = n("2909"),
                q = (n("e6cf"), n("b64b"), n("c6e3")),
                B = (n("e260"), n("ddb0"), n("8bbf")),
                W = n.n(B),
                H = n("10ae");
            H.keys().map(function(e) {
                var t = H(e).default;
                W.a.component(t.name, t);
            });
            var V, z = n("c029"),
                U = {
                    name: "VFormRender",
                    componentName: "VFormRender",
                    mixins: [q.a, C.b],
                    components: Object(h.a)({}, z.a),
                    props: {
                        formJson: {
                            type: Object,
                            default: function() {
                                return Object(_.b)();
                            }
                        },
                        formData: {
                            type: Object,
                            default: function() {
                                return {};
                            }
                        },
                        optionData: {
                            type: Object,
                            default: function() {
                                return {};
                            }
                        },
                        previewState: {
                            type: Boolean,
                            default: false
                        },
                        globalDsv: {
                            type: Object,
                            default: function() {
                                return {};
                            }
                        }
                    },
                    provide: function() {
                        var e = this;
                        return {
                            refList: this.widgetRefList,
                            sfRefList: this.subFormRefList,
                            formConfig: this.formConfig,
                            getGlobalDsv: function() {
                                return e.globalDsv;
                            },
                            globalOptionData: this.optionData,
                            getOptionData: function() {
                                return e.optionData;
                            },
                            globalModel: {
                                formModel: this.formDataModel
                            },
                            previewState: this.previewState
                        };
                    },
                    data: function() {
                        return {
                            formJsonObj: this.formJson,
                            formDataModel: {},
                            widgetRefList: {},
                            subFormRefList: {},
                            formId: null,
                            externalComponents: {}
                        };
                    },
                    computed: {
                        formConfig: function() {
                            return this.formJsonObj.formConfig;
                        },
                        widgetList: function() {
                            return this.formJsonObj.widgetList;
                        },
                        labelPosition: function() {
                            return this.formConfig && this.formConfig.labelPosition ? this.formConfig.labelPosition : "left";
                        },
                        labelWidth: function() {
                            return this.formConfig && this.formConfig.labelWidth ? this.formConfig.labelWidth + "px" : "80px";
                        },
                        size: function() {
                            return this.formConfig && this.formConfig.size ? this.formConfig.size : "medium";
                        },
                        customClass: function() {
                            return this.formConfig && this.formConfig.customClass ? this.formConfig.customClass : "";
                        }
                    },
                    watch: {},
                    created: function() {
                        this.buildFormModel(this.formJsonObj ? this.formJsonObj.widgetList : null), this.initFormObject();
                    },
                    mounted: function() {
                        this.initLocale(), this.handleOnMounted();
                    },
                    methods: {
                        initFormObject: function() {
                            var e = !(arguments.length > 0 && undefined !== arguments[0]) || arguments[0];
                            this.formId = "vfRender" + Object(_.f)(), e && this.insertCustomStyleAndScriptNode(), this.addFieldChangeEventHandler(), this.addFieldValidateEventHandler(), this.registerFormToRefList(), this.handleOnCreated();
                        },
                        getContainerWidgetName: function(e) {
                            return "grid" === e.type ? "vf-grid-item" : e.type + "-item";
                        },
                        getWidgetName: function(e) {
                            return e.type + "-widget";
                        },
                        initLocale: function() {
                            var e = localStorage.getItem("v_form_locale") || "zh-CN";
                            this.changeLanguage(e);
                        },
                        insertCustomStyleAndScriptNode: function() {
                            this.formConfig && this.formConfig.cssCode && Object(_.k)(this.formConfig.cssCode, this.previewState ? "" : this.formId), this.formConfig && this.formConfig.functions && Object(_.l)(this.formConfig.functions, this.previewState ? "" : this.formId);
                        },
                        buildFormModel: function(e) {
                            var t = this;
                            e && e.length > 0 && e.forEach(function(e) {
                                t.buildDataFromWidget(e);
                            });
                        },
                        buildDataFromWidget: function(e) {
                            var t = this;
                            if ("container" === e.category)
                                if ("grid" === e.type) e.cols && e.cols.length > 0 && e.cols.forEach(function(e) {
                                    t.buildDataFromWidget(e);
                                });
                                else if ("table" === e.type) e.rows && e.rows.length > 0 && e.rows.forEach(function(e) {
                                e.cols && e.cols.length > 0 && e.cols.forEach(function(e) {
                                    t.buildDataFromWidget(e);
                                });
                            });
                            else if ("tab" === e.type) e.tabs && e.tabs.length > 0 && e.tabs.forEach(function(e) {
                                e.widgetList && e.widgetList.length > 0 && e.widgetList.forEach(function(e) {
                                    t.buildDataFromWidget(e);
                                });
                            });
                            else if ("sub-form" === e.type) {
                                var n = e.options.name;
                                if (this.formData.hasOwnProperty(n)) {
                                    var i = this.formData[n];
                                    this.$set(this.formDataModel, n, Object(_.d)(i));
                                } else {
                                    var o = {};
                                    e.options.showBlankRow ? (e.widgetList.forEach(function(e) {
                                        e.formItemFlag && (o[e.options.name] = e.options.defaultValue);
                                    }), this.$set(this.formDataModel, n, [o])) : this.$set(this.formDataModel, n, []);
                                }
                            } else "grid-col" === e.type || e.type, e.widgetList && e.widgetList.length > 0 && e.widgetList.forEach(function(e) {
                                t.buildDataFromWidget(e);
                            });
                            else if (e.formItemFlag)
                                if (this.formData.hasOwnProperty(e.options.name)) {
                                    var r = this.formData[e.options.name];
                                    this.$set(this.formDataModel, e.options.name, Object(_.d)(r));
                                } else this.$set(this.formDataModel, e.options.name, e.options.defaultValue);
                        },
                        addFieldChangeEventHandler: function() {
                            var e = this;
                            this.$off("fieldChange"), this.$on("fieldChange", function(t, n, i, o, r) {
                                e.handleFieldDataChange(t, n, i, o, r), e.$emit("formChange", t, n, i, e.formDataModel, o, r);
                            });
                        },
                        addFieldValidateEventHandler: function() {
                            var e = this;
                            this.$off("fieldValidation"), this.$on("fieldValidation", function(t) {
                                e.$refs.renderForm.validateField(t);
                            });
                        },
                        registerFormToRefList: function() {
                            this.widgetRefList.v_form_ref = this;
                        },
                        handleFieldDataChange: function(e, t, n, i, o) {
                            if (this.formConfig && this.formConfig.onFormDataChange) {
                                var r = new Function("fieldName", "newValue", "oldValue", "formModel", "subFormName", "subFormRowIndex", this.formConfig.onFormDataChange);
                                r.call(this, e, t, n, this.formDataModel, i, o);
                            }
                        },
                        handleOnCreated: function() {
                            if (this.formConfig && this.formConfig.onFormCreated) {
                                var e = new Function(this.formConfig.onFormCreated);
                                e.call(this);
                            }
                        },
                        handleOnMounted: function() {
                            if (this.formConfig && this.formConfig.onFormMounted) {
                                var e = new Function(this.formConfig.onFormMounted);
                                e.call(this);
                            }
                        },
                        findWidgetAndSetDisabled: function(e, t) {
                            var n = this.getWidgetRef(e);
                            n ? n.setDisabled(t) : this.findWidgetOfSubFormAndSetDisabled(e, t);
                        },
                        findWidgetOfSubFormAndSetDisabled: function(e, t) {
                            var n = this;
                            this.findWidgetNameInSubForm(e).forEach(function(e) {
                                var i = n.getWidgetRef(e);
                                i && i.setDisabled(t);
                            });
                        },
                        findWidgetAndSetHidden: function(e, t) {
                            var n = this.getWidgetRef(e);
                            n ? n.setHidden(t) : this.findWidgetOfSubFormAndSetHidden(e, t);
                        },
                        findWidgetOfSubFormAndSetHidden: function(e, t) {
                            var n = this;
                            this.findWidgetNameInSubForm(e).forEach(function(e) {
                                var i = n.getWidgetRef(e);
                                i && i.setHidden(t);
                            });
                        },
                        findWidgetNameInSubForm: function(e) {
                            var t = [],
                                n = null,
                                i = function(t, i) {
                                    t.options && t.options.name === e && (n = i.options.name);
                                };
                            if (Object(_.t)(this.widgetList, i), n) {
                                var o = this.getWidgetRef(n);
                                if (o) {
                                    var r = o.getRowIdData();
                                    r && r.length > 0 && r.forEach(function(n) {
                                        t.push(e + "@row" + n);
                                    });
                                }
                            }
                            return t;
                        },
                        changeLanguage: function(e) {
                            Object(C.a)(e);
                        },
                        getNativeForm: function() {
                            return this.$refs.renderForm;
                        },
                        getFormRef: function() {
                            return this;
                        },
                        getWidgetRef: function(e) {
                            var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
                                n = this.widgetRefList[e];
                            return !n && t && this.$message.error(this.i18nt("render.hint.refNotFound") + e), n;
                        },
                        clearFormDataModel: function() {
                            for (var e in this.formDataModel) delete this.formDataModel[e];
                        },
                        setFormJson: function(e) {
                            var t = this;
                            if (e)
                                if ("string" === typeof e || e.constructor === Object) {
                                    var n = null;
                                    if (n = "string" === typeof e ? JSON.parse(e) : e, !n.formConfig || !n.widgetList) return void this.$message.error("Invalid format of form json.");
                                    this.clearFormDataModel(), this.buildFormModel(n.widgetList), this.$set(this.formJsonObj, "formConfig", n.formConfig), this._provided.formConfig = n.formConfig, this.$set(this.formJsonObj, "widgetList", n.widgetList), this.insertCustomStyleAndScriptNode(), this.$nextTick(function() {
                                        t.initFormObject(false), t.handleOnMounted();
                                    });
                                } else this.$message.error("Set form json failed.");
                        },
                        reloadOptionData: function(e) {
                            var t = [];
                            e && "string" === typeof e ? t = [e] : e && Array.isArray(e) && (t = Object(N.a)(e)), this.broadcast("FieldWidget", "reloadOptionItems", [t]);
                        },
                        getFormData: function() {
                            var e = this,
                                t = !(arguments.length > 0 && undefined !== arguments[0]) || arguments[0];
                            if (!t) return this.formDataModel;
                            var n = function() {},
                                i = new window.Promise(function(e, t) {
                                    n = function(n, i) {
                                        i ? t(i) : e(n);
                                    };
                                });
                            return this.$refs.renderForm.validate(function(t) {
                                t ? n(e.formDataModel) : n(e.formDataModel, e.i18nt("render.hint.validationFailed"));
                            }), i;
                        },
                        setFormData: function(e) {
                            var t = this;
                            Object.keys(this.formDataModel).forEach(function(n) {
                                e && e.hasOwnProperty(n) && (t.formDataModel[n] = Object(_.d)(e[n]));
                            }), this.broadcast("ContainerItem", "setFormData", this.formDataModel), this.broadcast("FieldWidget", "setFormData", this.formDataModel);
                        },
                        getFieldValue: function(e) {
                            var t = this,
                                n = this.getWidgetRef(e);
                            if (n && n.getValue) return n.getValue();
                            if (!n) {
                                var i = [];
                                return this.findWidgetNameInSubForm(e).forEach(function(e) {
                                    var n = t.getWidgetRef(e);
                                    n && n.getValue && i.push(n.getValue());
                                }), i;
                            }
                        },
                        setFieldValue: function(e, t) {
                            var n = this,
                                i = this.getWidgetRef(e);
                            i && i.setValue && i.setValue(t), i || this.findWidgetNameInSubForm(e).forEach(function(e) {
                                var i = n.getWidgetRef(e);
                                i && i.setValue && i.setValue(t);
                            });
                        },
                        getSubFormValues: function(e) {
                            var t = !(arguments.length > 1 && undefined !== arguments[1]) || arguments[1],
                                n = this.subFormRefList[e];
                            return n.getSubFormValues(t);
                        },
                        setSubFormValues: function(e, t) {},
                        disableForm: function() {
                            var e = this,
                                t = Object.keys(this.widgetRefList);
                            t.forEach(function(t) {
                                var n = e.getWidgetRef(t);
                                n && (n.widget && "sub-form" === n.widget.type ? n.disableSubForm() : n.setDisabled && n.setDisabled(true));
                            });
                        },
                        enableForm: function() {
                            var e = this,
                                t = Object.keys(this.widgetRefList);
                            t.forEach(function(t) {
                                var n = e.getWidgetRef(t);
                                n && (n.widget && "sub-form" === n.widget.type ? n.enableSubForm() : n.setDisabled && n.setDisabled(false));
                            });
                        },
                        resetForm: function() {
                            var e = this,
                                t = Object.keys(this.subFormRefList);
                            t.forEach(function(t) {
                                e.subFormRefList[t].resetSubForm && e.subFormRefList[t].resetSubForm();
                            });
                            var n = Object.keys(this.widgetRefList);
                            n.forEach(function(t) {
                                var n = e.getWidgetRef(t);
                                n && !n.subFormItemFlag && n.resetField && n.resetField();
                            }), this.$nextTick(function() {
                                e.clearValidate();
                            });
                        },
                        clearValidate: function(e) {
                            this.$refs.renderForm.clearValidate(e);
                        },
                        validateForm: function(e) {
                            this.$refs.renderForm.validate(function(t) {
                                e(t);
                            });
                        },
                        validateFields: function() {},
                        disableWidgets: function(e) {
                            var t = this;
                            e && ("string" === typeof e ? this.findWidgetAndSetDisabled(e, true) : Array.isArray(e) && e.forEach(function(e) {
                                t.findWidgetAndSetDisabled(e, true);
                            }));
                        },
                        enableWidgets: function(e) {
                            var t = this;
                            e && ("string" === typeof e ? this.findWidgetAndSetDisabled(e, false) : Array.isArray(e) && e.forEach(function(e) {
                                t.findWidgetAndSetDisabled(e, false);
                            }));
                        },
                        hideWidgets: function(e) {
                            var t = this;
                            e && ("string" === typeof e ? this.findWidgetAndSetHidden(e, true) : Array.isArray(e) && e.forEach(function(e) {
                                t.findWidgetAndSetHidden(e, true);
                            }));
                        },
                        showWidgets: function(e) {
                            var t = this;
                            e && ("string" === typeof e ? this.findWidgetAndSetHidden(e, false) : Array.isArray(e) && e.forEach(function(e) {
                                t.findWidgetAndSetHidden(e, false);
                            }));
                        },
                        getFieldWidgets: function() {
                            var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : null;
                            return e ? Object(_.h)(e) : Object(_.h)(this.formJsonObj.widgetList);
                        },
                        getContainerWidgets: function() {
                            var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : null;
                            return e ? Object(_.g)(e) : Object(_.g)(this.formJsonObj.widgetList);
                        },
                        addEC: function(e, t) {
                            this.externalComponents[e] = t;
                        },
                        hasEC: function(e) {
                            return this.externalComponents.hasOwnProperty(e);
                        },
                        getEC: function(e) {
                            return this.externalComponents[e];
                        },
                        getGlobalDsv: function() {
                            return this.globalDsv;
                        }
                    }
                },
                K = U,
                G = (n("d312"), Object($.a)(K, P, I, false, null, "5fc8e448", null)),
                Y = G.exports,
                X = n("9470"),
                J = n("b311"),
                Z = n.n(J),
                Q = function(e) {
                    var t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : "vue",
                        n = JSON.stringify(e);
                    return "html" === t ? '<!DOCTYPE html>\n<html>\n<head>\n	<meta charset="UTF-8">\n	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no" />\n	<title>VForm Demo</title>\n	<link rel="stylesheet" href="https://cdn.staticfile.org/element-ui/2.15.7/theme-chalk/index.min.css">\n	<link rel="stylesheet" href="https://ks3-cn-beijing.ksyun.com/vform2021/VFormRender.css?t=20210720">\n	<style type="text/css">\n	</style>\n</head>\n<body>\n\n  <div id="app">\n	  <v-form-render :form-json="formJson" :form-data="formData" :option-data="optionData" ref="vFormRef">\n    </v-form-render>\n	  <el-button type="primary" @click="submitForm">Submit</el-button>\n  </div>\n\n<script type="text/javascript">\n  if (!!window.ActiveXObject || "ActiveXObject" in window) { //IE load polyfill.js for Promise\n    var scriptEle = document.createElement("script");\n    scriptEle.type = "text/javascript";\n    scriptEle.src = "https://cdn.bootcss.com/babel-polyfill/6.23.0/polyfill.min.js"\n    document.body.appendChild(scriptEle)\n  }\n</script>\n<script src="https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.min.js"></script>\n<script src="https://cdn.staticfile.org/element-ui/2.15.7/index.min.js"></script>\n<script src="https://ks3-cn-beijing.ksyun.com/vform2021/VFormRender.umd.min.js?t=20210720"></script>\n<script>\n	new Vue({\n      el: \'#app\',\n      data: {\n        formJson: '.concat(n, ",\n        formData: {},\n        optionData: {}\n      },\n      methods: {\n        submitForm() {\n          this.$refs.vFormRef.getFormData().then( function(formData) {\n            // Form Validation OK\n            alert( JSON.stringify(formData) )\n          }).catch( function(error) {\n            // Form Validation Failed\n            alert(error)\n          })\n        }\n      }\n	});\n</script>\n</body>\n</html>") : '<template>\n  <div>\n    <v-form-render :form-json="formJson" :form-data="formData" :option-data="optionData" ref="vFormRef">\n    </v-form-render>\n    <el-button type="primary" @click="submitForm">Submit</el-button>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        formJson: '.concat(n, ",\n        formData: {},\n        optionData: {}\n      }\n    },\n    methods: {\n      submitForm() {\n        this.$refs.vFormRef.getFormData().then(formData => {\n          // Form Validation OK\n          alert( JSON.stringify(formData) )\n        }).catch(error => {\n          // Form Validation failed\n          this.$message.error(error)\n        })\n      }\n    }\n  }\n</script>");
                },
                ee = (n("a15b"), n("99af"), n("71bc")),
                te = n("01ea"),
                ne = {
                    html: {
                        indent_size: "2",
                        indent_char: " ",
                        max_preserve_newlines: "-1",
                        preserve_newlines: false,
                        keep_array_indentation: false,
                        break_chained_methods: false,
                        indent_scripts: "separate",
                        brace_style: "end-expand",
                        space_before_conditional: true,
                        unescape_strings: false,
                        jslint_happy: false,
                        end_with_newline: true,
                        wrap_line_length: "110",
                        indent_inner_html: true,
                        comma_first: false,
                        e4x: true,
                        indent_empty_lines: true
                    },
                    js: {
                        indent_size: "2",
                        indent_char: " ",
                        max_preserve_newlines: "-1",
                        preserve_newlines: false,
                        keep_array_indentation: false,
                        break_chained_methods: false,
                        indent_scripts: "normal",
                        brace_style: "end-expand",
                        space_before_conditional: true,
                        unescape_strings: false,
                        jslint_happy: true,
                        end_with_newline: true,
                        wrap_line_length: "110",
                        indent_inner_html: true,
                        comma_first: false,
                        e4x: true,
                        indent_empty_lines: true
                    },
                    css: {
                        indent_size: "2",
                        indent_char: " ",
                        max_preserve_newlines: "-1",
                        preserve_newlines: false,
                        keep_array_indentation: false,
                        break_chained_methods: false,
                        indent_scripts: "normal",
                        brace_style: "end-expand",
                        space_before_conditional: true,
                        unescape_strings: false,
                        jslint_happy: true,
                        end_with_newline: true,
                        wrap_line_length: "110",
                        indent_inner_html: true,
                        comma_first: false,
                        e4x: true,
                        indent_empty_lines: true
                    }
                };

            function ie(e) {
                V ? e(V) : Object(_.p)(te.b, function() {
                    V = beautifier, e(V);
                });
            }
            var oe = function(e, t) {
                var n = [],
                    i = [],
                    o = [],
                    r = [];
                Object(_.t)(t, function(s) {
                    Object(ee.b)(e, t, n)(s), Object(ee.d)(e, t, i)(s), Object(ee.c)(e, t, o)(s), Object(ee.e)(e, t, r)(s);
                });
                var s = Object(ee.a)(e, t),
                    a = "  import { defineComponent, toRefs, reactive, getCurrentInstance } from 'vue'\n  \n  export default defineComponent({\n    components: {},\n    props: {},\n    setup() {\n      const state = reactive({\n        ".concat(e.modelName, ": {\n          ").concat(n.join("\n"), "\n        },\n        \n        ").concat(e.rulesName, ": {\n          ").concat(i.join("\n"), "\n        },\n        \n        ").concat(s.join("\n"), "\n        \n        ").concat(o.join("\n"), "\n        \n        ").concat(r.join("\n"), "\n      })\n    \n      const instance = getCurrentInstance()\n      \n      const submitForm = () => {\n        instance.proxy.$refs['vForm'].validate(valid => {\n          if (!valid) return\n          \n          //TODO: 提交表单\n        })\n      }\n      \n      const resetForm = () => {\n        instance.proxy.$refs['vForm'].resetFields()\n      }\n      \n      return {\n        ...toRefs(state),\n        submitForm,\n        resetForm\n      }\n    }\n  })");
                return a;
            };

            function re(e, t) {
                var n = e.options,
                    i = [];
                return t && i.push(t), n.customClass && n.customClass.length > 0 && i.push(n.customClass.join(" ")), i.length > 0 ? 'class="'.concat(i.join(" "), '"') : "";
            }
            var se = {
                grid: function(e, t) {
                    var n = re(e),
                        i = "<el-row ".concat(n, ">\n").concat(e.cols.map(function(e) {
                            var n = e.options,
                                i = n.responsive ? "" : ':span="'.concat(n.span, '"'),
                                o = n.responsive ? ':md="'.concat(n.md, '"') : "",
                                r = n.responsive ? ':sm="'.concat(n.sm, '"') : "",
                                s = n.responsive ? ':xs="'.concat(n.xs, '"') : "",
                                a = n.offset ? ':offset="'.concat(n.offset, '"') : "",
                                l = n.push ? ':push="'.concat(n.push, '"') : "",
                                c = n.pull ? ':pull="'.concat(n.pull, '"') : "",
                                u = re(e, "grid-cell");
                            return "<el-col ".concat(i, " ").concat(o, " ").concat(r, " ").concat(s, " ").concat(a, " ").concat(l, " ").concat(c, " ").concat(u, ">\n    ").concat(e.widgetList.map(function(e) {
                                return "container" === e.category ? ae(e, t) : fe(e, t);
                            }).join(""), "\n    </el-col>");
                        }).join(""), "\n</el-row>");
                    return i;
                },
                table: function(e, t) {
                    var n = re(e, "table-layout"),
                        i = '<div class="table-container">\n  <table '.concat(n, "><tbody>\n  ").concat(e.rows.map(function(e) {
                            return "<tr>".concat(e.cols.filter(function(e) {
                                return !e.merged;
                            }).map(function(e) {
                                var n = e.options,
                                    i = re(e, "table-cell"),
                                    o = isNaN(n.colspan) || 1 === n.colspan ? "" : 'colspan="'.concat(n.colspan, '"'),
                                    r = isNaN(n.rowspan) || 1 === n.rowspan ? "" : 'rowspan="'.concat(n.rowspan, '"'),
                                    s = [];
                                n.cellWidth && s.push("width: " + n.cellWidth + " !important"), n.cellHeight && s.push("height: " + n.cellHeight + " !important");
                                var a = s.length > 0 ? 'style="'.concat(s.join(";"), '"') : "";
                                return "<td ".concat(i, " ").concat(o, " ").concat(r, " ").concat(a, ">").concat(e.widgetList.map(function(e) {
                                    return "container" === e.category ? ae(e, t) : fe(e, t);
                                }).join(""), "\n                    </td>");
                            }).join(""), "</tr>");
                        }).join(""), "\n  </tbody></table>\n</div>");
                    return i;
                },
                tab: function(e, t) {
                    var n = re(e),
                        i = e.tabs && e.tabs.length > 0 ? 'v-model="'.concat(e.options.name, 'ActiveTab"') : "",
                        o = '<div class="tab-container">\n  <el-tabs '.concat(i, ' type="').concat(e.displayType, '" ').concat(n, ">\n    ").concat(e.tabs.map(function(e) {
                            var n = e.options,
                                i = true === n.disabled ? "disabled" : "";
                            return '<el-tab-pane name="'.concat(n.name, '" label="').concat(n.label, '" ').concat(i, ">\n        ").concat(e.widgetList.map(function(e) {
                                return "container" === e.category ? ae(e, t) : fe(e, t);
                            }).join(""), "</el-tab-pane>");
                        }).join(""), "\n  </el-tabs>\n</div>");
                    return o;
                },
                "sub-form": function(e, t) {}
            };

            function ae(e, t) {
                return se[e.type] ? se[e.type](e, t) : null;
            }

            function le(e, t) {
                var n = e.options;
                return {
                    vModel: 'v-model="'.concat(t.modelName, ".").concat(n.name, '"'),
                    readonly: n.readonly ? 'readonly="true"' : "",
                    disabled: n.disabled ? ':disabled="true"' : "",
                    size: n.size ? 'size="'.concat(n.size, '"') : "",
                    type: n.type ? 'type="'.concat("number" === n.type ? "text" : n.type, '"') : "",
                    showPassword: n.showPassword ? ':show-password="'.concat(n.showPassword, '"') : "",
                    placeholder: n.placeholder ? 'placeholder="'.concat(n.placeholder, '"') : "",
                    rows: Object(_.n)(n.rows) && !isNaN(n.rows) ? 'rows="'.concat(n.rows, '"') : "",
                    clearable: n.clearable ? "clearable" : "",
                    minlength: Object(_.n)(n.minLength) && !isNaN(n.minLength) ? ':minlength="'.concat(n.minLength, '"') : "",
                    maxlength: Object(_.n)(n.maxLength) && !isNaN(n.maxLength) ? ':maxlength="'.concat(n.maxLength, '"') : "",
                    showWordLimit: n.showWordLimit ? ':show-word-limit="true"' : "",
                    prefixIcon: n.prefixIcon ? 'prefix-icon="'.concat(n.prefixIcon, '"') : "",
                    suffixIcon: n.suffixIcon ? 'suffix-icon="'.concat(n.suffixIcon, '"') : "",
                    controlsPosition: "right" === n.controlsPosition ? 'controls-position="right"' : "",
                    min: Object(_.n)(n.min) && !isNaN(n.min) ? ':min="'.concat(n.min, '"') : "",
                    max: Object(_.n)(n.max) && !isNaN(n.max) ? ':max="'.concat(n.max, '"') : "",
                    precision: Object(_.n)(n.precision) && !isNaN(n.precision) ? ':precision="'.concat(n.precision, '"') : "",
                    step: Object(_.n)(n.step) && !isNaN(n.step) ? ':step="'.concat(n.step, '"') : "",
                    filterable: n.filterable ? "filterable" : "",
                    allowCreate: n.allowCreate ? "allow-create" : "",
                    defaultFirstOption: n.filterable && n.allowCreate ? "default-first-option" : "",
                    multiple: n.multiple ? "multiple" : "",
                    multipleLimit: !isNaN(n.multipleLimit) && n.multipleLimit > 0 ? ':multiple-limit="'.concat(n.multipleLimit, '"') : "",
                    automaticDropdown: n.automaticDropdown ? "automatic-dropdown" : "",
                    remote: n.remote ? "remote" : "",
                    format: n.format ? 'format="'.concat(n.format, '"') : "",
                    valueFormat: n.valueFormat ? 'value-format="'.concat(n.valueFormat, '"') : "",
                    editable: n.editable ? ':editable="'.concat(n.editable, '"') : "",
                    startPlaceholder: n.startPlaceholder ? 'start-placeholder="'.concat(n.startPlaceholder, '"') : "",
                    endPlaceholder: n.endPlaceholder ? 'end-placeholder="'.concat(n.endPlaceholder, '"') : "",
                    activeText: n.activeText ? 'active-text="'.concat(n.activeText, '"') : "",
                    inactiveText: n.inactiveText ? 'inactive-text="'.concat(n.inactiveText, '"') : "",
                    activeColor: n.activeColor ? 'active-color="'.concat(n.activeColor, '"') : "",
                    inactiveColor: n.inactiveColor ? 'inactive-color="'.concat(n.inactiveColor, '"') : "",
                    switchWidth: isNaN(n.switchWidth) || 40 === n.switchWidth ? "" : ':width="'.concat(n.switchWidth, '"'),
                    rateMax: isNaN(n.max) || 5 === n.max ? "" : ':max="'.concat(n.max, '"'),
                    lowThreshold: isNaN(n.lowThreshold) || 2 === n.lowThreshold ? "" : ':low-threshold="'.concat(n.lowThreshold, '"'),
                    highThreshold: isNaN(n.highThreshold) || 4 === n.highThreshold ? "" : ':high-threshold="'.concat(n.highThreshold, '"'),
                    allowHalf: n.allowHalf ? "allow-half" : "",
                    showText: n.showText ? "show-text" : "",
                    showScore: n.showScore ? "show-score" : "",
                    sliderMin: isNaN(n.min) || 0 === n.min ? "" : ':min="'.concat(n.min, '"'),
                    sliderMax: isNaN(n.max) || 100 === n.max ? "" : ':max="'.concat(n.max, '"'),
                    sliderStep: isNaN(n.step) || 1 === n.step ? "" : ':step="'.concat(n.step, '"'),
                    sliderRange: n.range ? "range" : "",
                    sliderVertical: n.vertical ? "vertical" : "",
                    uploadAction: n.uploadURL ? 'action="'.concat(n.uploadURL, '"') : "",
                    withCredentials: n.withCredentials ? "with-credentials" : "",
                    multipleSelect: n.multipleSelect ? "multiple" : "",
                    showFileList: n.showFileList ? "show-file-list" : "",
                    limit: isNaN(n.limit) ? "" : ':limit="'.concat(n.limit, '"'),
                    uploadTipSlotChild: n.uploadTip ? '<template #tip><div class="el-upload__tip">'.concat(n.uploadTip, "</div></template>") : "",
                    pictureUploadIconChild: '<template #default><i class="el-icon-plus"></i></template>',
                    fileUploadIconChild: '<template #default><i class="el-icon-plus"></i></template>',
                    buttonType: n.type ? 'type="'.concat(n.type, '"') : "",
                    buttonPlain: n.plain ? "plain" : "",
                    buttonRound: n.round ? "round" : "",
                    buttonCircle: n.circle ? "circle" : "",
                    buttonIcon: n.icon ? 'icon="'.concat(n.icon, '"') : "",
                    contentPosition: n.contentPosition && "center" !== n.contentPosition ? 'content-position="'.concat(n.contentPosition, '"') : "",
                    appendButtonChild: n.appendButton ? '<template #append><el-button class="'.concat(n.buttonIcon, '" ').concat(n.appendButtonDisabled ? "disabled" : "", "></el-button></template>") : ""
                };
            }

            function ce(e, t) {
                var n = e.options,
                    i = n.buttonStyle ? "el-radio-button" : "el-radio",
                    o = n.border ? "border" : "",
                    r = 'style="{display: '.concat(n.displayStyle, '}"');
                return "<".concat(i, ' v-for="(item, index) in ').concat(n.name, 'Options" :key="index" :label="item.value"\n          :disabled="item.disabled" ').concat(o, " ").concat(r, ">{{item.label}}</").concat(i, ">");
            }

            function ue(e, t) {
                var n = e.options,
                    i = n.buttonStyle ? "el-checkbox-button" : "el-checkbox",
                    o = n.border ? "border" : "",
                    r = 'style="{display: '.concat(n.displayStyle, '}"');
                return "<".concat(i, ' v-for="(item, index) in ').concat(n.name, 'Options" :key="index" :label="item.value"\n          :disabled="item.disabled" ').concat(o, " ").concat(r, ">{{item.label}}</").concat(i, ">");
            }

            function de(e, t) {
                var n = e.options,
                    i = "el-option";
                return "<".concat(i, ' v-for="(item, index) in ').concat(n.name, 'Options" :key="index" :label="item.label"\n          :value="item.value" :disabled="item.disabled"></').concat(i, ">");
            }
            var he = {
                input: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.readonly,
                        r = n.disabled,
                        s = n.size,
                        a = n.type,
                        l = n.showPassword,
                        c = n.placeholder,
                        u = n.clearable,
                        d = n.minlength,
                        h = n.maxlength,
                        f = n.showWordLimit,
                        p = n.prefixIcon,
                        m = n.suffixIcon,
                        g = n.appendButtonChild;
                    return "<el-input ".concat(i, " ").concat(o, " ").concat(r, " ").concat(s, " ").concat(a, " ").concat(l, " ").concat(c, " ").concat(u, "\n            ").concat(d, " ").concat(h, " ").concat(f, " ").concat(p, " ").concat(m, ">").concat(g, "</el-input>");
                },
                textarea: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.readonly,
                        r = n.disabled,
                        s = n.size,
                        a = n.type,
                        l = n.showPassword,
                        c = n.placeholder,
                        u = n.rows,
                        d = n.clearable,
                        h = n.minlength,
                        f = n.maxlength,
                        p = n.showWordLimit;
                    return '<el-input type="textarea" '.concat(i, " ").concat(o, " ").concat(r, " ").concat(s, " ").concat(a, " ").concat(l, " ").concat(c, "\n            ").concat(u, " ").concat(d, " ").concat(h, " ").concat(f, " ").concat(p, "></el-input>");
                },
                number: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.size,
                        s = n.type,
                        a = n.showPassword,
                        l = n.placeholder,
                        c = n.controlsPosition,
                        u = n.min,
                        d = n.max,
                        h = n.precision,
                        f = n.step;
                    return "<el-input-number ".concat(i, ' class="full-width-input" ').concat(o, " ").concat(r, " ").concat(s, " ").concat(a, "\n            ").concat(l, " ").concat(c, " ").concat(u, " ").concat(d, " ").concat(h, " ").concat(f, "></el-input-number>");
                },
                radio: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.size,
                        s = ce(e, t);
                    return "<el-radio-group ".concat(i, " ").concat(o, " ").concat(r, ">").concat(s, "</el-radio-group>");
                },
                checkbox: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.size,
                        s = ue(e, t);
                    return "<el-checkbox-group ".concat(i, " ").concat(o, " ").concat(r, ">").concat(s, "</el-checkbox-group>");
                },
                select: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.size,
                        s = n.clearable,
                        a = n.filterable,
                        l = n.allowCreate,
                        c = n.defaultFirstOption,
                        u = n.automaticDropdown,
                        d = n.multiple,
                        h = n.multipleLimit,
                        f = n.remote,
                        p = n.placeholder,
                        m = de(e, t);
                    return "<el-select ".concat(i, ' class="full-width-input" ').concat(o, " ").concat(r, " ").concat(s, " ").concat(a, "\n            ").concat(l, " ").concat(c, " ").concat(u, " ").concat(d, " ").concat(h, " ").concat(p, "\n            ").concat(f, ">").concat(m, "</el-select>");
                },
                time: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.readonly,
                        r = n.disabled,
                        s = n.size,
                        a = n.placeholder,
                        l = n.clearable,
                        c = n.format,
                        u = n.editable;
                    return "<el-time-picker ".concat(i, ' class="full-width-input" ').concat(o, " ").concat(r, " ").concat(s, " ").concat(c, '\n            value-format="HH:mm:ss" ').concat(a, " ").concat(l, " ").concat(u, "></el-time-picker>");
                },
                "time-range": function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.readonly,
                        r = n.disabled,
                        s = n.size,
                        a = n.startPlaceholder,
                        l = n.endPlaceholder,
                        c = n.clearable,
                        u = n.format,
                        d = n.editable;
                    return "<el-time-picker is-range ".concat(i, ' class="full-width-input" ').concat(o, " ").concat(r, " ").concat(s, " ").concat(u, '\n            value-format="HH:mm:ss" ').concat(a, " ").concat(l, " ").concat(c, " ").concat(d, "></el-time-picker>");
                },
                date: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.readonly,
                        r = n.disabled,
                        s = n.size,
                        a = n.type,
                        l = n.placeholder,
                        c = n.clearable,
                        u = n.format,
                        d = n.valueFormat,
                        h = n.editable;
                    return "<el-date-picker ".concat(i, " ").concat(a, ' class="full-width-input" ').concat(o, " ").concat(r, " ").concat(s, " ").concat(u, "\n              ").concat(d, " ").concat(l, " ").concat(c, " ").concat(h, "></el-date-picker>");
                },
                "date-range": function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.readonly,
                        r = n.disabled,
                        s = n.size,
                        a = n.type,
                        l = n.startPlaceholder,
                        c = n.endPlaceholder,
                        u = n.clearable,
                        d = n.format,
                        h = n.valueFormat,
                        f = n.editable;
                    return "<el-date-picker is-range ".concat(i, " ").concat(a, ' class="full-width-input" ').concat(o, " ").concat(r, " ").concat(s, " ").concat(d, "\n            ").concat(h, " ").concat(l, " ").concat(c, " ").concat(u, " ").concat(f, "></el-date-picker>");
                },
                switch: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.activeText,
                        s = n.inactiveText,
                        a = n.activeColor,
                        l = n.inactiveColor,
                        c = n.switchWidth;
                    return "<el-switch ".concat(i, " ").concat(o, " ").concat(r, " ").concat(s, " ").concat(a, " ").concat(l, "\n            ").concat(c, "></el-switch>");
                },
                rate: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.rateMax,
                        s = n.lowThreshold,
                        a = n.highThreshold,
                        l = n.allowHalf,
                        c = n.showText,
                        u = n.showScore;
                    return "<el-rate ".concat(i, " ").concat(o, " ").concat(r, " ").concat(s, " ").concat(a, " ").concat(l, "\n            ").concat(c, " ").concat(u, "></el-rate>");
                },
                color: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.size;
                    return "<el-color-picker ".concat(i, " ").concat(o, " ").concat(r, "></el-color-picker>");
                },
                slider: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.sliderMin,
                        s = n.sliderMax,
                        a = n.sliderStep,
                        l = n.sliderRange,
                        c = n.sliderVertical;
                    return "<el-slider ".concat(i, " ").concat(o, " ").concat(r, " ").concat(s, " ").concat(a, " ").concat(l, "\n            ").concat(c, "></el-slider>");
                },
                "picture-upload": function(e, t) {
                    var n = le(e, t),
                        i = (n.vModel, n.disabled),
                        o = n.uploadAction,
                        r = n.withCredentials,
                        s = n.multipleSelect,
                        a = n.showFileList,
                        l = n.limit,
                        c = n.uploadTipSlotChild,
                        u = n.pictureUploadIconChild,
                        d = e.options;
                    return '<el-upload :file-list="'.concat(d.name, 'FileList" :headers="').concat(d.name, 'UploadHeaders" :data="').concat(d.name, 'UploadData" \n            ').concat(i, " ").concat(o, ' list-type="picture-card" ').concat(r, " ").concat(s, " ").concat(a, " \n            ").concat(l, ">").concat(c, " ").concat(u, "</el-upload>");
                },
                "file-upload": function(e, t) {
                    var n = le(e, t),
                        i = (n.vModel, n.disabled),
                        o = n.uploadAction,
                        r = n.withCredentials,
                        s = n.multipleSelect,
                        a = n.showFileList,
                        l = n.limit,
                        c = n.uploadTipSlotChild,
                        u = n.fileUploadIconChild,
                        d = e.options;
                    return '<el-upload :file-list="'.concat(d.name, 'FileList" :headers="').concat(d.name, 'UploadHeaders" :data="').concat(d.name, 'UploadData" \n            ').concat(i, " ").concat(o, ' list-type="picture-card" ').concat(r, " ").concat(s, " ").concat(a, " \n            ").concat(l, ">").concat(c, " ").concat(u, "</el-upload>");
                },
                "rich-editor": function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.placeholder;
                    return "<vue-editor ".concat(i, " ").concat(o, " ").concat(r, "></vue-editor>");
                },
                cascader: function(e, t) {
                    var n = le(e, t),
                        i = n.vModel,
                        o = n.disabled,
                        r = n.size,
                        s = n.clearable,
                        a = n.filterable,
                        l = n.placeholder,
                        c = e.options,
                        u = ':options="'.concat(c.name, 'Options"');
                    return "<el-cascader ".concat(i, ' class="full-width-input" ').concat(u, " ").concat(o, " ").concat(r, " ").concat(s, "\n            ").concat(a, " ").concat(l, "></el-cascader>");
                },
                "static-text": function(e, t) {
                    return "<div>".concat(e.options.textContent, "</div>");
                },
                "html-text": function(e, t) {
                    return '<div v-html="'.concat(e.options.htmlContent, '"></div>');
                },
                button: function(e, t) {
                    var n = le(e, t),
                        i = n.buttonType,
                        o = n.buttonPlain,
                        r = n.buttonRound,
                        s = n.buttonCircle,
                        a = n.buttonIcon,
                        l = n.disabled;
                    return "<el-button ".concat(i, " ").concat(o, " ").concat(r, " ").concat(s, " ").concat(a, "\n            ").concat(l, ">").concat(e.options.label, "</el-button>");
                },
                divider: function(e, t) {
                    var n = le(e, t),
                        i = n.contentPosition;
                    return '<el-divider direction="horizontal" '.concat(i, "></el-divider>");
                }
            };

            function fe(e, t) {
                var n = e.options,
                    i = n.labelHidden ? "" : n.label,
                    o = n.labelHidden ? 'label-width="0"' : n.labelWidth ? 'label-width="'.concat(n.labelWidth, 'px"') : "",
                    r = n.labelTooltip ? 'title="'.concat(n.labelTooltip, '"') : "",
                    s = 'prop="'.concat(n.name, '"'),
                    a = [];
                n.required && a.push("required"), n.customClass && n.customClass.length > 0 && a.push(n.customClass.join(" ")), n.labelAlign ? "label-left-align" !== n.labelAlign && a.push(n.labelAlign) : e.formItemFlag && "label-left-align" !== t.labelAlign && a.push(t.labelAlign), e.formItemFlag || a.push("static-content-item");
                var l = a.length > 0 ? 'class="'.concat(a.join(" "), '"') : "",
                    c = '<template #label><span class="custom-label">'.concat("front" === n.labelIconPosition ? n.labelTooltip ? '<el-tooltip content="'.concat(n.labelTooltip, '" effect="light"><i class="').concat(n.labelIconClass, '"></i></el-tooltip>').concat(n.label) : '<i class="'.concat(n.labelIconClass, '"></i>').concat(n.label) : n.labelTooltip ? "".concat(n.label, '<el-tooltip content="').concat(n.labelTooltip, '" effect="light"><i class="').concat(n.labelIconClass, '"></i></el-tooltip>') : "".concat(n.label, '<i class="').concat(n.labelIconClass, '"></i>'), "\n</span></template>");
                !n.labelIconClass && (c = "");
                var u = he[e.type] ? he[e.type](e, t) : null,
                    d = !!e.formItemFlag,
                    h = n.hidden ? 'v-show="false"' : "";
                return d ? '<el-form-item label="'.concat(i, '" ').concat(o, " ").concat(r, " ").concat(s, " ").concat(l, ">\n  ").concat(c, "\n  ").concat(u, "\n</el-form-item>") : "<div ".concat(l, " ").concat(h, ">").concat(u, "</div>");
            }

            function pe(e, t) {
                var n = arguments.length > 2 && undefined !== arguments[2] && arguments[2],
                    i = n ? "@submit.prevent" : "@submit.native.prevent",
                    o = [];
                t.forEach(function(t) {
                    "container" === t.category ? o.push(ae(t, e)) : o.push(fe(t, e));
                });
                var r = '  <el-form :model="'.concat(e.modelName, '" ref="').concat(e.refName, '" :rules="').concat(e.rulesName, '"\n    label-position="').concat(e.labelPosition, '" label-width="').concat(e.labelWidth, 'px" size="').concat(e.size || "medium", '"\n    ').concat(i, ">\n  ").concat(o ? o.join("\n") : "", "\n</el-form>");
                return r;
            }
            var me = function(e) {
                    var t = '  .el-input-number.full-width-input, .el-cascader.full-width-input {\n    width: 100% !important;\n  }\n  \n  .el-form-item--medium {\n    .el-radio {\n      line-height: 36px !important;\n    }\n  \n    .el-rate{\n      margin-top: 8px;\n    }\n  }\n\n  .el-form-item--small {\n    .el-radio {\n      line-height: 32px !important;\n    }\n  \n    .el-rate{\n      margin-top: 6px;\n    }\n  }\n\n  .el-form-item--mini {\n    .el-radio {\n      line-height: 28px !important;\n    }\n  \n    .el-rate{\n      margin-top: 4px;\n    }\n  }\n  \n  .clear-fix:before, .clear-fix:after {\n    display: table;\n    content: "";\n  }\n\n  .clear-fix:after {\n    clear: both;\n  }\n\n  .float-right {\n    float: right;\n  }\n\n'.concat(e.cssCode);
                    return t;
                },
                ge = function(e) {
                    var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
                        n = "  div.table-container {\n    table.table-layout {\n      width: 100%;\n      table-layout: fixed;\n      border-collapse: collapse;\n      \n      td.table-cell {\n        display: table-cell;\n        height: 36px;\n        border: 1px solid #e1e2e3;\n      }\n    }\n  }\n  \n  div.tab-container {\n  }\n  \n  .label-left-align ".concat(t ? ":deep(.el-form-item__label)" : "::v-deep .el-form-item__label", " {\n    text-align: left;\n  }\n\n  .label-center-align ").concat(t ? ":deep(.el-form-item__label)" : "::v-deep .el-form-item__label", " {\n    text-align: center;\n  }\n\n  .label-right-align ").concat(t ? ":deep(.el-form-item__label)" : "::v-deep .el-form-item__label", " {\n    text-align: right;\n  }\n  \n  .custom-label {\n  }\n  \n  .static-content-item {\n    min-height: 20px;\n    display: flex;\n    align-items: center;\n\n    ").concat(t ? ":deep(.el-divider--horizontal)" : "::v-deep .el-divider--horizontal", " {\n      margin: 0;\n    }\n  }");
                    return n;
                },
                ve = function(e, t) {
                    se[e] = t;
                },
                be = function(e, t) {
                    he[e] = t;
                },
                ye = function(e, t, n) {
                    var i = arguments.length > 3 && undefined !== arguments[3] && arguments[3],
                        o = n.html(pe(e, t, i), ne.html),
                        r = n.js(i ? oe(e, t) : Object(ee.f)(e, t), ne.js),
                        s = n.css(me(e), ne.css),
                        a = n.css(ge(e, i), ne.css);
                    return "<!-- \nCodes Generated By VForm:\nhttps://www.vform666.com\n-->\n\n<template>\n".concat(o, "\n</template>\n\n<script>\n").concat(r, '\n</script>\n\n<style lang="scss">\n').concat(s, '\n</style>\n\n<style lang="scss" scoped>\n').concat(a, "\n</style>");
                },
                we = n("21a6"),
                xe = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("div", [n("div", {
                        staticClass: "trump-table-header"
                    }, [n("h3", [e._v(e._s(e.field.options.label))]), n("el-button", {
                        attrs: {
                            type: "primary"
                        },
                        on: {
                            click: function(t) {
                                e.showDialog = true;
                            }
                        }
                    }, [e._v("新增")])], 1), n("el-table", {
                        staticStyle: {
                            width: "100%"
                        },
                        attrs: {
                            data: e.tData
                        }
                    }, [e._l(e.tableColumns, function(e, t) {
                        return n("el-table-column", {
                            key: t,
                            attrs: {
                                prop: e.key,
                                label: e.value
                            }
                        });
                    }), n("el-table-column", {
                        attrs: {
                            fixed: "right",
                            label: "操作",
                            width: "120"
                        },
                        scopedSlots: e._u([{
                            key: "default",
                            fn: function(t) {
                                return [n("el-button", {
                                    attrs: {
                                        type: "text",
                                        size: "small"
                                    },
                                    on: {
                                        click: function(n) {
                                            return e.handleEdit(t.row, t.index);
                                        }
                                    }
                                }, [e._v("编辑")]), n("el-button", {
                                    attrs: {
                                        type: "text",
                                        size: "small"
                                    },
                                    on: {
                                        click: function(n) {
                                            return e.handleDelete(t.index);
                                        }
                                    }
                                }, [e._v("删除")])];
                            }
                        }])
                    })], 2), e.showDialog && e.formJson ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: "add" == e.addType ? "新增" : "编辑",
                            visible: e.showDialog,
                            "show-close": true,
                            center: "",
                            "modal-append-to-body": "",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showDialog = t;
                            }
                        }
                    }, [n("div", {
                        staticClass: "form-render-wrapper"
                    }, [n("VFormRender", {
                        ref: "vFormRef",
                        attrs: {
                            "form-json": e.formJson,
                            "form-data": e.editFormData,
                            "preview-state": true
                        }
                    })], 1), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        attrs: {
                            type: "primary"
                        },
                        on: {
                            click: e.doJsonImport
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.confirm")))]), n("el-button", {
                        on: {
                            click: function(t) {
                                e.showDialog = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.cancel")))])], 1)]) : e._e()], 1);
                },
                _e = [],
                Ce = (n("cca6"), n("5c96"), {
                    mixins: [C.b],
                    components: {
                        VFormRender: Y
                    },
                    props: {
                        field: Object,
                        slotProps: Object,
                        tableData: Array
                    },
                    data: function() {
                        return {
                            tData: [],
                            tableColumns: [],
                            formJson: null,
                            editFormData: {},
                            showDialog: false,
                            addType: "add",
                            rowIndex: 0
                        };
                    },
                    mounted: function() {
                        this.tData = Object.assign([], this.tableData), this.getTableColumns(), this.getAddFormFields();
                    },
                    methods: {
                        getTableData: function() {
                            return this.tData;
                        },
                        getTableColumns: function() {
                            var e = this,
                                t = this.field.options.tableColumns;
                            t && axios.get(t).then(function(t) {
                                e.tableColumns = t.data.data;
                            }).catch(function(e) {
                                console.error(e);
                            });
                        },
                        getAddFormFields: function() {
                            var e = this,
                                t = this.field.options.addFormFields;
                            t && axios.get(t).then(function(t) {
                                e.formJson = t.data.data;
                            }).catch(function(e) {
                                console.error(e);
                            });
                        },
                        doJsonImport: function() {
                            var e = this;
                            this.$refs.vFormRef.getFormData().then(function(t) {
                                "add" == e.addType ? e.tData.push(t) : "edit" == e.addType && e.tData.splice(e.rowIndex, 1, t), e.showDialog = false, e.editFormData = {};
                            }).catch(function(t) {
                                e.$message.error(t);
                            });
                        },
                        handleEdit: function(e, t) {
                            this.addType = "edit", this.editFormData = e, this.rowIndex = t, this.showDialog = true;
                        },
                        handleDelete: function(e) {
                            this.tData.splice(e, 1), this.editFormData = {};
                        }
                    }
                }),
                ke = Ce,
                Se = (n("832d"), Object($.a)(ke, xe, _e, false, null, "1406500b", null)),
                Oe = Se.exports,
                Ee = {
                    name: "ToolbarPanel",
                    mixins: [C.b],
                    components: {
                        VFormRender: Y,
                        CodeEditor: X.a,
                        Clipboard: Z.a,
                        SvgIcon: T,
                        TrumpTable: Oe
                    },
                    props: {
                        designer: Object,
                        globalDsv: {
                            type: Object,
                            default: function() {
                                return {};
                            }
                        }
                    },
                    inject: ["getDesignerConfig"],
                    data: function() {
                        return {
                            designerConfig: this.getDesignerConfig(),
                            toolbarWidth: 420,
                            showPreviewDialogFlag: false,
                            showImportJsonDialogFlag: false,
                            showExportJsonDialogFlag: false,
                            showExportCodeDialogFlag: false,
                            showFormDataDialogFlag: false,
                            showExportSFCDialogFlag: false,
                            showNodeTreeDrawerFlag: false,
                            nodeTreeData: [],
                            testFunc: "",
                            importTemplate: "",
                            jsonContent: "",
                            jsonRawContent: "",
                            formDataJson: "",
                            formDataRawJson: "",
                            vueCode: "",
                            htmlCode: "",
                            sfcCode: "",
                            sfcCodeV3: "",
                            activeCodeTab: "vue",
                            activeSFCTab: "vue2",
                            testFormData: {
                                select62173: 2
                            },
                            testOptionData: {
                                select62173: [{
                                    label: "01",
                                    value: 1
                                }, {
                                    label: "22",
                                    value: 2
                                }, {
                                    label: "333",
                                    value: 3
                                }],
                                select001: [{
                                    label: "辣椒",
                                    value: 1
                                }, {
                                    label: "菠萝",
                                    value: 2
                                }, {
                                    label: "丑橘子",
                                    value: 3
                                }]
                            }
                        };
                    },
                    computed: {
                        formJson: function() {
                            return {
                                widgetList: Object(_.d)(this.designer.widgetList),
                                formConfig: Object(_.d)(this.designer.formConfig)
                            };
                        },
                        undoDisabled: function() {
                            return !this.designer.undoEnabled();
                        },
                        redoDisabled: function() {
                            return !this.designer.redoEnabled();
                        },
                        layoutType: function() {
                            return this.designer.getLayoutType();
                        },
                        designerDsv: function() {
                            return this.globalDsv;
                        }
                    },
                    watch: {
                        "designer.widgetList": {
                            deep: true,
                            handler: function(e) {}
                        }
                    },
                    mounted: function() {
                        var e = this,
                            t = this.designerConfig.toolbarMaxWidth || 420,
                            n = this.designerConfig.toolbarMinWidth || 300,
                            i = window.innerWidth - 260 - 300 - 320 - 80;
                        this.toolbarWidth = i >= t ? t : i <= n ? n : i, Object(_.a)(function() {
                            e.$nextTick(function() {
                                var i = window.innerWidth - 260 - 300 - 320 - 80;
                                e.toolbarWidth = i >= t ? t : i <= n ? n : i;
                            });
                        });
                    },
                    methods: {
                        showToolButton: function(e) {
                            return undefined === this.designerConfig[e] || !!this.designerConfig[e];
                        },
                        buildTreeNodeOfWidget: function(e, t) {
                            var n = this,
                                i = {
                                    id: e.id,
                                    label: e.options.label || e.type
                                };
                            t.push(i), undefined !== e.category && (i.children = [], "grid" === e.type ? e.cols.map(function(t) {
                                var o = {
                                    id: t.id,
                                    label: t.options.name || e.type,
                                    children: []
                                };
                                i.children.push(o), t.widgetList.map(function(e) {
                                    n.buildTreeNodeOfWidget(e, o.children);
                                });
                            }) : "table" === e.type ? e.rows.map(function(e) {
                                var t = {
                                    id: e.id,
                                    label: "table-row",
                                    selectable: false,
                                    children: []
                                };
                                i.children.push(t), e.cols.map(function(e) {
                                    if (!e.merged) {
                                        var i = t.children,
                                            o = {
                                                id: e.id,
                                                label: "table-cell",
                                                children: []
                                            };
                                        i.push(o), e.widgetList.map(function(e) {
                                            n.buildTreeNodeOfWidget(e, o.children);
                                        });
                                    }
                                });
                            }) : "tab" === e.type ? e.tabs.map(function(t) {
                                var o = {
                                    id: t.id,
                                    label: t.options.name || e.type,
                                    selectable: false,
                                    children: []
                                };
                                i.children.push(o), t.widgetList.map(function(e) {
                                    n.buildTreeNodeOfWidget(e, o.children);
                                });
                            }) : ("sub-form" === e.type || "container" === e.category) && e.widgetList.map(function(e) {
                                n.buildTreeNodeOfWidget(e, i.children);
                            }));
                        },
                        refreshNodeTree: function() {
                            var e = this;
                            this.nodeTreeData.length = 0, this.designer.widgetList.forEach(function(t) {
                                e.buildTreeNodeOfWidget(t, e.nodeTreeData);
                            });
                        },
                        showNodeTreeDrawer: function() {
                            var e = this;
                            this.refreshNodeTree(), this.showNodeTreeDrawerFlag = true, this.$nextTick(function() {
                                e.designer.selectedId && e.$refs.nodeTree.setCurrentKey(e.designer.selectedId);
                            });
                        },
                        undoHistory: function() {
                            this.designer.undoHistoryStep();
                        },
                        redoHistory: function() {
                            this.designer.redoHistoryStep();
                        },
                        changeLayoutType: function(e) {
                            this.designer.changeLayoutType(e);
                        },
                        clearFormWidget: function() {
                            this.designer.clearDesigner(), this.designer.formWidget.clearWidgetRefList();
                        },
                        previewForm: function() {
                            this.showPreviewDialogFlag = true;
                        },
                        saveAsFile: function(e, t) {
                            var n = this;
                            this.$prompt(this.i18nt("designer.hint.fileNameForSave"), this.i18nt("designer.hint.saveFileTitle"), {
                                inputValue: t,
                                closeOnClickModal: false,
                                inputPlaceholder: this.i18nt("designer.hint.fileNameInputPlaceholder")
                            }).then(function(i) {
                                var o = i.value;
                                if (o || (o = t), 1 != Object(_.j)("vscode")) {
                                    var r = new Blob([e], {
                                        type: "text/plain;charset=utf-8"
                                    });
                                    Object(we.saveAs)(r, o);
                                } else n.vsSaveFile(o, e);
                            }).catch(function() {});
                        },
                        vsSaveFile: function(e, t) {
                            var n = {
                                cmd: "writeFile",
                                data: {
                                    fileName: e,
                                    code: t
                                }
                            };
                            window.parent.postMessage(n, "*");
                        },
                        importJson: function() {
                            this.importTemplate = JSON.stringify(this.designer.getImportTemplate(), null, "  "), this.showImportJsonDialogFlag = true;
                        },
                        doJsonImport: function() {
                            try {
                                var e = JSON.parse(this.importTemplate);
                                this.designer.loadFormJson(e), this.showImportJsonDialogFlag = false, this.$message.success(this.i18nt("designer.hint.importJsonSuccess")), this.designer.emitHistoryChange(), this.designer.emitEvent("form-json-imported", []);
                            } catch (t) {
                                this.$message.error(t + "");
                            }
                        },
                        exportJson: function() {
                            var e = Object(_.d)(this.designer.widgetList),
                                t = Object(_.d)(this.designer.formConfig);
                            this.jsonContent = JSON.stringify({
                                widgetList: e,
                                formConfig: t
                            }, null, "  "), this.jsonRawContent = JSON.stringify({
                                widgetList: e,
                                formConfig: t
                            }), this.showExportJsonDialogFlag = true;
                        },
                        copyFormJson: function(e) {
                            Object(_.c)(this.jsonRawContent, e, this.$message, this.i18nt("designer.hint.copyJsonSuccess"), this.i18nt("designer.hint.copyJsonFail"));
                        },
                        saveFormJson: function() {
                            this.saveAsFile(this.jsonContent, "vform".concat(Object(_.f)(), ".json"));
                        },
                        exportCode: function() {
                            this.vueCode = Q(this.formJson), this.htmlCode = Q(this.formJson, "html"), this.showExportCodeDialogFlag = true;
                        },
                        copyVueCode: function(e) {
                            Object(_.c)(this.vueCode, e, this.$message, this.i18nt("designer.hint.copyVueCodeSuccess"), this.i18nt("designer.hint.copyVueCodeFail"));
                        },
                        copyHtmlCode: function(e) {
                            Object(_.c)(this.htmlCode, e, this.$message, this.i18nt("designer.hint.copyHtmlCodeSuccess"), this.i18nt("designer.hint.copyHtmlCodeFail"));
                        },
                        saveVueCode: function() {
                            this.saveAsFile(this.vueCode, "vform".concat(Object(_.f)(), ".vue"));
                        },
                        saveHtmlCode: function() {
                            this.saveAsFile(this.htmlCode, "vform".concat(Object(_.f)(), ".html"));
                        },
                        generateSFC: function() {
                            var e = this;
                            ie(function(t) {
                                e.sfcCode = ye(e.designer.formConfig, e.designer.widgetList, t), e.sfcCodeV3 = ye(e.designer.formConfig, e.designer.widgetList, t, true), e.showExportSFCDialogFlag = true;
                            });
                        },
                        copyV2SFC: function(e) {
                            Object(_.c)(this.sfcCode, e, this.$message, this.i18nt("designer.hint.copySFCSuccess"), this.i18nt("designer.hint.copySFCFail"));
                        },
                        copyV3SFC: function(e) {
                            Object(_.c)(this.sfcCodeV3, e, this.$message, this.i18nt("designer.hint.copySFCSuccess"), this.i18nt("designer.hint.copySFCFail"));
                        },
                        saveV2SFC: function() {
                            this.saveAsFile(this.sfcCode, "vformV2-".concat(Object(_.f)(), ".vue"));
                        },
                        saveV3SFC: function() {
                            this.saveAsFile(this.sfcCodeV3, "vformV3-".concat(Object(_.f)(), ".vue"));
                        },
                        getFormData: function() {
                            var e = this;
                            this.$refs.preForm.getFormData().then(function(t) {
                                e.formDataJson = JSON.stringify(t, null, "  "), e.formDataRawJson = JSON.stringify(t), e.showFormDataDialogFlag = true;
                            }).catch(function(t) {
                                e.$message.error(t);
                            });
                        },
                        copyFormDataJson: function(e) {
                            Object(_.c)(this.formDataRawJson, e, this.$message, this.i18nt("designer.hint.copyJsonSuccess"), this.i18nt("designer.hint.copyJsonFail"));
                        },
                        saveFormData: function() {
                            this.saveAsFile(this.htmlCode, "formData".concat(Object(_.f)(), ".json"));
                        },
                        resetForm: function() {
                            this.$refs.preForm.resetForm();
                        },
                        setFormDisabled: function() {
                            this.$refs.preForm.disableForm();
                        },
                        setFormEnabled: function() {
                            this.$refs.preForm.enableForm();
                        },
                        printFormJson: function() {
                            var e = {
                                widgetList: Object(_.d)(this.designer.widgetList),
                                formConfig: Object(_.d)(this.designer.formConfig)
                            };
                            console.log(e);
                        },
                        testValidate: function() {
                            console.log("test===", this.$refs.preForm.validateForm());
                        },
                        testSetFormData: function() {
                            var e = {
                                checkbox45524: [1, 2]
                            };
                            this.$refs.preForm.setFormData(e);
                        },
                        testReloadOptionData: function() {
                            this.testOptionData.select001.push({
                                label: "aaa",
                                value: 888
                            }), this.$refs.preForm.reloadOptionData("select001");
                        },
                        handleFormChange: function(e, t, n, i) {},
                        testOnAppendButtonClick: function(e) {
                            console.log("test", e);
                        },
                        testOnButtonClick: function(e) {
                            console.log("test", e);
                        },
                        findWidgetById: function(e) {
                            var t = null;
                            return Object(_.r)(this.designer.widgetList, function(n) {
                                n.id === e && (t = n);
                            }), t;
                        },
                        onNodeTreeClick: function(e, t, n) {
                            if (undefined === e.selectable || e.selectable) {
                                var i = e.id,
                                    o = this.findWidgetById(i);
                                o && this.designer.setSelected(o);
                            } else this.$message.info(this.i18nt("designer.hint.currentNodeCannotBeSelected"));
                        }
                    }
                },
                $e = Ee,
                Me = (n("18f2"), Object($.a)($e, R, j, false, null, "43f9a6fe", null)),
                Te = Me.exports,
                Le = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-container", {
                        staticClass: "panel-container"
                    }, [n("el-tabs", {
                        staticStyle: {
                            height: "100%",
                            overflow: "hidden"
                        },
                        attrs: {
                            "active-name": e.activeTab
                        }
                    }, [n("el-tab-pane", {
                        attrs: {
                            label: e.i18nt("designer.hint.widgetSetting"),
                            name: "1"
                        }
                    }, [n("el-scrollbar", {
                        staticClass: "setting-scrollbar",
                        style: {
                            height: e.scrollerHeight
                        }
                    }, [e.designer.selectedWidget && !e.designer.selectedWidget.category ? [n("el-form", {
                        staticClass: "setting-form",
                        attrs: {
                            model: e.optionModel,
                            size: "mini",
                            "label-position": "left",
                            "label-width": "120px"
                        },
                        nativeOn: {
                            submit: function(e) {
                                e.preventDefault();
                            }
                        }
                    }, [n("el-collapse", {
                        staticClass: "setting-collapse",
                        model: {
                            value: e.widgetActiveCollapseNames,
                            callback: function(t) {
                                e.widgetActiveCollapseNames = t;
                            },
                            expression: "widgetActiveCollapseNames"
                        }
                    }, [e.showCollapse(e.commonProps) ? n("el-collapse-item", {
                        attrs: {
                            name: "1",
                            title: e.i18nt("designer.setting.commonSetting")
                        }
                    }, [e._l(e.commonProps, function(t, i) {
                        return [e.hasPropEditor(i, t) ? n(e.getPropEditor(i, t), {
                            tag: "component",
                            attrs: {
                                designer: e.designer,
                                "selected-widget": e.selectedWidget,
                                "option-model": e.optionModel
                            }
                        }) : e._e()];
                    })], 2) : e._e(), e.showCollapse(e.advProps) ? n("el-collapse-item", {
                        attrs: {
                            name: "2",
                            title: e.i18nt("designer.setting.advancedSetting")
                        }
                    }, [e._l(e.advProps, function(t, i) {
                        return [e.hasPropEditor(i, t) ? n(e.getPropEditor(i, t), {
                            tag: "component",
                            attrs: {
                                designer: e.designer,
                                "selected-widget": e.selectedWidget,
                                "option-model": e.optionModel
                            }
                        }) : e._e()];
                    })], 2) : e._e(), e.showEventCollapse() && e.showCollapse(e.eventProps) ? n("el-collapse-item", {
                        attrs: {
                            name: "3",
                            title: e.i18nt("designer.setting.eventSetting")
                        }
                    }, [e._l(e.eventProps, function(t, i) {
                        return [e.hasPropEditor(i, t) ? n(e.getPropEditor(i, t), {
                            tag: "component",
                            attrs: {
                                designer: e.designer,
                                "selected-widget": e.selectedWidget,
                                "option-model": e.optionModel
                            }
                        }) : e._e()];
                    })], 2) : e._e()], 1)], 1)] : e._e(), e.designer.selectedWidget && e.designer.selectedWidget.category ? [n("el-form", {
                        staticClass: "setting-form",
                        attrs: {
                            model: e.optionModel,
                            size: "mini",
                            "label-position": "left",
                            "label-width": "120px"
                        },
                        nativeOn: {
                            submit: function(e) {
                                e.preventDefault();
                            }
                        }
                    }, [n("el-collapse", {
                        staticClass: "setting-collapse",
                        model: {
                            value: e.widgetActiveCollapseNames,
                            callback: function(t) {
                                e.widgetActiveCollapseNames = t;
                            },
                            expression: "widgetActiveCollapseNames"
                        }
                    }, [e.showCollapse(e.commonProps) ? n("el-collapse-item", {
                        attrs: {
                            name: "1",
                            title: e.i18nt("designer.setting.commonSetting")
                        }
                    }, [e._l(e.commonProps, function(t, i) {
                        return [e.hasPropEditor(i, t) ? n(e.getPropEditor(i, t), {
                            tag: "component",
                            attrs: {
                                designer: e.designer,
                                "selected-widget": e.selectedWidget,
                                "option-model": e.optionModel
                            }
                        }) : e._e()];
                    })], 2) : e._e(), e.showCollapse(e.advProps) ? n("el-collapse-item", {
                        attrs: {
                            name: "2",
                            title: e.i18nt("designer.setting.advancedSetting")
                        }
                    }, [e._l(e.advProps, function(t, i) {
                        return [e.hasPropEditor(i, t) ? n(e.getPropEditor(i, t), {
                            tag: "component",
                            attrs: {
                                designer: e.designer,
                                "selected-widget": e.selectedWidget,
                                "option-model": e.optionModel
                            }
                        }) : e._e()];
                    })], 2) : e._e(), e.showEventCollapse() && e.showCollapse(e.eventProps) ? n("el-collapse-item", {
                        attrs: {
                            name: "3",
                            title: e.i18nt("designer.setting.eventSetting")
                        }
                    }, [e._l(e.eventProps, function(t, i) {
                        return [e.hasPropEditor(i, t) ? n(e.getPropEditor(i, t), {
                            tag: "component",
                            attrs: {
                                designer: e.designer,
                                "selected-widget": e.selectedWidget,
                                "option-model": e.optionModel
                            }
                        }) : e._e()];
                    })], 2) : e._e()], 1)], 1)] : e._e()], 2)], 1), e.designer ? n("el-tab-pane", {
                        attrs: {
                            label: e.i18nt("designer.hint.formSetting"),
                            name: "2"
                        }
                    }, [n("el-scrollbar", {
                        staticClass: "setting-scrollbar",
                        style: {
                            height: e.scrollerHeight
                        }
                    }, [n("form-setting", {
                        attrs: {
                            designer: e.designer,
                            "form-config": e.formConfig
                        }
                    })], 1)], 1) : e._e()], 1), e.showWidgetEventDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: e.i18nt("designer.setting.editWidgetEventHandler"),
                            visible: e.showWidgetEventDialogFlag,
                            "show-close": true,
                            "append-to-body": "",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showWidgetEventDialogFlag = t;
                            }
                        }
                    }, [n("el-alert", {
                        attrs: {
                            type: "info",
                            closable: false,
                            title: e.eventHeader
                        }
                    }), n("code-editor", {
                        ref: "ecEditor",
                        attrs: {
                            mode: "javascript",
                            readonly: false
                        },
                        model: {
                            value: e.eventHandlerCode,
                            callback: function(t) {
                                e.eventHandlerCode = t;
                            },
                            expression: "eventHandlerCode"
                        }
                    }), n("el-alert", {
                        attrs: {
                            type: "info",
                            closable: false,
                            title: "}"
                        }
                    }), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        on: {
                            click: function(t) {
                                e.showWidgetEventDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.cancel")))]), n("el-button", {
                        attrs: {
                            type: "primary"
                        },
                        on: {
                            click: e.saveEventHandler
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.confirm")))])], 1)], 1) : e._e()], 1);
                },
                Ae = [],
                De = (n("ac1f"), n("5319"), n("0654")),
                Fe = {};
            De.keys().map(function(e) {
                var t = De(e).default;
                Fe[t.name] = t;
            });
            var Re = Fe,
                je = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("div", [n("el-form", {
                        staticClass: "setting-form",
                        attrs: {
                            model: e.formConfig,
                            size: "mini",
                            "label-position": "left",
                            "label-width": "120px"
                        },
                        nativeOn: {
                            submit: function(e) {
                                e.preventDefault();
                            }
                        }
                    }, [n("el-collapse", {
                        staticClass: "setting-collapse",
                        model: {
                            value: e.formActiveCollapseNames,
                            callback: function(t) {
                                e.formActiveCollapseNames = t;
                            },
                            expression: "formActiveCollapseNames"
                        }
                    }, [n("el-collapse-item", {
                        attrs: {
                            name: "1",
                            title: e.i18nt("designer.setting.basicSetting")
                        }
                    }, [n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.formSize")
                        }
                    }, [n("el-select", {
                        model: {
                            value: e.formConfig.size,
                            callback: function(t) {
                                e.$set(e.formConfig, "size", t);
                            },
                            expression: "formConfig.size"
                        }
                    }, e._l(e.formSizes, function(e) {
                        return n("el-option", {
                            key: e.value,
                            attrs: {
                                label: e.label,
                                value: e.value
                            }
                        });
                    }), 1)], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.labelPosition")
                        }
                    }, [n("el-radio-group", {
                        staticClass: "radio-group-custom",
                        model: {
                            value: e.formConfig.labelPosition,
                            callback: function(t) {
                                e.$set(e.formConfig, "labelPosition", t);
                            },
                            expression: "formConfig.labelPosition"
                        }
                    }, [n("el-radio-button", {
                        attrs: {
                            label: "left"
                        }
                    }, [e._v(e._s(e.i18nt("designer.setting.leftPosition")))]), n("el-radio-button", {
                        attrs: {
                            label: "top"
                        }
                    }, [e._v(e._s(e.i18nt("designer.setting.topPosition")))])], 1)], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.labelAlign")
                        }
                    }, [n("el-radio-group", {
                        staticClass: "radio-group-custom",
                        model: {
                            value: e.formConfig.labelAlign,
                            callback: function(t) {
                                e.$set(e.formConfig, "labelAlign", t);
                            },
                            expression: "formConfig.labelAlign"
                        }
                    }, [n("el-radio-button", {
                        attrs: {
                            label: "label-left-align"
                        }
                    }, [e._v(e._s(e.i18nt("designer.setting.leftAlign")))]), n("el-radio-button", {
                        attrs: {
                            label: "label-center-align"
                        }
                    }, [e._v(e._s(e.i18nt("designer.setting.centerAlign")))]), n("el-radio-button", {
                        attrs: {
                            label: "label-right-align"
                        }
                    }, [e._v(e._s(e.i18nt("designer.setting.rightAlign")))])], 1)], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.labelWidth")
                        }
                    }, [n("el-input-number", {
                        staticStyle: {
                            width: "100%"
                        },
                        attrs: {
                            min: 0
                        },
                        model: {
                            value: e.formConfig.labelWidth,
                            callback: function(t) {
                                e.$set(e.formConfig, "labelWidth", t);
                            },
                            expression: "formConfig.labelWidth"
                        }
                    })], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.formCss")
                        }
                    }, [n("el-button", {
                        attrs: {
                            type: "info",
                            icon: "el-icon-edit",
                            plain: "",
                            round: ""
                        },
                        on: {
                            click: e.editFormCss
                        }
                    }, [e._v(e._s(e.i18nt("designer.setting.addCss")))])], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.customClass")
                        }
                    }, [n("el-select", {
                        attrs: {
                            multiple: "",
                            filterable: "",
                            "allow-create": "",
                            "default-first-option": ""
                        },
                        model: {
                            value: e.formConfig.customClass,
                            callback: function(t) {
                                e.$set(e.formConfig, "customClass", t);
                            },
                            expression: "formConfig.customClass"
                        }
                    }, e._l(e.cssClassList, function(e, t) {
                        return n("el-option", {
                            key: t,
                            attrs: {
                                label: e,
                                value: e
                            }
                        });
                    }), 1)], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.globalFunctions")
                        }
                    }, [n("el-button", {
                        attrs: {
                            type: "info",
                            icon: "el-icon-edit",
                            plain: "",
                            round: ""
                        },
                        on: {
                            click: e.editGlobalFunctions
                        }
                    }, [e._v(e._s(e.i18nt("designer.setting.addEventHandler")))])], 1), n("el-form-item", {
                        attrs: {
                            "label-width": "0"
                        }
                    }, [n("el-divider", {
                        staticClass: "custom-divider"
                    }, [e._v(e._s(e.i18nt("designer.setting.formSFCSetting")))])], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.formModelName")
                        }
                    }, [n("el-input", {
                        attrs: {
                            type: "text"
                        },
                        model: {
                            value: e.formConfig.modelName,
                            callback: function(t) {
                                e.$set(e.formConfig, "modelName", t);
                            },
                            expression: "formConfig.modelName"
                        }
                    })], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.formRefName")
                        }
                    }, [n("el-input", {
                        attrs: {
                            type: "text"
                        },
                        model: {
                            value: e.formConfig.refName,
                            callback: function(t) {
                                e.$set(e.formConfig, "refName", t);
                            },
                            expression: "formConfig.refName"
                        }
                    })], 1), n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.formRulesName")
                        }
                    }, [n("el-input", {
                        attrs: {
                            type: "text"
                        },
                        model: {
                            value: e.formConfig.rulesName,
                            callback: function(t) {
                                e.$set(e.formConfig, "rulesName", t);
                            },
                            expression: "formConfig.rulesName"
                        }
                    })], 1)], 1), e.showEventCollapse() ? n("el-collapse-item", {
                        attrs: {
                            name: "2",
                            title: e.i18nt("designer.setting.eventSetting")
                        }
                    }, [n("el-form-item", {
                        attrs: {
                            label: "onFormCreated",
                            "label-width": "150px"
                        }
                    }, [n("el-button", {
                        attrs: {
                            type: "info",
                            icon: "el-icon-edit",
                            plain: "",
                            round: ""
                        },
                        on: {
                            click: function(t) {
                                return e.editFormEventHandler("onFormCreated");
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.setting.addEventHandler")))])], 1), n("el-form-item", {
                        attrs: {
                            label: "onFormMounted",
                            "label-width": "150px"
                        }
                    }, [n("el-button", {
                        attrs: {
                            type: "info",
                            icon: "el-icon-edit",
                            plain: "",
                            round: ""
                        },
                        on: {
                            click: function(t) {
                                return e.editFormEventHandler("onFormMounted");
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.setting.addEventHandler")))])], 1), n("el-form-item", {
                        attrs: {
                            label: "onFormDataChange",
                            "label-width": "150px"
                        }
                    }, [n("el-button", {
                        attrs: {
                            type: "info",
                            icon: "el-icon-edit",
                            plain: "",
                            round: ""
                        },
                        on: {
                            click: function(t) {
                                return e.editFormEventHandler("onFormDataChange");
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.setting.addEventHandler")))])], 1)], 1) : e._e()], 1)], 1), e.showFormEventDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: e.i18nt("designer.setting.editFormEventHandler"),
                            visible: e.showFormEventDialogFlag,
                            "show-close": true,
                            "append-to-body": "",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showFormEventDialogFlag = t;
                            }
                        }
                    }, [n("el-alert", {
                        attrs: {
                            type: "info",
                            closable: false,
                            title: "form." + e.eventParamsMap[e.curEventName]
                        }
                    }), n("code-editor", {
                        ref: "ecEditor",
                        attrs: {
                            mode: "javascript",
                            readonly: false
                        },
                        model: {
                            value: e.formEventHandlerCode,
                            callback: function(t) {
                                e.formEventHandlerCode = t;
                            },
                            expression: "formEventHandlerCode"
                        }
                    }), n("el-alert", {
                        attrs: {
                            type: "info",
                            closable: false,
                            title: "}"
                        }
                    }), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        on: {
                            click: function(t) {
                                e.showFormEventDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.cancel")))]), n("el-button", {
                        attrs: {
                            type: "primary"
                        },
                        on: {
                            click: e.saveFormEventHandler
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.confirm")))])], 1)], 1) : e._e(), e.showEditFormCssDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: e.i18nt("designer.setting.formCss"),
                            visible: e.showEditFormCssDialogFlag,
                            "show-close": true,
                            "append-to-body": "",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showEditFormCssDialogFlag = t;
                            }
                        }
                    }, [n("code-editor", {
                        attrs: {
                            mode: "css",
                            readonly: false
                        },
                        model: {
                            value: e.formCssCode,
                            callback: function(t) {
                                e.formCssCode = t;
                            },
                            expression: "formCssCode"
                        }
                    }), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        on: {
                            click: function(t) {
                                e.showEditFormCssDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.cancel")))]), n("el-button", {
                        attrs: {
                            type: "primary"
                        },
                        on: {
                            click: e.saveFormCss
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.confirm")))])], 1)], 1) : e._e(), e.showEditFunctionsDialogFlag ? n("el-dialog", {
                        directives: [{
                            name: "dialog-drag",
                            rawName: "v-dialog-drag"
                        }],
                        staticClass: "small-padding-dialog",
                        attrs: {
                            title: e.i18nt("designer.setting.globalFunctions"),
                            visible: e.showEditFunctionsDialogFlag,
                            "show-close": true,
                            "append-to-body": "",
                            "close-on-click-modal": false,
                            "close-on-press-escape": false,
                            "destroy-on-close": true
                        },
                        on: {
                            "update:visible": function(t) {
                                e.showEditFunctionsDialogFlag = t;
                            }
                        }
                    }, [n("code-editor", {
                        ref: "gfEditor",
                        attrs: {
                            mode: "javascript",
                            readonly: false
                        },
                        model: {
                            value: e.functionsCode,
                            callback: function(t) {
                                e.functionsCode = t;
                            },
                            expression: "functionsCode"
                        }
                    }), n("div", {
                        staticClass: "dialog-footer",
                        attrs: {
                            slot: "footer"
                        },
                        slot: "footer"
                    }, [n("el-button", {
                        on: {
                            click: function(t) {
                                e.showEditFunctionsDialogFlag = false;
                            }
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.cancel")))]), n("el-button", {
                        attrs: {
                            type: "primary"
                        },
                        on: {
                            click: e.saveGlobalFunctions
                        }
                    }, [e._v(" " + e._s(e.i18nt("designer.hint.confirm")))])], 1)], 1) : e._e()], 1);
                },
                Pe = [],
                Ie = (n("466d"), n("1276"), n("498a"), n("a630"), n("3ca3"), n("6062"), {
                    name: "form-setting",
                    mixins: [C.b],
                    components: {
                        CodeEditor: X.a
                    },
                    props: {
                        designer: Object,
                        formConfig: Object
                    },
                    inject: ["getDesignerConfig"],
                    data: function() {
                        return {
                            designerConfig: this.getDesignerConfig(),
                            formActiveCollapseNames: ["1", "2"],
                            formSizes: [{
                                label: "default",
                                value: ""
                            }, {
                                label: "large",
                                value: "large"
                            }, {
                                label: "medium",
                                value: "medium"
                            }, {
                                label: "small",
                                value: "small"
                            }, {
                                label: "mini",
                                value: "mini"
                            }],
                            showEditFormCssDialogFlag: false,
                            formCssCode: "",
                            cssClassList: [],
                            showEditFunctionsDialogFlag: false,
                            functionsCode: "",
                            showFormEventDialogFlag: false,
                            formEventHandlerCode: "",
                            curEventName: "",
                            eventParamsMap: {
                                onFormCreated: "onFormCreated() {",
                                onFormMounted: "onFormMounted() {",
                                onFormDataChange: "onFormDataChange(fieldName, newValue, oldValue, formModel, subFormName, subFormRowIndex) {"
                            }
                        };
                    },
                    created: function() {
                        var e = this;
                        this.designer.handleEvent("form-json-imported", function() {
                            e.formCssCode = e.formConfig.cssCode, Object(_.k)(e.formCssCode), e.extractCssClass(), e.designer.emitEvent("form-css-updated", Object(_.d)(e.cssClassList));
                        });
                    },
                    mounted: function() {
                        var e = this;
                        setTimeout(function() {
                            e.formCssCode = e.formConfig.cssCode, Object(_.k)(e.formCssCode), e.extractCssClass(), e.designer.emitEvent("form-css-updated", Object(_.d)(e.cssClassList));
                        }, 1200);
                    },
                    methods: {
                        showEventCollapse: function() {
                            return undefined === this.designerConfig.eventCollapse || !!this.designerConfig.eventCollapse;
                        },
                        editFormCss: function() {
                            this.formCssCode = this.designer.formConfig.cssCode, this.showEditFormCssDialogFlag = true;
                        },
                        extractCssClass: function() {
                            var e = /\..*{/g,
                                t = this.formCssCode.match(e),
                                n = [];
                            t && t.length > 0 && t.forEach(function(e) {
                                var t = e.split(",");
                                t.length > 0 && t.forEach(function(e) {
                                    var t = e.trim();
                                    if (-1 !== t.indexOf(".", 1)) {
                                        var i = t.substring(t.indexOf(".") + 1, t.indexOf(".", 1));
                                        i && n.push(i.trim());
                                    } else if (-1 !== t.indexOf(" ")) {
                                        var o = t.substring(t.indexOf(".") + 1, t.indexOf(" "));
                                        o && n.push(o.trim());
                                    } else if (-1 !== t.indexOf("{")) {
                                        var r = t.substring(t.indexOf(".") + 1, t.indexOf("{"));
                                        n.push(r.trim());
                                    } else {
                                        var s = t.substring(t.indexOf(".") + 1);
                                        n.push(s.trim());
                                    }
                                });
                            }), this.cssClassList.splice(0, this.cssClassList.length), this.cssClassList = Array.from(new Set(n));
                        },
                        saveFormCss: function() {
                            this.extractCssClass(), this.designer.formConfig.cssCode = this.formCssCode, Object(_.k)(this.formCssCode), this.showEditFormCssDialogFlag = false, this.designer.emitEvent("form-css-updated", Object(_.d)(this.cssClassList));
                        },
                        editGlobalFunctions: function() {
                            this.functionsCode = this.designer.formConfig.functions, this.showEditFunctionsDialogFlag = true;
                        },
                        saveGlobalFunctions: function() {
                            var e = this.$refs.gfEditor.getEditorAnnotations(),
                                t = false;
                            e && e.length > 0 && (e.forEach(function(e) {
                                "error" === e.type && (t = true);
                            }), t) ? this.$message.error(this.i18nt("designer.setting.syntaxCheckWarning")) : (this.designer.formConfig.functions = this.functionsCode, Object(_.l)(this.functionsCode), this.showEditFunctionsDialogFlag = false);
                        },
                        editFormEventHandler: function(e) {
                            this.curEventName = e, this.formEventHandlerCode = this.formConfig[e], this.showFormEventDialogFlag = true;
                        },
                        saveFormEventHandler: function() {
                            var e = this.$refs.ecEditor.getEditorAnnotations(),
                                t = false;
                            e && e.length > 0 && (e.forEach(function(e) {
                                "error" === e.type && (t = true);
                            }), t) ? this.$message.error(this.i18nt("designer.setting.syntaxCheckWarning")) : (this.formConfig[this.curEventName] = this.formEventHandlerCode, this.showFormEventDialogFlag = false);
                        }
                    }
                }),
                Ne = Ie,
                qe = (n("28ce"), Object($.a)(Ne, je, Pe, false, null, "5c7642f4", null)),
                Be = qe.exports,
                We = {
                    name: "name-editor",
                    label: "label-editor",
                    labelAlign: "labelAlign-editor",
                    type: "type-editor",
                    defaultValue: "defaultValue-editor",
                    placeholder: "placeholder-editor",
                    startPlaceholder: "startPlaceholder-editor",
                    endPlaceholder: "endPlaceholder-editor",
                    columnWidth: "columnWidth-editor",
                    size: "size-editor",
                    showStops: "showStops-editor",
                    displayStyle: "displayStyle-editor",
                    buttonStyle: "buttonStyle-editor",
                    border: "border-editor",
                    labelWidth: "labelWidth-editor",
                    labelHidden: "labelHidden-editor",
                    rows: "rows-editor",
                    required: "required-editor",
                    requiredHint: "requiredHint-editor",
                    validation: "validation-editor",
                    validationHint: "validationHint-editor",
                    readonly: "readonly-editor",
                    disabled: "disabled-editor",
                    hidden: "hidden-editor",
                    clearable: "clearable-editor",
                    editable: "editable-editor",
                    showPassword: "showPassword-editor",
                    textContent: "textContent-editor",
                    textAlign: "textAlign-editor",
                    fontSize: "fontSize-editor",
                    preWrap: "preWrap-editor",
                    htmlContent: "htmlContent-editor",
                    format: "format-editor",
                    valueFormat: "valueFormat-editor",
                    filterable: "filterable-editor",
                    allowCreate: "allowCreate-editor",
                    remote: "remote-editor",
                    automaticDropdown: "automaticDropdown-editor",
                    checkStrictly: "checkStrictly-editor",
                    showAllLevels: "showAllLevels-editor",
                    multiple: "multiple-editor",
                    multipleLimit: "multipleLimit-editor",
                    contentPosition: "contentPosition-editor",
                    optionItems: "optionItems-editor",
                    uploadURL: "uploadURL-editor",
                    uploadTip: "uploadTip-editor",
                    withCredentials: "withCredentials-editor",
                    multipleSelect: "multipleSelect-editor",
                    limit: "limit-editor",
                    fileMaxSize: "fileMaxSize-editor",
                    fileTypes: "fileTypes-editor",
                    customClass: "customClass-editor",
                    tableColumns: "tableColumns-editor",
                    addFormFields: "addFormFields-editor",
                    showBlankRow: "showBlankRow-editor",
                    showRowNumber: "showRowNumber-editor",
                    cellWidth: "cellWidth-editor",
                    cellHeight: "cellHeight-editor",
                    colHeight: "colHeight-editor",
                    wordBreak: "wordBreak-editor",
                    gutter: "gutter-editor",
                    responsive: "responsive-editor",
                    span: "span-editor",
                    offset: "offset-editor",
                    push: "push-editor",
                    pull: "pull-editor"
                },
                He = {
                    min: "min-editor",
                    max: "max-editor",
                    precision: "precision-editor",
                    step: "step-editor",
                    controlsPosition: "controlsPosition-editor",
                    minLength: "minLength-editor",
                    maxLength: "maxLength-editor",
                    showWordLimit: "showWordLimit-editor",
                    prefixIcon: "prefixIcon-editor",
                    suffixIcon: "suffixIcon-editor",
                    switchWidth: "switchWidth-editor",
                    activeText: "activeText-editor",
                    inactiveText: "inactiveText-editor",
                    activeColor: "activeColor-editor",
                    inactiveColor: "inactiveColor-editor",
                    lowThreshold: "lowThreshold-editor",
                    highThreshold: "highThreshold-editor",
                    allowHalf: "allowHalf-editor",
                    showText: "showText-editor",
                    showScore: "showScore-editor",
                    range: "range-editor",
                    vertical: "vertical-editor",
                    plain: "plain-editor",
                    round: "round-editor",
                    circle: "circle-editor",
                    icon: "icon-editor",
                    labelIconClass: "labelIconClass-editor",
                    labelIconPosition: "labelIconPosition-editor",
                    labelTooltip: "labelTooltip-editor",
                    appendButton: "appendButton-editor",
                    appendButtonDisabled: "appendButtonDisabled-editor",
                    buttonIcon: "buttonIcon-editor"
                },
                Ve = {
                    onCreated: "onCreated-editor",
                    onMounted: "onMounted-editor",
                    onClick: "onClick-editor",
                    onInput: "onInput-editor",
                    onChange: "onChange-editor",
                    onFocus: "onFocus-editor",
                    onBlur: "onBlur-editor",
                    onRemoteQuery: "onRemoteQuery-editor",
                    onBeforeUpload: "onBeforeUpload-editor",
                    onUploadSuccess: "onUploadSuccess-editor",
                    onUploadError: "onUploadError-editor",
                    onFileRemove: "onFileRemove-editor",
                    onValidate: "onValidate-editor",
                    onAppendButtonClick: "onAppendButtonClick-editor",
                    onSubFormRowAdd: "onSubFormRowAdd-editor",
                    onSubFormRowInsert: "onSubFormRowInsert-editor",
                    onSubFormRowDelete: "onSubFormRowDelete-editor",
                    onSubFormRowChange: "onSubFormRowChange-editor"
                };

            function ze(e, t) {
                We[e] = t;
            }

            function Ue(e, t) {
                Ve[e] = t;
            }

            function Ge(e, t, n) {
                W.a.component(t, n), ze(e, t);
            }

            function Ye(e, t, n) {
                W.a.component(t, n), Ue(e, t);
            }
            var Xe = {
                    COMMON_PROPERTIES: We,
                    ADVANCED_PROPERTIES: He,
                    EVENT_PROPERTIES: Ve
                },
                Je = Xe.COMMON_PROPERTIES,
                Ze = Xe.ADVANCED_PROPERTIES,
                Qe = Xe.EVENT_PROPERTIES,
                et = {
                    name: "SettingPanel",
                    componentName: "SettingPanel",
                    mixins: [C.b],
                    components: Object(h.a)({
                        CodeEditor: X.a,
                        FormSetting: Be
                    }, Re),
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        formConfig: Object,
                        globalDsv: {
                            type: Object,
                            default: function() {
                                return {};
                            }
                        }
                    },
                    provide: function() {
                        var e = this;
                        return {
                            isSubFormChildWidget: function() {
                                return e.subFormChildWidgetFlag;
                            }
                        };
                    },
                    inject: ["getDesignerConfig"],
                    data: function() {
                        return {
                            designerConfig: this.getDesignerConfig(),
                            scrollerHeight: 0,
                            activeTab: "2",
                            widgetActiveCollapseNames: ["1", "3"],
                            formActiveCollapseNames: ["1", "2"],
                            commonProps: Je,
                            advProps: Ze,
                            eventProps: Qe,
                            showWidgetEventDialogFlag: false,
                            eventHandlerCode: "",
                            curEventName: "",
                            eventHeader: "",
                            subFormChildWidgetFlag: false
                        };
                    },
                    computed: {
                        optionModel: {
                            get: function() {
                                return this.selectedWidget.options;
                            },
                            set: function(e) {
                                this.selectedWidget.options = e;
                            }
                        }
                    },
                    watch: {
                        "designer.selectedWidget": {
                            handler: function(e) {
                                e && (this.activeTab = "1");
                            }
                        },
                        "selectedWidget.options": {
                            deep: true,
                            handler: function() {
                                this.designer.saveCurrentHistoryStep();
                            }
                        },
                        formConfig: {
                            deep: true,
                            handler: function() {
                                this.designer.saveCurrentHistoryStep();
                            }
                        }
                    },
                    created: function() {
                        var e = this;
                        this.$on("editEventHandler", function(e, t) {
                            this.editEventHandler(e, t);
                        }), this.designer.handleEvent("form-css-updated", function(t) {
                            e.designer.setCssClassList(t);
                        }), this.designer.handleEvent("field-selected", function(t) {
                            e.subFormChildWidgetFlag = !!t && "sub-form" === t.type;
                        });
                    },
                    mounted: function() {
                        var e = this;
                        this.designer.selectedWidget ? this.activeTab = "1" : this.activeTab = "2", this.scrollerHeight = window.innerHeight - 56 - 48 + "px", Object(_.a)(function() {
                            e.$nextTick(function() {
                                e.scrollerHeight = window.innerHeight - 56 - 48 + "px";
                            });
                        });
                    },
                    methods: {
                        showEventCollapse: function() {
                            return undefined === this.designerConfig.eventCollapse || !!this.designerConfig.eventCollapse;
                        },
                        hasPropEditor: function(e, t) {
                            if (!t) return false;
                            if (e.indexOf("-") <= -1) {
                                var n = this.selectedWidget.type + "-" + e;
                                if (!!We[n] || !!He[n] || !!Ve[n]) return false;
                            }
                            var i = e.replace(this.selectedWidget.type + "-", "");
                            return this.designer.hasConfig(this.selectedWidget, i);
                        },
                        getPropEditor: function(e, t) {
                            var n = e.replace(this.selectedWidget.type + "-", ""),
                                i = "".concat(this.selectedWidget.type, "-").concat(n, "-editor");
                            return this.$options.components[i] || this.$root.$options.components[i] ? i : t;
                        },
                        showCollapse: function(e) {
                            var t = false;
                            for (var n in e)
                                if (e.hasOwnProperty(n) && this.hasPropEditor(n, e[n])) {
                                    t = true;
                                    break;
                                }
                            return t;
                        },
                        editEventHandler: function(e, t) {
                            this.curEventName = e, this.eventHeader = "".concat(this.optionModel.name, ".").concat(e, "(").concat(t.join(", "), ") {"), this.eventHandlerCode = this.selectedWidget.options[e] || "", "onValidate" !== e || this.optionModel.onValidate || (this.eventHandlerCode = "  /* sample code */\n  /*\n  if ((value > 100) || (value < 0)) {\n    callback(new Error('error message'))  //fail\n  } else {\n    callback();  //pass\n  }\n  */"), this.showWidgetEventDialogFlag = true;
                        },
                        saveEventHandler: function() {
                            var e = this.$refs.ecEditor.getEditorAnnotations(),
                                t = false;
                            e && e.length > 0 && (e.forEach(function(e) {
                                "error" === e.type && (t = true);
                            }), t) ? this.$message.error(this.i18nt("designer.setting.syntaxCheckWarning")) : (this.selectedWidget.options[this.curEventName] = this.eventHandlerCode, this.showWidgetEventDialogFlag = false);
                        }
                    }
                },
                tt = et,
                nt = (n("2c2c"), Object($.a)(tt, Le, Ae, false, null, "9296a6f2", null)),
                it = nt.exports,
                ot = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("div", {
                        staticClass: "form-widget-container"
                    }, [n("el-form", {
                        staticClass: "full-height-width widget-form",
                        class: [e.customClass, e.layoutType + "-layout"],
                        attrs: {
                            "label-position": e.labelPosition,
                            size: e.size,
                            "validate-on-rule-change": false
                        }
                    }, [0 === e.designer.widgetList.length ? n("div", {
                        staticClass: "no-widget-hint"
                    }, [e._v(e._s(e.i18nt("designer.noWidgetHint")))]) : e._e(), n("draggable", e._b({
                        attrs: {
                            list: e.designer.widgetList,
                            handle: ".drag-handler",
                            move: e.checkMove
                        },
                        on: {
                            end: e.onDragEnd,
                            add: e.onDragAdd,
                            update: e.onDragUpdate
                        }
                    }, "draggable", {
                        group: "dragGroup",
                        ghostClass: "ghost",
                        animation: 300
                    }, false), [n("transition-group", {
                        staticClass: "form-widget-list",
                        attrs: {
                            name: "fade",
                            tag: "div"
                        }
                    }, [e._l(e.designer.widgetList, function(t, i) {
                        return ["container" === t.category ? [n(e.getWidgetName(t), {
                            key: t.id,
                            tag: "component",
                            attrs: {
                                widget: t,
                                designer: e.designer,
                                "parent-list": e.designer.widgetList,
                                "index-of-parent-list": i,
                                "parent-widget": null
                            }
                        })] : [n(e.getWidgetName(t), {
                            key: t.id,
                            tag: "component",
                            attrs: {
                                field: t,
                                designer: e.designer,
                                "parent-list": e.designer.widgetList,
                                "index-of-parent-list": i,
                                "parent-widget": null,
                                "design-state": true
                            }
                        })]];
                    })], 2)], 1)], 1)], 1);
                },
                rt = [],
                st = n("8b30");
            st.keys().map(function(e) {
                var t = st(e).default;
                W.a.component(t.name, t);
            });
            var at = {
                    name: "VFormWidget",
                    componentName: "VFormWidget",
                    mixins: [C.b],
                    components: Object(h.a)({
                        Draggable: p.a
                    }, z.a),
                    props: {
                        designer: Object,
                        formConfig: Object,
                        optionData: {
                            type: Object,
                            default: function() {
                                return {};
                            }
                        },
                        globalDsv: {
                            type: Object,
                            default: function() {
                                return {};
                            }
                        }
                    },
                    provide: function() {
                        var e = this;
                        return {
                            refList: this.widgetRefList,
                            formConfig: this.formConfig,
                            getGlobalDsv: function() {
                                return e.globalDsv;
                            },
                            globalOptionData: this.optionData,
                            getOptionData: function() {
                                return e.optionData;
                            },
                            globalModel: {
                                formModel: this.formModel
                            }
                        };
                    },
                    inject: ["getDesignerConfig"],
                    data: function() {
                        return {
                            formModel: {},
                            widgetRefList: {}
                        };
                    },
                    computed: {
                        labelPosition: function() {
                            return this.designer.formConfig && this.designer.formConfig.labelPosition ? this.designer.formConfig.labelPosition : "left";
                        },
                        size: function() {
                            return this.designer.formConfig && this.designer.formConfig.size ? this.designer.formConfig.size : "medium";
                        },
                        customClass: function() {
                            return this.designer.formConfig.customClass || "";
                        },
                        layoutType: function() {
                            return this.designer.getLayoutType();
                        }
                    },
                    watch: {
                        "designer.widgetList": {
                            deep: true,
                            handler: function(e) {}
                        },
                        "designer.formConfig": {
                            deep: true,
                            handler: function(e) {}
                        }
                    },
                    created: function() {
                        this.designer.initDesigner(!!this.getDesignerConfig().resetFormJson), this.designer.loadPresetCssCode(this.getDesignerConfig().presetCssCode);
                    },
                    mounted: function() {
                        this.disableFirefoxDefaultDrop(), this.designer.registerFormWidget(this);
                    },
                    methods: {
                        getWidgetName: function(e) {
                            return e.type + "-widget";
                        },
                        disableFirefoxDefaultDrop: function() {
                            var e = -1 !== navigator.userAgent.toLowerCase().indexOf("firefox");
                            e && (document.body.ondrop = function(e) {
                                e.stopPropagation(), e.preventDefault();
                            });
                        },
                        onDragEnd: function(e) {},
                        onDragAdd: function(e) {
                            var t = e.newIndex;
                            this.designer.widgetList[t] && this.designer.setSelected(this.designer.widgetList[t]), this.designer.emitHistoryChange(), this.designer.emitEvent("field-selected", null);
                        },
                        onDragUpdate: function() {
                            this.designer.emitHistoryChange();
                        },
                        checkMove: function(e) {
                            return this.designer.checkWidgetMove(e);
                        },
                        getFormData: function() {
                            return this.formModel;
                        },
                        getWidgetRef: function(e) {
                            var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
                                n = this.widgetRefList[e];
                            return !n && t && this.$message.error(this.i18nt("render.hint.refNotFound") + e), n;
                        },
                        getSelectedWidgetRef: function() {
                            var e = this.designer.selectedWidgetName;
                            return this.getWidgetRef(e);
                        },
                        clearWidgetRefList: function() {
                            var e = this;
                            Object.keys(this.widgetRefList).forEach(function(t) {
                                delete e.widgetRefList[t];
                            });
                        },
                        deleteWidgetRef: function(e) {
                            delete this.widgetRefList[e];
                        }
                    }
                },
                lt = at,
                ct = (n("c833"), Object($.a)(lt, ot, rt, false, null, "34254691", null)),
                ut = ct.exports;
            n("fb6a");

            function dt(e) {
                var t = Object(_.d)(Object(_.i)());
                return {
                    widgetList: [],
                    formConfig: {
                        cssCode: ""
                    },
                    selectedId: null,
                    selectedWidget: null,
                    selectedWidgetName: null,
                    vueInstance: e,
                    formWidget: null,
                    cssClassList: [],
                    historyData: {
                        index: -1,
                        maxStep: 20,
                        steps: []
                    },
                    initDesigner: function(e) {
                        this.widgetList = [], this.formConfig = Object(_.d)(t), console.info("%cVariantForm %cVer".concat(te.d, " %chttps://www.yuque.com/visualdev/vform"), "color:#409EFF;font-size: 22px;font-weight:bolder", "color:#999;font-size: 12px", "color:#333"), e || this.initHistoryData();
                    },
                    clearDesigner: function(e) {
                        var n = 0 === this.widgetList.length;
                        this.widgetList = [], this.selectedId = null, this.selectedWidgetName = null, this.selectedWidget = {}, Object(_.q)(this.formConfig, t), e || (n ? this.saveCurrentHistoryStep() : this.emitHistoryChange());
                    },
                    loadPresetCssCode: function(e) {
                        "" === this.formConfig.cssCode && e && (this.formConfig.cssCode = e);
                    },
                    getLayoutType: function() {
                        return this.formConfig.layoutType || "PC";
                    },
                    changeLayoutType: function(e) {
                        this.formConfig.layoutType = e;
                    },
                    getImportTemplate: function() {
                        return {
                            widgetList: [],
                            formConfig: Object(_.d)(t)
                        };
                    },
                    loadFormJson: function(e) {
                        var t = false;
                        return e && e.widgetList && (this.formWidget.clearWidgetRefList(), this.widgetList = e.widgetList, t = true), e && e.formConfig && (Object(_.q)(this.formConfig, e.formConfig), t = true), t && this.emitEvent("form-json-imported", []), t;
                    },
                    setSelected: function(e) {
                        e ? (this.selectedWidget = e, e.id && (this.selectedId = e.id, this.selectedWidgetName = e.options.name)) : this.clearSelected();
                    },
                    updateSelectedWidgetNameAndLabel: function(e, t, n) {
                        this.selectedWidgetName = t, n && Object.keys(e.options).indexOf("label") > -1 && (e.options.label = n);
                    },
                    clearSelected: function() {
                        this.selectedId = null, this.selectedWidgetName = null, this.selectedWidget = {};
                    },
                    checkWidgetMove: function(e) {
                        if (e.draggedContext && e.draggedContext.element) {
                            var t = e.draggedContext.element.category;
                            e.draggedContext.element.type;
                            if (e.to && "sub-form-table" === e.to.className && "container" === t) return false;
                        }
                        return true;
                    },
                    checkFieldMove: function(e) {
                        if (e.draggedContext && e.draggedContext.element) {
                            e.draggedContext.element.category;
                            var t = e.draggedContext.element.type + "";
                            if (e.to && "sub-form-table" === e.to.className && "slot" === t) return false;
                        }
                        return true;
                    },
                    appendTableRow: function(e) {
                        var t = e.rows.length,
                            n = Object(_.d)(e.rows[e.rows.length - 1]);
                        n.id = "table-row-" + Object(_.f)(), n.merged = false, n.cols.forEach(function(e) {
                            e.id = "table-cell-" + Object(_.f)(), e.options.name = e.id, e.merged = false, e.options.colspan = 1, e.options.rowspan = 1, e.widgetList.length = 0;
                        }), e.rows.splice(t, 0, n), this.emitHistoryChange();
                    },
                    appendTableCol: function(e) {
                        var t = this,
                            n = e.rows[0].cols.length;
                        e.rows.forEach(function(e) {
                            var i = Object(_.d)(t.getContainerByType("table-cell"));
                            i.id = "table-cell-" + Object(_.f)(), i.options.name = i.id, i.merged = false, i.options.colspan = 1, i.options.rowspan = 1, i.widgetList.length = 0, e.cols.splice(n, 0, i);
                        }), this.emitHistoryChange();
                    },
                    insertTableRow: function(e, t, n, i, o) {
                        var r = o ? t : t + 1;
                        if (!o) {
                            var s = r,
                                a = false;
                            while (s < e.rows.length) {
                                if (!e.rows[s].cols[i].merged) {
                                    r = s, a = true;
                                    break;
                                }
                                s++;
                            }
                            a || (r = e.rows.length);
                        }
                        var l = Object(_.d)(e.rows[n]);
                        l.id = "table-row-" + Object(_.f)(), l.merged = false, l.cols.forEach(function(e) {
                            e.id = "table-cell-" + Object(_.f)(), e.options.name = e.id, e.merged = false, e.options.colspan = 1, e.options.rowspan = 1, e.widgetList.length = 0;
                        }), e.rows.splice(r, 0, l);
                        var c = 0;
                        while (r < e.rows.length - 1 && c < e.rows[0].cols.length) {
                            var u = e.rows[r + 1].cols[c],
                                d = u.merged;
                            if (d) {
                                for (var h = e.rows, f = {}, p = null, m = r; m >= 0; m--)
                                    if (!h[m].cols[c].merged && h[m].cols[c].options.rowspan > 1) {
                                        p = m, f = h[m].cols[c];
                                        break;
                                    }
                                if (f.options) {
                                    var g = f.options.rowspan + 1;
                                    this.setPropsOfMergedRows(e.rows, p, c, f.options.colspan, g), c += f.options.colspan;
                                } else c += 1;
                            } else c += u.options.colspan || 1;
                        }
                        this.emitHistoryChange();
                    },
                    insertTableCol: function(e, t, n, i) {
                        var o = this,
                            r = i ? t : t + 1;
                        if (!i) {
                            var s = r,
                                a = false;
                            while (s < e.rows[n].cols.length) {
                                if (!e.rows[n].cols[s].merged) {
                                    r = s, a = true;
                                    break;
                                }
                                s++, a || (r = e.rows[n].cols.length);
                            }
                        }
                        e.rows.forEach(function(e) {
                            var t = Object(_.d)(o.getContainerByType("table-cell"));
                            t.id = "table-cell-" + Object(_.f)(), t.options.name = t.id, t.merged = false, t.options.colspan = 1, t.options.rowspan = 1, t.widgetList.length = 0, e.cols.splice(r, 0, t);
                        });
                        var l = 0;
                        while (r < e.rows[0].cols.length - 1 && l < e.rows.length) {
                            var c = e.rows[l].cols[r + 1],
                                u = c.merged;
                            if (u) {
                                for (var d = e.rows[l].cols, h = {}, f = null, p = r; p >= 0; p--)
                                    if (!d[p].merged && d[p].options.colspan > 1) {
                                        f = p, h = d[p];
                                        break;
                                    }
                                if (h.options) {
                                    var m = h.options.colspan + 1;
                                    this.setPropsOfMergedCols(e.rows, l, f, m, h.options.rowspan), l += h.options.rowspan;
                                } else l += 1;
                            } else l += c.options.rowspan || 1;
                        }
                        this.emitHistoryChange();
                    },
                    setPropsOfMergedCols: function(e, t, n, i, o) {
                        for (var r = t; r < t + o; r++)
                            for (var s = n; s < n + i; s++) r !== t || s !== n ? (e[r].cols[s].merged = true, e[r].cols[s].options.colspan = i, e[r].cols[s].widgetList = []) : e[r].cols[s].options.colspan = i;
                    },
                    setPropsOfMergedRows: function(e, t, n, i, o) {
                        for (var r = t; r < t + o; r++)
                            for (var s = n; s < n + i; s++) r !== t || s !== n ? (e[r].cols[s].merged = true, e[r].cols[s].options.rowspan = o, e[r].cols[s].widgetList = []) : e[r].cols[s].options.rowspan = o;
                    },
                    setPropsOfSplitCol: function(e, t, n, i, o) {
                        for (var r = t; r < t + o; r++)
                            for (var s = n; s < n + i; s++) e[r].cols[s].merged = false, e[r].cols[s].options.rowspan = 1, e[r].cols[s].options.colspan = 1;
                    },
                    setPropsOfSplitRow: function(e, t, n, i, o) {
                        for (var r = t; r < t + o; r++)
                            for (var s = n; s < n + i; s++) e[r].cols[s].merged = false, e[r].cols[s].options.rowspan = 1, e[r].cols[s].options.colspan = 1;
                    },
                    mergeTableCol: function(e, t, n, i, o, r) {
                        var s = o ? i : i + t[i].options.colspan,
                            a = o ? i - 1 : i;
                        if (o) {
                            var l = a;
                            while (l >= 0) {
                                if (!e[n].cols[l].merged) {
                                    a = l;
                                    break;
                                }
                                l--;
                            }
                        }
                        t[s].widgetList && t[s].widgetList.length > 0 && (t[a].widgetList && 0 !== t[a].widgetList.length || (t[a].widgetList = Object(_.d)(t[s].widgetList)));
                        var c = 1 * t[s].options.colspan + 1 * t[a].options.colspan;
                        this.setPropsOfMergedCols(e, n, a, c, r.options.rowspan), this.emitHistoryChange();
                    },
                    mergeTableWholeRow: function(e, t, n, i) {
                        for (var o = e[n].cols[0].options.rowspan, r = false, s = 1; s < e[n].cols.length; s++)
                            if (e[n].cols[s].options.rowspan !== o) {
                                r = true;
                                break;
                            }
                        if (r) this.vueInstance.$message.info(this.vueInstance.i18nt("designer.hint.rowspanNotConsistentForMergeEntireRow"));
                        else {
                            var a = t.filter(function(e) {
                                return !e.merged && !!e.widgetList && e.widgetList.length > 0;
                            });
                            a && a.length > 0 && a[0].id !== t[0].id && (!t[0].widgetList || t[0].widgetList.length <= 0) && (t[0].widgetList = Object(_.d)(a[0].widgetList)), this.setPropsOfMergedCols(e, n, 0, t.length, t[i].options.rowspan), this.emitHistoryChange();
                        }
                    },
                    mergeTableRow: function(e, t, n, i, o) {
                        var r = i ? t : t + o.options.rowspan,
                            s = i ? t - 1 : t;
                        if (i) {
                            var a = s;
                            while (a >= 0) {
                                if (!e[a].cols[n].merged) {
                                    s = a;
                                    break;
                                }
                                a--;
                            }
                        }
                        e[r].cols[n].widgetList && e[r].cols[n].widgetList.length > 0 && (e[s].cols[n].widgetList && 0 !== e[s].cols[n].widgetList.length || (e[s].cols[n].widgetList = Object(_.d)(e[r].cols[n].widgetList)));
                        var l = 1 * e[r].cols[n].options.rowspan + 1 * e[s].cols[n].options.rowspan;
                        this.setPropsOfMergedRows(e, s, n, o.options.colspan, l), this.emitHistoryChange();
                    },
                    mergeTableWholeCol: function(e, t, n, i) {
                        for (var o = e[0].cols[i].options.colspan, r = false, s = 1; s < e.length; s++)
                            if (e[s].cols[i].options.colspan !== o) {
                                r = true;
                                break;
                            }
                        if (r) this.vueInstance.$message.info(this.vueInstance.i18nt("designer.hint.colspanNotConsistentForMergeEntireColumn"));
                        else {
                            var a = [];
                            e.forEach(function(e) {
                                var t = e.cols[i];
                                !t.merged && t.widgetList && t.widgetList.length > 0 && a.push(t);
                            });
                            var l = e[0].cols[i];
                            a && a.length > 0 && a[0].id !== l.id && (!l.widgetList || l.widgetList.length <= 0) && (l.widgetList = Object(_.d)(a[0].widgetList)), this.setPropsOfMergedRows(e, 0, i, l.options.colspan, e.length), this.emitHistoryChange();
                        }
                    },
                    undoMergeTableCol: function(e, t, n, i, o) {
                        this.setPropsOfSplitCol(e, t, n, i, o), this.emitHistoryChange();
                    },
                    undoMergeTableRow: function(e, t, n, i, o) {
                        this.setPropsOfSplitRow(e, t, n, i, o), this.emitHistoryChange();
                    },
                    deleteTableWholeCol: function(e, t) {
                        var n = true;
                        if (e.forEach(function(t) {
                                t.cols[0].options.colspan !== e[0].cols.length && (n = false);
                            }), n) this.vueInstance.$message.info(this.vueInstance.i18nt("designer.hint.lastColCannotBeDeleted"));
                        else {
                            for (var i = e[0].cols[t].options.colspan, o = false, r = 1; r < e.length; r++)
                                if (e[r].cols[t].options.colspan !== i) {
                                    o = true;
                                    break;
                                }
                            o ? this.vueInstance.$message.info(this.vueInstance.i18nt("designer.hint.colspanNotConsistentForDeleteEntireColumn")) : (e.forEach(function(e) {
                                e.cols.splice(t, i);
                            }), this.emitHistoryChange());
                        }
                    },
                    deleteTableWholeRow: function(e, t) {
                        var n = true;
                        if (e[0].cols.forEach(function(t) {
                                t.options.rowspan !== e.length && (n = false);
                            }), n) this.vueInstance.$message.info(this.vueInstance.i18nt("designer.hint.lastRowCannotBeDeleted"));
                        else {
                            for (var i = e[t].cols[0].options.rowspan, o = false, r = 1; r < e[t].cols.length; r++)
                                if (e[t].cols[r].options.rowspan !== i) {
                                    o = true;
                                    break;
                                }
                            o ? this.vueInstance.$message.info(this.vueInstance.i18nt("designer.hint.rowspanNotConsistentForDeleteEntireRow")) : (e.splice(t, i), this.emitHistoryChange());
                        }
                    },
                    getContainerByType: function(e) {
                        var t = [].concat(Object(N.a)(m), Object(N.a)(g), Object(N.a)(v), Object(N.a)(b)),
                            n = null;
                        return t.forEach(function(t) {
                            t.category && t.type && t.type === e && (n = t);
                        }), n;
                    },
                    getFieldWidgetByType: function(e) {
                        var t = [].concat(Object(N.a)(m), Object(N.a)(g), Object(N.a)(v), Object(N.a)(b)),
                            n = null;
                        return t.forEach(function(t) {
                            !t.category && t.type && t.type === e && (n = t);
                        }), n;
                    },
                    hasConfig: function(e, t) {
                        var n = null;
                        return n = e.category ? this.getContainerByType(e.type) : this.getFieldWidgetByType(e.type), !(!n || !n.options) && Object.keys(n.options).indexOf(t) > -1;
                    },
                    upgradeWidgetConfig: function(e) {
                        var t = null;
                        t = e.category ? this.getContainerByType(e.type) : this.getFieldWidgetByType(e.type), t && t.options && Object.keys(t.options).forEach(function(n) {
                            e.hasOwnProperty(n) || (e.options[n] = Object(_.d)(t.options[n]));
                        });
                    },
                    upgradeFormConfig: function(e) {
                        var t = this;
                        Object.keys(this.formConfig).forEach(function(n) {
                            e.hasOwnProperty(n) || (e[n] = Object(_.d)(t.formConfig[n]));
                        });
                    },
                    cloneGridCol: function(e, t) {
                        var n = Object(_.d)(this.getContainerByType("grid-col"));
                        n.options.span = e.options.span;
                        var i = Object(_.f)();
                        n.id = "grid-col-" + i, n.options.name = "gridCol" + i, t.cols.push(n);
                    },
                    cloneContainer: function(e) {
                        var t = this;
                        if ("grid" === e.type) {
                            var n = Object(_.d)(this.getContainerByType("grid"));
                            return n.id = n.type + Object(_.f)(), n.options.name = n.id, e.cols.forEach(function(e) {
                                var i = Object(_.d)(t.getContainerByType("grid-col")),
                                    o = Object(_.f)();
                                i.id = "grid-col-" + o, i.options.name = "gridCol" + o, i.options.span = e.options.span, n.cols.push(i);
                            }), n;
                        }
                        if ("table" === e.type) {
                            var i = Object(_.d)(this.getContainerByType("table"));
                            return i.id = i.type + Object(_.f)(), i.options.name = i.id, e.rows.forEach(function(e) {
                                var t = Object(_.d)(e);
                                t.id = "table-row-" + Object(_.f)(), t.cols.forEach(function(e) {
                                    e.id = "table-cell-" + Object(_.f)(), e.options.name = e.id, e.widgetList = [];
                                }), i.rows.push(t);
                            }), i;
                        }
                        return null;
                    },
                    moveUpWidget: function(e, t) {
                        if (e) {
                            if (0 === t) return void this.vueInstance.$message(this.vueInstance.i18nt("designer.hint.moveUpFirstChildHint"));
                            var n = e[t];
                            e.splice(t, 1), e.splice(t - 1, 0, n);
                        }
                    },
                    moveDownWidget: function(e, t) {
                        if (e) {
                            if (t === e.length - 1) return void this.vueInstance.$message(this.vueInstance.i18nt("designer.hint.moveDownLastChildHint"));
                            var n = e[t];
                            e.splice(t, 1), e.splice(t + 1, 0, n);
                        }
                    },
                    copyNewFieldWidget: function(e) {
                        var t = Object(_.d)(e),
                            n = Object(_.f)();
                        return t.id = t.type.replace(/-/g, "") + n, t.options.name = t.id, t.options.label = t.options.label || t.type.toLowerCase(), delete t.displayName, t;
                    },
                    copyNewContainerWidget: function(e) {
                        var t = Object(_.d)(e);
                        if (t.id = t.type.replace(/-/g, "") + Object(_.f)(), t.options.name = t.id, "grid" === t.type) {
                            var n = Object(_.d)(this.getContainerByType("grid-col")),
                                i = Object(_.f)();
                            n.id = "grid-col-" + i, n.options.name = "gridCol" + i, t.cols.push(n), n = Object(_.d)(n), i = Object(_.f)(), n.id = "grid-col-" + i, n.options.name = "gridCol" + i, t.cols.push(n);
                        } else if ("table" === t.type) {
                            var o = {
                                cols: []
                            };
                            o.id = "table-row-" + Object(_.f)(), o.merged = false;
                            var r = Object(_.d)(this.getContainerByType("table-cell"));
                            r.id = "table-cell-" + Object(_.f)(), r.options.name = r.id, r.merged = false, r.options.colspan = 1, r.options.rowspan = 1, o.cols.push(r), t.rows.push(o);
                        } else if ("tab" === t.type) {
                            var s = Object(_.d)(this.getContainerByType("tab-pane"));
                            s.id = "tab-pane-" + Object(_.f)(), s.options.name = "tab1", s.options.label = "tab 1", t.tabs.push(s);
                        }
                        return delete t.displayName, t;
                    },
                    addContainerByDbClick: function(e) {
                        var t = this.copyNewContainerWidget(e);
                        this.widgetList.push(t), this.setSelected(t);
                    },
                    addFieldByDbClick: function(e) {
                        var t = this.copyNewFieldWidget(e);
                        if (this.selectedWidget && "tab" === this.selectedWidget.type) {
                            var n = this.selectedWidget.tabs[0];
                            this.selectedWidget.tabs.forEach(function(e) {
                                e.options.active && (n = e);
                            }), n && n.widgetList.push(t);
                        } else this.selectedWidget && this.selectedWidget.widgetList ? this.selectedWidget.widgetList.push(t) : this.widgetList.push(t);
                        this.setSelected(t), this.emitHistoryChange();
                    },
                    deleteColOfGrid: function(e, t) {
                        e && e.cols && e.cols.splice(t, 1);
                    },
                    addNewColOfGrid: function(e) {
                        var t = e.cols,
                            n = Object(_.d)(this.getContainerByType("grid-col")),
                            i = Object(_.f)();
                        if (n.id = "grid-col-" + i, n.options.name = "gridCol" + i, t && t.length > 0) {
                            var o = 0;
                            t.forEach(function(e) {
                                o += e.options.span;
                            }), o >= 24 ? (console.log("列栅格之和超出24"), e.cols.push(n)) : (n.options.span = 24 - o > 12 ? 12 : 24 - o, e.cols.push(n));
                        } else e.cols = [n];
                    },
                    addTabPaneOfTabs: function(e) {
                        var t = e.tabs,
                            n = Object(_.d)(this.getContainerByType("tab-pane"));
                        n.id = "tab-pane-" + Object(_.f)(), n.options.name = n.id, n.options.label = "tab " + (t.length + 1), t.push(n);
                    },
                    deleteTabPaneOfTabs: function(e, t) {
                        e.tabs.splice(t, 1);
                    },
                    emitEvent: function(e, t) {
                        this.vueInstance.$emit(e, t);
                    },
                    handleEvent: function(e, t) {
                        this.vueInstance.$on(e, function(e) {
                            return t(e);
                        });
                    },
                    setCssClassList: function(e) {
                        this.cssClassList = e;
                    },
                    getCssClassList: function() {
                        return this.cssClassList;
                    },
                    registerFormWidget: function(e) {
                        this.formWidget = e;
                    },
                    initHistoryData: function() {
                        this.loadFormContentFromStorage(), this.historyData.index++, this.historyData.steps[this.historyData.index] = {
                            widgetList: Object(_.d)(this.widgetList),
                            formConfig: Object(_.d)(this.formConfig)
                        };
                    },
                    emitHistoryChange: function() {
                        this.historyData.index === this.historyData.maxStep - 1 ? this.historyData.steps.shift() : this.historyData.index++, this.historyData.steps[this.historyData.index] = {
                            widgetList: Object(_.d)(this.widgetList),
                            formConfig: Object(_.d)(this.formConfig)
                        }, this.saveFormContentToStorage(), this.historyData.index < this.historyData.steps.length - 1 && (this.historyData.steps = this.historyData.steps.slice(0, this.historyData.index + 1));
                    },
                    saveCurrentHistoryStep: function() {
                        this.historyData.steps[this.historyData.index] = Object(_.d)({
                            widgetList: this.widgetList,
                            formConfig: this.formConfig
                        }), this.saveFormContentToStorage();
                    },
                    undoHistoryStep: function() {
                        0 !== this.historyData.index && this.historyData.index--, this.widgetList = Object(_.d)(this.historyData.steps[this.historyData.index].widgetList), this.formConfig = Object(_.d)(this.historyData.steps[this.historyData.index].formConfig);
                    },
                    redoHistoryStep: function() {
                        this.historyData.index !== this.historyData.steps.length - 1 && this.historyData.index++, this.widgetList = Object(_.d)(this.historyData.steps[this.historyData.index].widgetList), this.formConfig = Object(_.d)(this.historyData.steps[this.historyData.index].formConfig);
                    },
                    undoEnabled: function() {
                        return this.historyData.index > 0 && this.historyData.steps.length > 0;
                    },
                    redoEnabled: function() {
                        return this.historyData.index < this.historyData.steps.length - 1;
                    },
                    saveFormContentToStorage: function() {
                        window.localStorage.setItem("widget__list__backup", JSON.stringify(this.widgetList)), window.localStorage.setItem("form__config__backup", JSON.stringify(this.formConfig));
                    },
                    loadFormContentFromStorage: function() {
                        var e = window.localStorage.getItem("widget__list__backup");
                        e && (this.widgetList = JSON.parse(e));
                        var t = window.localStorage.getItem("form__config__backup");
                        t && Object(_.q)(this.formConfig, JSON.parse(t));
                    }
                };
            }
            var ht = {
                    name: "VFormDesigner",
                    componentName: "VFormDesigner",
                    mixins: [C.b],
                    components: {
                        WidgetPanel: F,
                        ToolbarPanel: Te,
                        SettingPanel: it,
                        VFormWidget: ut,
                        SvgIcon: T
                    },
                    props: {
                        fieldListApi: {
                            type: Object,
                            default: null
                        },
                        bannedWidgets: {
                            type: Array,
                            default: function() {
                                return [];
                            }
                        },
                        designerConfig: {
                            type: Object,
                            default: function() {
                                return {
                                    languageMenu: true,
                                    externalLink: true,
                                    formTemplates: true,
                                    eventCollapse: true,
                                    widgetNameReadonly: false,
                                    clearDesignerButton: true,
                                    previewFormButton: true,
                                    importJsonButton: true,
                                    exportJsonButton: true,
                                    exportCodeButton: true,
                                    generateSFCButton: true,
                                    toolbarMaxWidth: 420,
                                    toolbarMinWidth: 300,
                                    presetCssCode: "",
                                    resetFormJson: false
                                };
                            }
                        },
                        globalDsv: {
                            type: Object,
                            default: function() {
                                return {};
                            }
                        }
                    },
                    data: function() {
                        return {
                            vFormVersion: te.d,
                            curLangName: "",
                            vsCodeFlag: false,
                            caseName: "",
                            docUrl: "https://www.vform666.com/document.html",
                            gitUrl: "https://github.com/vform666/variant-form",
                            chatUrl: "https://www.vform666.com/pages/chat-group/",
                            subScribeUrl: "https://www.vform666.com/pages/pro/",
                            scrollerHeight: 0,
                            designer: dt(this),
                            fieldList: []
                        };
                    },
                    provide: function() {
                        var e = this;
                        return {
                            serverFieldList: this.fieldList,
                            getDesignerConfig: function() {
                                return e.designerConfig;
                            },
                            getBannedWidgets: function() {
                                return e.bannedWidgets;
                            }
                        };
                    },
                    created: function() {
                        this.vsCodeFlag = 1 == Object(_.j)("vscode"), this.caseName = Object(_.j)("case");
                    },
                    mounted: function() {
                        var e = this;
                        this.initLocale(), this.scrollerHeight = window.innerHeight - 56 - 36 + "px", Object(_.a)(function() {
                            e.$nextTick(function() {
                                e.scrollerHeight = window.innerHeight - 56 - 36 + "px";
                            });
                        }), this.loadCase(), this.loadFieldListFromServer();
                    },
                    methods: {
                        showLink: function(e) {
                            return undefined === this.designerConfig[e] || !!this.designerConfig[e];
                        },
                        openHome: function() {
                            if (this.vsCodeFlag) {
                                var e = {
                                    cmd: "openUrl",
                                    data: {
                                        url: "https://www.vform666.com/"
                                    }
                                };
                                window.parent.postMessage(e, "*");
                            }
                        },
                        openUrl: function(e, t) {
                            if (this.vsCodeFlag) {
                                var n = {
                                    cmd: "openUrl",
                                    data: {
                                        url: t
                                    }
                                };
                                window.parent.postMessage(n, "*");
                            } else {
                                var i = e.currentTarget;
                                i.href = t;
                            }
                        },
                        loadCase: function() {
                            var e = this;
                            this.caseName && a.a.get(te.c + this.caseName + ".txt").then(function(t) {
                                t.data.code ? e.$message.error(e.i18nt("designer.hint.sampleLoadedFail")) : (e.setFormJson(t.data), e.$message.success(e.i18nt("designer.hint.sampleLoadedSuccess")));
                            }).catch(function(t) {
                                e.$message.error(e.i18nt("designer.hint.sampleLoadedFail") + ":" + t);
                            });
                        },
                        initLocale: function() {
                            var e = localStorage.getItem("v_form_locale");
                            e = this.vsCodeFlag ? e || "en-US" : e || "zh-CN", this.curLangName = this.i18nt("application." + e), this.changeLanguage(e);
                        },
                        loadFieldListFromServer: function() {
                            var e = this;
                            if (this.fieldListApi) {
                                var t = this.fieldListApi.headers || {};
                                a.a.get(this.fieldListApi.URL, {
                                    headers: t
                                }).then(function(t) {
                                    var n = e.fieldListApi.labelKey || "label",
                                        i = e.fieldListApi.nameKey || "name";
                                    e.fieldList.splice(0, e.fieldList.length), t.data.forEach(function(t) {
                                        e.fieldList.push({
                                            label: t[n],
                                            name: t[i]
                                        });
                                    });
                                }).catch(function(t) {
                                    e.$message.error(t);
                                });
                            }
                        },
                        handleLanguageChanged: function(e) {
                            this.changeLanguage(e), this.curLangName = this.i18nt("application." + e);
                        },
                        changeLanguage: function(e) {
                            Object(C.a)(e);
                        },
                        setFormJson: function(e) {
                            var t = false;
                            e && ("string" === typeof e ? t = this.designer.loadFormJson(JSON.parse(e)) : e.constructor === Object && (t = this.designer.loadFormJson(e)), t && this.designer.emitHistoryChange());
                        },
                        getFormJson: function() {
                            return {
                                widgetList: Object(_.d)(this.designer.widgetList),
                                formConfig: Object(_.d)(this.designer.formConfig)
                            };
                        },
                        clearDesigner: function() {
                            this.$refs.toolbarRef.clearFormWidget();
                        },
                        refreshDesigner: function() {
                            var e = this.getFormJson();
                            this.designer.clearDesigner(true), this.designer.loadFormJson(e);
                        },
                        previewForm: function() {
                            this.$refs.toolbarRef.previewForm();
                        },
                        importJson: function() {
                            this.$refs.toolbarRef.importJson();
                        },
                        exportJson: function() {
                            this.$refs.toolbarRef.exportJson();
                        },
                        exportCode: function() {
                            this.$refs.toolbarRef.exportCode();
                        },
                        generateSFC: function() {
                            this.$refs.toolbarRef.generateSFC();
                        },
                        getFieldWidgets: function() {
                            var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : null;
                            return e ? Object(_.h)(e) : Object(_.h)(this.designer.widgetList);
                        },
                        getContainerWidgets: function() {
                            var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : null;
                            return e ? Object(_.g)(e) : Object(_.g)(this.designer.widgetList);
                        },
                        upgradeFormJson: function(e) {
                            var t = this;
                            if (e.widgetList && e.formConfig) return Object(_.r)(e.widgetList, function(e) {
                                t.designer.upgradeWidgetConfig(e);
                            }), this.designer.upgradeFormConfig(e.formConfig), e;
                            this.$message.error("Invalid form json!");
                        },
                        getWidgetRef: function(e) {
                            var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
                            return this.$refs.formRef.getWidgetRef(e, t);
                        },
                        getSelectedWidgetRef: function() {
                            return this.$refs.formRef.getSelectedWidgetRef();
                        }
                    }
                },
                ft = ht,
                pt = (n("e85f"), Object($.a)(ft, l, c, false, null, "355d356e", null)),
                mt = pt.exports,
                gt = (n("a9e3"), function(e, t) {
                    return {
                        props: {
                            optionModel: Object
                        },
                        render: function(n) {
                            var i = this;
                            return n("el-form-item", {
                                attrs: {
                                    label: Object(C.c)(t)
                                }
                            }, [n("el-input", {
                                attrs: {
                                    type: "text"
                                },
                                model: {
                                    value: i.optionModel[e],
                                    callback: function(t) {
                                        i.$set(i.optionModel, e, t);
                                    }
                                }
                            })]);
                        }
                    };
                }),
                vt = function(e, t) {
                    return {
                        props: {
                            optionModel: Object
                        },
                        render: function(n) {
                            var i = this;
                            return n("el-form-item", {
                                attrs: {
                                    label: Object(C.c)(t)
                                }
                            }, [n("el-switch", {
                                model: {
                                    value: i.optionModel[e],
                                    callback: function(t) {
                                        i.$set(i.optionModel, e, t);
                                    }
                                }
                            })]);
                        }
                    };
                },
                bt = function(e, t, n) {
                    return {
                        props: {
                            optionModel: Object
                        },
                        render: function(i) {
                            var o = this;
                            return i("el-form-item", {
                                attrs: {
                                    label: Object(C.c)(t)
                                }
                            }, [i("el-radio-group", {
                                model: {
                                    value: o.optionModel[e],
                                    callback: function(t) {
                                        o.$set(o.optionModel, e, t);
                                    }
                                }
                            }, [n.optionItems.map(function(e) {
                                return i("el-radio-button", {
                                    attrs: {
                                        label: e.value
                                    }
                                }, [e.label]);
                            })])]);
                        }
                    };
                },
                yt = function(e, t, n) {
                    return {
                        props: {
                            optionModel: Object
                        },
                        render: function(i) {
                            var o = this;
                            return i("el-form-item", {
                                attrs: {
                                    label: Object(C.c)(t)
                                }
                            }, [i("el-select", {
                                model: {
                                    value: o.optionModel[e],
                                    callback: function(t) {
                                        o.$set(o.optionModel, e, t);
                                    }
                                }
                            }, [n.optionItems.map(function(e) {
                                return i("el-option", {
                                    attrs: {
                                        label: e.label,
                                        value: e.value
                                    }
                                });
                            })])]);
                        }
                    };
                },
                wt = function(e, t) {
                    return {
                        props: {
                            optionModel: Object
                        },
                        mixins: [q.a],
                        methods: {
                            editEventHandler: function() {
                                this.dispatch("SettingPanel", "editEventHandler", [e, Object(N.a)(t)]);
                            }
                        },
                        render: function(t) {
                            return t("el-form-item", {
                                attrs: {
                                    label: e,
                                    "label-width": "150px"
                                }
                            }, [t("el-button", {
                                attrs: {
                                    type: "info",
                                    icon: "el-icon-edit",
                                    plain: true,
                                    round: true
                                },
                                on: {
                                    click: this.editEventHandler
                                }
                            }, [Object(C.c)("designer.setting.addEventHandler")])]);
                        }
                    };
                },
                xt = {
                    type: "card",
                    category: "container",
                    icon: "card",
                    widgetList: [],
                    options: {
                        name: "",
                        label: "card",
                        hidden: false,
                        folded: false,
                        showFold: true,
                        cardWidth: "100%",
                        shadow: "never",
                        customClass: ""
                    }
                },
                _t = {
                    type: "alert",
                    icon: "alert",
                    formItemFlag: false,
                    options: {
                        name: "",
                        title: "Good things are coming...",
                        type: "info",
                        description: "",
                        closable: true,
                        closeText: "",
                        center: true,
                        showIcon: false,
                        effect: "light",
                        hidden: false,
                        onClose: "",
                        customClass: ""
                    }
                },
                Ct = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("container-wrapper", {
                        attrs: {
                            designer: e.designer,
                            widget: e.widget,
                            "parent-widget": e.parentWidget,
                            "parent-list": e.parentList,
                            "index-of-parent-list": e.indexOfParentList
                        }
                    }, [n("el-card", {
                        key: e.widget.id,
                        staticClass: "card-container",
                        class: [e.selected ? "selected" : "", e.widget.options.folded ? "folded" : "", e.customClass],
                        style: {
                            width: e.widget.options.cardWidth + "!important" || false
                        },
                        attrs: {
                            shadow: e.widget.options.shadow
                        },
                        nativeOn: {
                            click: function(t) {
                                return t.stopPropagation(), e.selectWidget(e.widget);
                            }
                        }
                    }, [n("div", {
                        staticClass: "clear-fix",
                        attrs: {
                            slot: "header"
                        },
                        slot: "header"
                    }, [n("span", [e._v(e._s(e.widget.options.label))]), e.widget.options.showFold ? n("i", {
                        staticClass: "float-right",
                        class: [e.widget.options.folded ? "el-icon-arrow-up" : "el-icon-arrow-down"],
                        on: {
                            click: e.toggleCard
                        }
                    }) : e._e()]), n("draggable", e._b({
                        attrs: {
                            list: e.widget.widgetList,
                            handle: ".drag-handler",
                            move: e.checkContainerMove
                        },
                        on: {
                            add: function(t) {
                                return e.onContainerDragAdd(t, e.widget.widgetList);
                            },
                            update: e.onContainerDragUpdate
                        }
                    }, "draggable", {
                        group: "dragGroup",
                        ghostClass: "ghost",
                        animation: 200
                    }, false), [n("transition-group", {
                        staticClass: "form-widget-list",
                        attrs: {
                            name: "fade",
                            tag: "div"
                        }
                    }, [e._l(e.widget.widgetList, function(t, i) {
                        return ["container" === t.category ? [n(t.type + "-widget", {
                            key: t.id,
                            tag: "component",
                            attrs: {
                                widget: t,
                                designer: e.designer,
                                "parent-list": e.widget.widgetList,
                                "index-of-parent-list": i,
                                "parent-widget": e.widget
                            }
                        })] : [n(t.type + "-widget", {
                            key: t.id,
                            tag: "component",
                            attrs: {
                                field: t,
                                designer: e.designer,
                                "parent-list": e.widget.widgetList,
                                "index-of-parent-list": i,
                                "parent-widget": e.widget,
                                "design-state": true
                            }
                        })]];
                    })], 2)], 1)], 1)], 1);
                },
                kt = [],
                St = n("61ca"),
                Ot = n("cd36"),
                Et = n("26a6"),
                $t = {
                    name: "card-widget",
                    componentName: "ContainerWidget",
                    mixins: [C.b, St.a, Et.a],
                    inject: ["refList"],
                    components: Object(h.a)({
                        Draggable: p.a,
                        ContainerWrapper: Ot.default
                    }, z.a),
                    props: {
                        widget: Object,
                        parentWidget: Object,
                        parentList: Array,
                        indexOfParentList: Number,
                        designer: Object
                    },
                    computed: {
                        selected: function() {
                            return this.widget.id === this.designer.selectedId;
                        },
                        customClass: function() {
                            return this.widget.options.customClass || "";
                        }
                    },
                    created: function() {
                        this.initRefList();
                    },
                    methods: {
                        checkContainerMove: function(e) {
                            return true;
                        },
                        toggleCard: function() {
                            this.widget.options.folded = !this.widget.options.folded;
                        },
                        setFolded: function(e) {
                            this.widget.options.folded = !!e;
                        }
                    }
                },
                Mt = $t,
                Tt = (n("09c3"), Object($.a)(Mt, Ct, kt, false, null, "228afde5", null)),
                Lt = Tt.exports,
                At = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("container-item-wrapper", {
                        attrs: {
                            widget: e.widget
                        }
                    }, [n("el-card", {
                        directives: [{
                            name: "show",
                            rawName: "v-show",
                            value: !e.widget.options.hidden,
                            expression: "!widget.options.hidden"
                        }],
                        key: e.widget.id,
                        ref: e.widget.id,
                        staticClass: "card-container",
                        class: [e.widget.options.folded ? "folded" : "", e.customClass],
                        style: {
                            width: e.widget.options.cardWidth + "!important" || false
                        },
                        attrs: {
                            shadow: e.widget.options.shadow
                        }
                    }, [n("div", {
                        staticClass: "clear-fix",
                        attrs: {
                            slot: "header"
                        },
                        slot: "header"
                    }, [n("span", [e._v(e._s(e.widget.options.label))]), e.widget.options.showFold ? n("i", {
                        staticClass: "float-right",
                        class: [e.widget.options.folded ? "el-icon-arrow-up" : "el-icon-arrow-down"],
                        on: {
                            click: e.toggleCard
                        }
                    }) : e._e()]), e.widget.widgetList && e.widget.widgetList.length > 0 ? [e._l(e.widget.widgetList, function(t, i) {
                        return ["container" === t.category ? [n(e.getComponentByContainer(t), {
                            key: i,
                            tag: "component",
                            attrs: {
                                widget: t,
                                "parent-list": e.widget.widgetList,
                                "index-of-parent-list": i,
                                "parent-widget": e.widget
                            },
                            scopedSlots: e._u([e._l(Object.keys(e.$scopedSlots), function(t) {
                                return {
                                    key: t,
                                    fn: function(n) {
                                        return [e._t(t, null, null, n)];
                                    }
                                };
                            })], null, true)
                        })] : [n(t.type + "-widget", {
                            key: i,
                            tag: "component",
                            attrs: {
                                field: t,
                                designer: null,
                                "parent-list": e.widget.widgetList,
                                "index-of-parent-list": i,
                                "parent-widget": e.widget
                            },
                            scopedSlots: e._u([e._l(Object.keys(e.$scopedSlots), function(t) {
                                return {
                                    key: t,
                                    fn: function(n) {
                                        return [e._t(t, null, null, n)];
                                    }
                                };
                            })], null, true)
                        })]];
                    })] : e._e()], 2)], 1);
                },
                Dt = [],
                Ft = n("d67f"),
                Rt = n("90c2"),
                jt = n("34f0"),
                Pt = {
                    name: "card-item",
                    componentName: "ContainerItem",
                    mixins: [q.a, C.b, Ft.a, jt.a],
                    components: Object(h.a)({
                        ContainerItemWrapper: Rt.default
                    }, z.a),
                    props: {
                        widget: Object
                    },
                    inject: ["refList", "sfRefList", "globalModel"],
                    computed: {
                        customClass: function() {
                            return this.widget.options.customClass || "";
                        }
                    },
                    created: function() {
                        this.initRefList();
                    },
                    beforeDestroy: function() {
                        this.unregisterFromRefList();
                    },
                    methods: {
                        toggleCard: function() {
                            this.widget.options.folded = !this.widget.options.folded;
                        }
                    }
                },
                It = Pt,
                Nt = (n("2e46"), Object($.a)(It, At, Dt, false, null, "2a1af67f", null)),
                qt = Nt.exports,
                Bt = (n("a4d3"), n("e01a"), function(e, t) {
                    var n = e.options,
                        i = re(e),
                        o = n.cardWidth ? 'style="{width: '.concat(n.cardWidth, ' !important}"') : "",
                        r = 'shadow="'.concat(n.shadow, '"'),
                        s = n.hidden ? 'v-show="false"' : "",
                        a = '<div class="card-container">\n  <el-card '.concat(i, " ").concat(o, " ").concat(r, " ").concat(s, '>\n    <div slot="header" class="clear-fix">\n      <span>').concat(n.label, "</span>\n      ").concat(n.showFold ? '<i class="float-right el-icon-arrow-down"></i>' : "", "\n    </div>\n    ").concat(e.widgetList.map(function(e) {
                            return "container" === e.category ? ae(e, t) : fe(e, t);
                        }).join(""), "\n  </el-card>\n</div>");
                    return a;
                }),
                Wt = function(e, t) {
                    var n = e.options,
                        i = 'title="'.concat(n.title, '"'),
                        o = "type=".concat(n.type),
                        r = n.description ? 'description="'.concat(n.description, '"') : "",
                        s = ':closable="'.concat(n.closable, '"'),
                        a = n.closeText ? 'close-text="'.concat(n.closeText, '"') : "",
                        l = ':center="'.concat(n.center, '"'),
                        c = ':show-icon="'.concat(n.showIcon, '"'),
                        u = 'effect="'.concat(n.effect, '"'),
                        d = "<el-alert ".concat(i, " ").concat(o, " ").concat(r, " ").concat(s, " ").concat(a, " ").concat(l, " \n  ").concat(c, " ").concat(u, ">\n</el-alert>");
                    return d;
                },
                Ht = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("static-content-wrapper", {
                        attrs: {
                            designer: e.designer,
                            field: e.field,
                            "design-state": e.designState,
                            "parent-widget": e.parentWidget,
                            "parent-list": e.parentList,
                            "index-of-parent-list": e.indexOfParentList,
                            "sub-form-row-index": e.subFormRowIndex,
                            "sub-form-col-index": e.subFormColIndex,
                            "sub-form-row-id": e.subFormRowId
                        }
                    }, [n("el-alert", {
                        ref: "fieldEditor",
                        attrs: {
                            title: e.field.options.title,
                            type: e.field.options.type,
                            description: e.field.options.description,
                            closable: e.field.options.closable,
                            center: e.field.options.center,
                            "close-text": e.field.options.closeText,
                            "show-icon": e.field.options.showIcon,
                            effect: e.field.options.effect
                        },
                        on: {
                            close: e.handleCloseCustomEvent
                        }
                    })], 1);
                },
                Vt = [],
                zt = n("828b"),
                Ut = n("2d11"),
                Kt = {
                    name: "alert-widget",
                    componentName: "FieldWidget",
                    mixins: [q.a, Ut.a, C.b],
                    props: {
                        field: Object,
                        parentWidget: Object,
                        parentList: Array,
                        indexOfParentList: Number,
                        designer: Object,
                        designState: {
                            type: Boolean,
                            default: false
                        },
                        subFormRowIndex: {
                            type: Number,
                            default: -1
                        },
                        subFormColIndex: {
                            type: Number,
                            default: -1
                        },
                        subFormRowId: {
                            type: String,
                            default: ""
                        }
                    },
                    components: {
                        StaticContentWrapper: zt.default
                    },
                    created: function() {
                        this.registerToRefList(), this.initEventHandler();
                    },
                    beforeDestroy: function() {
                        this.unregisterFromRefList();
                    },
                    methods: {
                        handleCloseCustomEvent: function() {
                            if (this.field.options.onClose) {
                                var e = new Function(this.field.options.onClose);
                                e.call(this);
                            }
                        }
                    }
                },
                Gt = Kt,
                Yt = Object($.a)(Gt, Ht, Vt, false, null, "b1f52dec", null),
                Xt = Yt.exports,
                Jt = function() {
                    y(xt), W.a.component(Lt.name, Lt), W.a.component(qt.name, qt), Ge("card-folded", "card-folded-editor", vt("folded", "extension.setting.cardFolded")), Ge("card-showFold", "card-showFold-editor", vt("showFold", "extension.setting.cardShowFold")), Ge("card-cardWidth", "card-cardWidth-editor", gt("cardWidth", "extension.setting.cardWidth"));
                    var e = [{
                        label: "never",
                        value: "never"
                    }, {
                        label: "hover",
                        value: "hover"
                    }, {
                        label: "always",
                        value: "always"
                    }];
                    Ge("card-shadow", "card-shadow-editor", yt("shadow", "extension.setting.cardShadow", {
                        optionItems: e
                    })), ve("card", Bt), w(_t), W.a.component(Xt.name, Xt), Ge("alert-title", "alert-title-editor", gt("title", "extension.setting.alertTitle"));
                    var t = [{
                        label: "success",
                        value: "success"
                    }, {
                        label: "warning",
                        value: "warning"
                    }, {
                        label: "info",
                        value: "info"
                    }, {
                        label: "error",
                        value: "error"
                    }];
                    W.a.component("alert-type-editor", yt("type", "extension.setting.alertType", {
                        optionItems: t
                    })), Ge("alert-description", "alert-description-editor", gt("description", "extension.setting.description")), Ge("alert-closable", "alert-closable-editor", vt("closable", "extension.setting.closable")), Ge("alert-closeText", "alert-closeText-editor", gt("closeText", "extension.setting.closeText")), Ge("alert-center", "alert-center-editor", vt("center", "extension.setting.center")), Ge("alert-showIcon", "alert-showIcon-editor", vt("showIcon", "extension.setting.showIcon"));
                    var n = [{
                        label: "light",
                        value: "light"
                    }, {
                        label: "dark",
                        value: "dark"
                    }];
                    Ge("alert-effect", "alert-effect-editor", bt("effect", "extension.setting.effect", {
                        optionItems: n
                    })), Ye("alert-onClose", "alert-onClose-editor", wt("onClose", [])), be("alert", Wt);
                };
            n("caad"), n("2532");
            W.a.directive("dialogDrag", {
                bind: function(e, t, n, i) {
                    var o = e.querySelector(".el-dialog__header"),
                        r = e.querySelector(".el-dialog");
                    o.style.cursor = "move";
                    var s = r.currentStyle || window.getComputedStyle(r, null);
                    o.onmousedown = function(e) {
                        var t, n, i = e.clientX - o.offsetLeft,
                            a = e.clientY - o.offsetTop;
                        s.left.includes("%") ? (t = +document.body.clientWidth * (+s.left.replace(/%/g, "") / 100), n = +document.body.clientHeight * (+s.top.replace(/%/g, "") / 100)) : (t = +s.left.replace(/px/g, ""), n = +s.top.replace(/px/g, "")), document.onmousemove = function(e) {
                            var o = e.clientX - i,
                                s = e.clientY - a;
                            r.style.left = "".concat(o + t, "px"), r.style.top = "".concat(s + n, "px");
                        }, document.onmouseup = function(e) {
                            document.onmousemove = null, document.onmouseup = null;
                        };
                    };
                }
            }), W.a.directive("dialogDragWidth", {
                bind: function(e, t, n, i) {
                    var o = t.value.$el.querySelector(".el-dialog");
                    e.onmousedown = function(t) {
                        var n = t.clientX - e.offsetLeft;
                        document.onmousemove = function(e) {
                            e.preventDefault();
                            var t = e.clientX - n;
                            o.style.width = "".concat(t, "px");
                        }, document.onmouseup = function(e) {
                            document.onmousemove = null, document.onmouseup = null;
                        };
                    };
                }
            });
            n("985d"), n("0f59");
            Jt(), mt.install = function(e) {
                e.component(mt.name, mt);
            }, Y.install = function(e) {
                e.component(Y.name, Y);
            };
            var Zt = [mt, Y],
                Qt = function(e) {
                    window.axios = a.a, Zt.forEach(function(t) {
                        e.component(t.name, t);
                    });
                };
            "undefined" !== typeof window && window.Vue && Qt(window.Vue);
            var en = {
                install: Qt,
                VFormDesigner: mt,
                VFormRender: Y,
                TrumpTable: Oe
            };
            t.default = en;
        },
        fb56: function(e, t, n) {
            "use strict";
            n("ff5e");
        },
        fb6a: function(e, t, n) {
            "use strict";
            var i = n("23e7"),
                o = n("da84"),
                r = n("e8b5"),
                s = n("68ee"),
                a = n("861d"),
                l = n("23cb"),
                c = n("07fa"),
                u = n("fc6a"),
                d = n("8418"),
                h = n("b622"),
                f = n("1dde"),
                p = n("f36a"),
                m = f("slice"),
                g = h("species"),
                v = o.Array,
                b = Math.max;
            i({
                target: "Array",
                proto: true,
                forced: !m
            }, {
                slice: function(e, t) {
                    var n, i, o, h = u(this),
                        f = c(h),
                        m = l(e, f),
                        y = l(undefined === t ? f : t, f);
                    if (r(h) && (n = h.constructor, s(n) && (n === v || r(n.prototype)) ? n = undefined : a(n) && (n = n[g], null === n && (n = undefined)), n === v || undefined === n)) return p(h, m, y);
                    for (i = new(undefined === n ? v : n)(b(y - m, 0)), o = 0; m < y; m++, o++) m in h && d(i, o, h[m]);
                    return i.length = o, i;
                }
            });
        },
        fbe0: function(e, t, n) {},
        fc5e: function(e, t) {
            var n = Math.ceil,
                i = Math.floor;
            e.exports = function(e) {
                return isNaN(e = +e) ? 0 : (e > 0 ? i : n)(e);
            };
        },
        fc6a: function(e, t, n) {
            var i = n("44ad"),
                o = n("1d80");
            e.exports = function(e) {
                return i(o(e));
            };
        },
        fc8b: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.lowThreshold")
                        }
                    }, [n("el-input-number", {
                        staticClass: "hide-spin-button",
                        staticStyle: {
                            width: "100%"
                        },
                        attrs: {
                            min: 1,
                            max: e.optionModel.highThreshold
                        },
                        model: {
                            value: e.optionModel.lowThreshold,
                            callback: function(t) {
                                e.$set(e.optionModel, "lowThreshold", t);
                            },
                            expression: "optionModel.lowThreshold"
                        }
                    })], 1);
                },
                o = [],
                r = n("79fa"),
                s = {
                    name: "lowThreshold-editor",
                    mixins: [r.b],
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        optionModel: Object
                    }
                },
                a = s,
                l = n("2877"),
                c = Object(l.a)(a, i, o, false, null, "d66e35d0", null);
            t.default = c.exports;
        },
        fcbf: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.cellHeight")
                        }
                    }, [n("el-input", {
                        attrs: {
                            type: "text"
                        },
                        model: {
                            value: e.optionModel.cellHeight,
                            callback: function(t) {
                                e.$set(e.optionModel, "cellHeight", t);
                            },
                            expression: "optionModel.cellHeight"
                        }
                    })], 1);
                },
                o = [],
                r = n("79fa"),
                s = {
                    name: "cellHeight-editor",
                    mixins: [r.b],
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        optionModel: Object
                    }
                },
                a = s,
                l = n("2877"),
                c = Object(l.a)(a, i, o, false, null, "52af6c29", null);
            t.default = c.exports;
        },
        fcd4: function(e, t, n) {
            t.f = n("cc15");
        },
        fce3: function(e, t, n) {
            var i = n("d039"),
                o = n("da84"),
                r = o.RegExp;
            e.exports = i(function() {
                var e = r(".", "s");
                return !(e.dotAll && e.exec("\n") && "s" === e.flags);
            });
        },
        fd28: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = n("e017"),
                o = n.n(i),
                r = n("21a1"),
                s = n.n(r),
                a = new o.a({
                    id: "icon-document",
                    use: "icon-document-usage",
                    viewBox: "0 0 1024 1024",
                    content: '<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="icon-document"><defs><style type="text/css"></style></defs><path d="M979.478261 706.381913a44.521739 44.521739 0 0 1-11.842783 57.967304l-4.36313 2.849392-393.794783 227.862261-5.38713 4.763826a84.012522 84.012522 0 0 1-43.942957 17.808695l-8.102956 0.400696c-19.055304 0-37.309217-6.544696-52.045913-18.253913l-5.431652-4.719304-393.750261-227.862261a44.521739 44.521739 0 0 1-18.610087-56.186435l2.359652-4.630261a44.521739 44.521739 0 0 1 60.816696-16.250435l405.325913 234.540522 1.335652 1.513739 1.335652-1.513739 405.281391-234.540522a44.521739 44.521739 0 0 1 60.861218 16.250435z m0-222.608696a44.521739 44.521739 0 0 1-11.842783 57.967305l-4.36313 2.849391-393.794783 227.862261-5.38713 4.763826a84.012522 84.012522 0 0 1-43.942957 17.808696l-8.102956 0.400695c-19.055304 0-37.309217-6.544696-52.045913-18.253913l-5.431652-4.719304-393.750261-227.862261a44.521739 44.521739 0 0 1-18.610087-56.186435l2.359652-4.630261a44.521739 44.521739 0 0 1 60.816696-16.250434l405.325913 234.540521 1.335652 1.513739 1.335652-1.513739 405.281391-234.540521a44.521739 44.521739 0 0 1 60.861218 16.250434zM512 0c18.788174 0 36.864 6.099478 51.645217 17.185391l4.58574 3.739826 403.500521 199.68 5.609739 6.144c32.50087 35.439304 32.50087 89.889391 0 125.328696l-5.609739 6.144-403.500521 199.590957-4.541218 3.784347a86.238609 86.238609 0 0 1-43.675826 16.829218L512 578.782609c-18.788174 0-36.864-6.099478-51.645217-17.185392l-4.630261-3.784347L52.268522 358.221913l-5.609739-6.144a92.738783 92.738783 0 0 1 0-125.328696l5.609739-6.144L455.724522 20.925217l4.585739-3.739826c12.688696-9.48313 27.826087-15.315478 43.675826-16.829217z" fill="#008df0" p-id="5455" /></symbol>'
                });
            s.a.add(a);
            t.default = a;
        },
        fd87: function(e, t, n) {
            var i = n("74e8");
            i("Int8", function(e) {
                return function(t, n, i) {
                    return e(this, t, n, i);
                };
            });
        },
        fdbc: function(e, t) {
            e.exports = {
                CSSRuleList: 0,
                CSSStyleDeclaration: 0,
                CSSValueList: 0,
                ClientRectList: 0,
                DOMRectList: 0,
                DOMStringList: 0,
                DOMTokenList: 1,
                DataTransferItemList: 0,
                FileList: 0,
                HTMLAllCollection: 0,
                HTMLCollection: 0,
                HTMLFormElement: 0,
                HTMLSelectElement: 0,
                MediaList: 0,
                MimeTypeArray: 0,
                NamedNodeMap: 0,
                NodeList: 1,
                PaintRequestList: 0,
                Plugin: 0,
                PluginArray: 0,
                SVGLengthList: 0,
                SVGNumberList: 0,
                SVGPathSegList: 0,
                SVGPointList: 0,
                SVGStringList: 0,
                SVGTransformList: 0,
                SourceBufferList: 0,
                StyleSheetList: 0,
                TextTrackCueList: 0,
                TextTrackList: 0,
                TouchList: 0
            };
        },
        fdbf: function(e, t, n) {
            var i = n("4930");
            e.exports = i && !Symbol.sham && "symbol" == typeof Symbol.iterator;
        },
        fe05: function(e, t, n) {
            "use strict";
            n("2dd9");
        },
        fe5d: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.allowCreate")
                        }
                    }, [n("el-switch", {
                        model: {
                            value: e.optionModel.allowCreate,
                            callback: function(t) {
                                e.$set(e.optionModel, "allowCreate", t);
                            },
                            expression: "optionModel.allowCreate"
                        }
                    })], 1);
                },
                o = [],
                r = n("79fa"),
                s = {
                    name: "allowCreate-editor",
                    mixins: [r.b],
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        optionModel: Object
                    }
                },
                a = s,
                l = n("2877"),
                c = Object(l.a)(a, i, o, false, null, "7ea31b71", null);
            t.default = c.exports;
        },
        fea9: function(e, t, n) {
            var i = n("da84");
            e.exports = i.Promise;
        },
        fed5: function(e, t) {
            t.f = Object.getOwnPropertySymbols;
        },
        feea: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.displayType")
                        }
                    }, [n("el-select", {
                        model: {
                            value: e.optionModel.type,
                            callback: function(t) {
                                e.$set(e.optionModel, "type", t);
                            },
                            expression: "optionModel.type"
                        }
                    }, [n("el-option", {
                        attrs: {
                            label: "daterange",
                            value: "daterange"
                        }
                    }), n("el-option", {
                        attrs: {
                            label: "datetimerange",
                            value: "datetimerange"
                        }
                    }), n("el-option", {
                        attrs: {
                            label: "monthrange",
                            value: "monthrange"
                        }
                    })], 1)], 1);
                },
                o = [],
                r = n("79fa"),
                s = {
                    name: "date-range-type-editor",
                    mixins: [r.b],
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        optionModel: Object
                    }
                },
                a = s,
                l = n("2877"),
                c = Object(l.a)(a, i, o, false, null, "574545a5", null);
            t.default = c.exports;
        },
        ff09: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.maxValue")
                        }
                    }, [n("el-input-number", {
                        staticClass: "hide-spin-button",
                        staticStyle: {
                            width: "100%"
                        },
                        model: {
                            value: e.maxValue,
                            callback: function(t) {
                                e.maxValue = t;
                            },
                            expression: "maxValue"
                        }
                    })], 1);
                },
                o = [],
                r = (n("a9e3"), n("79fa")),
                s = {
                    name: "max-editor",
                    mixins: [r.b],
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        optionModel: Object
                    },
                    computed: {
                        maxValue: {
                            get: function() {
                                return this.optionModel.max;
                            },
                            set: function(e) {
                                !e || isNaN(e) ? this.optionModel.max = null : this.optionModel.max = Number(e);
                            }
                        }
                    }
                },
                a = s,
                l = n("2877"),
                c = Object(l.a)(a, i, o, false, null, "edcd3882", null);
            t.default = c.exports;
        },
        ff5e: function(e, t, n) {},
        ff66: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.precision")
                        }
                    }, [n("el-input-number", {
                        staticClass: "hide-spin-button",
                        staticStyle: {
                            width: "100%"
                        },
                        attrs: {
                            min: 0
                        },
                        model: {
                            value: e.optionModel.precision,
                            callback: function(t) {
                                e.$set(e.optionModel, "precision", t);
                            },
                            expression: "optionModel.precision"
                        }
                    })], 1);
                },
                o = [],
                r = n("79fa"),
                s = {
                    name: "precision-editor",
                    mixins: [r.b],
                    props: {
                        designer: Object,
                        selectedWidget: Object,
                        optionModel: Object
                    }
                },
                a = s,
                l = n("2877"),
                c = Object(l.a)(a, i, o, false, null, "6d29eaf2", null);
            t.default = c.exports;
        },
        ffcf: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = function() {
                    var e = this,
                        t = e.$createElement,
                        n = e._self._c || t;
                    return n("div", [e.optionModel.responsive ? e._e() : n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.colSpanTitle")
                        }
                    }, [n("el-input-number", {
                        staticStyle: {
                            width: "100%"
                        },
                        attrs: {
                            min: 1,
                            max: 24
                        },
                        model: {
                            value: e.optionModel.span,
                            callback: function(t) {
                                e.$set(e.optionModel, "span", e._n(t));
                            },
                            expression: "optionModel.span"
                        }
                    })], 1), e.optionModel.responsive && "PC" === e.formConfig.layoutType ? n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.colSpanTitle") + "(PC)"
                        }
                    }, [n("el-input-number", {
                        staticStyle: {
                            width: "100%"
                        },
                        attrs: {
                            min: 1,
                            max: 24
                        },
                        model: {
                            value: e.optionModel.md,
                            callback: function(t) {
                                e.$set(e.optionModel, "md", e._n(t));
                            },
                            expression: "optionModel.md"
                        }
                    })], 1) : e._e(), e.optionModel.responsive && "Pad" === e.formConfig.layoutType ? n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.colSpanTitle") + "(Pad)"
                        }
                    }, [n("el-input-number", {
                        staticStyle: {
                            width: "100%"
                        },
                        attrs: {
                            min: 1,
                            max: 24
                        },
                        model: {
                            value: e.optionModel.sm,
                            callback: function(t) {
                                e.$set(e.optionModel, "sm", e._n(t));
                            },
                            expression: "optionModel.sm"
                        }
                    })], 1) : e._e(), e.optionModel.responsive && "H5" === e.formConfig.layoutType ? n("el-form-item", {
                        attrs: {
                            label: e.i18nt("designer.setting.colSpanTitle") + "(H5)"
                        }
                    }, [n("el-input-number", {
                        staticStyle: {
                            width: "100%"
                        },
                        attrs: {
                            min: 1,
                            max: 24
                        },
                        model: {
                            value: e.optionModel.xs,
                            callback: function(t) {
                                e.$set(e.optionModel, "xs", e._n(t));
                            },
                            expression: "optionModel.xs"
                        }
                    })], 1) : e._e()], 1);
